<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>windfanta.github.io/blog</title>
  
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://windfanta.github.io/blog/"/>
  <updated>2018-07-30T02:08:18.021Z</updated>
  <id>http://windfanta.github.io/blog/</id>
  
  <author>
    <name>SUNGMIN SHIN</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular essentials - 컴포넌트</title>
    <link href="http://windfanta.github.io/blog/2018/07/27/study-angular-essential-7/"/>
    <id>http://windfanta.github.io/blog/2018/07/27/study-angular-essential-7/</id>
    <published>2018-07-27T07:21:49.000Z</published>
    <updated>2018-07-30T02:08:18.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-essentials"><a href="#Angular-essentials" class="headerlink" title="Angular essentials"></a>Angular essentials</h1><p>(<a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13761643" target="_blank" rel="noopener">https://book.naver.com/bookdb/book_detail.nhn?bid=13761643</a>)</p><p><br></p><h2 id="07-컴포넌트"><a href="#07-컴포넌트" class="headerlink" title="07. 컴포넌트"></a>07. 컴포넌트</h2><p><br></p><h3 id="7-1-컴포넌트란"><a href="#7-1-컴포넌트란" class="headerlink" title="7.1 컴포넌트란?"></a>7.1 컴포넌트란?</h3><p>컴포넌트(Component)는 Angular의 애플리케이션은 컴포넌트를 중심으로 구성(CBM, Component Based Development)된다.<br>컴포넌트의 역활은 애플리케이션의 화면을 구성하는 뷰(View)를 생성, 관리하는 것이며 Angular는 이러한 컴포넌트를 조립하여 하나의 완성된 애플리케이션을 작성한다.</p><p><br></p><h4 id="7-1-1-웹-컴포넌트"><a href="#7-1-1-웹-컴포넌트" class="headerlink" title="7.1.1 웹 컴포넌트"></a>7.1.1 웹 컴포넌트</h4><p>웹 애플리케이션의 뷰는 내용(Content)과 구조(Structure)를 담당하는 HTML과 스타일(디자인, 레이아웃 등)을 담당하는 CSS 조합으로 생성되며 DOM과 이벤트의 관리를 위해 JavaScript가 필요 함.</p><p><strong>컴포넌트는 독립적이고 완결된 뷰를 생성하기 위해 HTML, CSS, JavaScript를 하나의 단위로 묶는 것으로 Angular에서의 컴포넌트는 W3C의 표준인 웹 컴포넌트를 기반으로 한다.</strong></p><p>컴포넌트는 동작가능한 하나의 부품으로 부품화가 되려면 다른 컴포넌트의 간섭을 받지 않도록 독립된 스코프가 필요 한데 기존 객체지향 개발의 경우 로직을 클래스 단위로 부품화할 수 있지만 뷰를 부품화하는 것은 곤란하다.(CSS는 상속과 캐스케이딩이 적용되어 다른 CSS 룰셋의 영향을 받기 때문)<br>(즉 컴포넌트는 독립된 스코프 내에서만 유효한 상태 정보와 로직 그리고 스타일을 가져야 함)</p><p><a href="https://www.webcomponents.org/introduction" target="_blank" rel="noopener">웹 컴포넌트(Web Component)</a>는 웹 애플리케이션에서 재사용이 가능하도록 캡슐화된 HTML 커스텀 요소를 생성하는 웹 플랫폼 API의 집합으로 아래와 같은 기능을 지원한다.</p><blockquote><ol><li>HTML Template - 컴포넌트의 뷰를 생성할 수 있어야 함</li><li>Shadow DOM - 외부로부터의 간섭을 제어하기 위해 스코프(Scope)를 분리하여 DOM을 캡슐화(encapsulation)할 수 있어야 함</li><li>HTML Import - 외부에서 컴포넌트를 호출할 수 있어야 함</li><li>Custom Element - 컴포넌트를 명시적으로 호출하기 위한 명칭(alias)을 선언하여 마치 네이티브 HTML 요소와 같이 사용할 수 있어야 함</li></ol></blockquote><blockquote><p>정리<br><br>컴포넌트는 HTMl, CSS, JavaScript 모두 독립적인 스코프를 가져야 하며 이를 위해 Angular는 W3C의 <a href="https://www.webcomponents.org/introduction" target="_blank" rel="noopener">웹 컴포넌트(Web Component)</a>를 기반으로 컴포넌트를 제공</p></blockquote><p><br></p><h4 id="7-1-2-컴포넌트-트리"><a href="#7-1-2-컴포넌트-트리" class="headerlink" title="7.1.2 컴포넌트 트리"></a>7.1.2 컴포넌트 트리</h4><p>컴포넌트는 재사용이 용이한 구조로 분할하여 작성하며 분할된 컴포넌트를 조립하여 코드의 중복 없이 UI를 생성한다.<br>(어떠한 복잡한 화면이라고 하나의 컴포넌트 하나로 생성하고 관리할 수 있지만 재사용이 가능한 부분들까지 화면 전체로 구성하는 것은 컴포넌트를 사용하는 취지에 부합하지 않는다 그리고 컴포넌트를 분할하고 조립하여 화면을 구성하는 것은 재사용과 유지보수 관점에서 매우 바람직하다.)</p><p>대부분의 웹 애플리케이션은 아래의 그림처럼 블록 구조를 갖는 데 HTML5의 시멘틱 태그를 사용하면 의미론적으로 명확한 구조를 가질 수 있다.<br><img src="https://poiemaweb.com/img/building-structure.png" alt="블록 구조"></p><p><br></p><p>위 그림과 같은 블록 구조를 컴포넌트로 전환하면 아래의 그림과 같은 구조를 갖는다.</p><p><img src="https://poiemaweb.com/img/component-tree.png" alt="컴포넌트 트리"></p><p>이를 컴포넌트 트리라고 하는데 Angular 애플리케이션은 분할된 컴포넌트로 구성되기 때문에 컴포넌트 간에 컴포넌트 트리로 표현되는 ‘부모-자식’ 관계가 형성된다.<br>컴포넌트 간의 ‘부모-자식’ 관계는 데이터와 이벤트가 왕래하는 상태 정보 흐름의 통로가 되어 상태 공유가 이루어지기 때문에 Angular 애플리케이션에서 매우 중요한 의미를 갖는다.</p><p><br></p><h3 id="7-2-컴포넌트-기본-구조"><a href="#7-2-컴포넌트-기본-구조" class="headerlink" title="7.2 컴포넌트 기본 구조"></a>7.2 컴포넌트 기본 구조</h3><p><br></p><h4 id="7-2-1-컴포넌트의-코드-구조"><a href="#7-2-1-컴포넌트의-코드-구조" class="headerlink" title="7.2.1 컴포넌트의 코드 구조"></a>7.2.1 컴포넌트의 코드 구조</h4><p>컴포넌트의 기본 구조 확인을 위해 Angular CLI로 프로젝트를 생성하자<br> 프로젝트를 생성하면 프로젝트 명과 일치하는 새로운 프로젝트 폴더와 함께 스캐폴딩(프로젝트 기본 골격)이 작성된다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new hello</span><br></pre></td></tr></table></figure><p>프로젝트가 생성되면 ng serve 명령어로 생성한 프로젝트(hello)를 실행한다.<br>ng serve 명령어가 실행되면 webpack을 사용하여 소스코드와 의존 모듈을 자바스크립트로 번들링하고 Angular CLI가 내장하고 있는 개발용 서버를 실행한다.</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hello</span><br><span class="line">ng serve --open</span><br></pre></td></tr></table></figure><p>ng new 명령어로 생성된 프로젝트는 루트 컴포넌트와 루트 모듈을 각각 1개씩 갖는다.<br>루트 모듈은 프로젝트에서 최상위 모듈로 main.ts에 의해 부트스트랩되며<br>컴포넌트 트리 상의 최상위 컴포넌트인 루트 컴포넌트는 루트 모듈에 의해 부트스트랩 된다. (아래 그림 참고)</p><p><img src="https://poiemaweb.com/img/angular-process.png" alt="Angular 애플리케이션의 처리 흐름"></p><p>이렇게 생성된 컴포넌트 <strong>/app/app.component.ts</strong> 를 살펴보자</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* /src/app/app.component.ts  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 임포트 영역(import)</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. @Component 데코레이터 영역(@Component Decorator)</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [ <span class="string">'./app.component.css'</span> ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 컴포넌트(Component) 클래스(class) 영역</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title:<span class="built_in">boolean</span> = <span class="string">'app'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>1. 임포트 영역</strong><br>컴포넌트에 필요한 의존 모듈을 임포트한다.<br>Angular 라이브러리의 모듈은 ‘@’가 붙어있으며 npm을 사용하여 설치한 의존 모듈과 함께 경로를 표기하지 않는다.<br>그 이외의 경우는 상대 경로를 명시하여야 한다.</p><p><br></p><p><strong>2. @Component 데코레이터 영역</strong><br>@Component 데코레이터의 인자는 메타데이터 객체를 전달한다.<br>메타데이터 객체는 셀렉터, 템플릿, 스타일 정의 등의 컴포넌트 생성에 필요한 정보를 담고 있다.</p><p><br></p><p><strong>3. 컴포넌트 클래스 영역</strong><br>컴포넌트 뷰를 관리하기 위한 로직을 담은 클래스를 정의한다.<br>컴포넌트의 내부 관심사인 뷰의 관리에 집중해야하며 애플리케이션 공통 괌심사는 서비스로 분리하여야 한다.</p><p><br></p><p>주의해야 할 것은 @Component 데코레이터는 자신의 바로 아래에 위치한 클래스를 컴포넌트로 인식하기 때문에 컴포넌트 클래스는 @Component 데코레이터의 바로 아래 위치시켜야 한다.<br>(즉 @Component 데코레이터와 컴포넌트 클래스의 사이에 아무것도 존재해서는 안됨) </p><p><br></p><h4 id="7-2-2-컴포넌트의-기본-동작-구조"><a href="#7-2-2-컴포넌트의-기본-동작-구조" class="headerlink" title="7.2.2 컴포넌트의 기본 동작 구조"></a>7.2.2 컴포넌트의 기본 동작 구조</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- src/app/app.component.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  Welcome to &#123;&#123; title &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위 html은 @Component 데코레이터의 templateUrl 프로퍼티에 설정된 템플릿으로 컴포넌트의 뷰는 HTML과 Angular 고유의 템플릿 문법으로 작성한다.<br><strong>Angular essentials - 컴포넌트</strong> 은 템플릿 문법의 하나인 인터폴레이션으로 컴포넌트 클래스의 데이터를 템플릿에 바인딩하는 데 이러한 방식을 데이터 바인딩(Data Binding)이라고 한다.<br>( ‘/src/app/app.component.ts’의 컴포넌트 클래스의 title의 값이 Angular essentials - 컴포넌트에 바인딩 됨 )</p><p><br></p><p>컴포넌트는 데이터 바인딩에 의해 템플릿과 컴포넌트 클래스의 데이터를 유기적으로 연계하는 데 기본적인 동작구조는 아래 그림과 같다.</p><p><img src="https://poiemaweb.com/img/data-binding.png" alt="컴포넌트의 기본 동작 구조"></p><blockquote><p>[ 템플릿 ]<br>컴포넌트의 뷰를 생성하기 위해 HTML과 Angular의 고유한 템플릿 문법으로 작성된 코드</p></blockquote><blockquote><p>[ 메타데이터 객체 ]<br>컴포넌트 설정 정보를 담고 있는 객체로 <strong>@Component 데코레이터는 메타데이터 객체를 인자로 전달받아 컴포넌트 클래스에 반영한다.</strong></p></blockquote><blockquote><p>[ 컴포넌트 클래스 ]<br>컴포넌트의 뷰를 생성하는 템플릿의 상태를 관리한다. 데이터 바인딩을 통해 템플릿에 필요한 데이터를 제공하거나 템플릿에서 발생한 이벤트를 처리</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular-essentials&quot;&gt;&lt;a href=&quot;#Angular-essentials&quot; class=&quot;headerlink&quot; title=&quot;Angular essentials&quot;&gt;&lt;/a&gt;Angular essentials&lt;/h1&gt;&lt;p&gt;(&lt;a hr
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="angular" scheme="http://windfanta.github.io/blog/categories/study/angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular essentials - Angular의 파일 구조와 처리 흐름</title>
    <link href="http://windfanta.github.io/blog/2018/07/25/study-angular-essential-6/"/>
    <id>http://windfanta.github.io/blog/2018/07/25/study-angular-essential-6/</id>
    <published>2018-07-25T07:21:49.000Z</published>
    <updated>2018-07-30T02:08:16.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-essentials"><a href="#Angular-essentials" class="headerlink" title="Angular essentials"></a>Angular essentials</h1><p>(<a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13761643" target="_blank" rel="noopener">https://book.naver.com/bookdb/book_detail.nhn?bid=13761643</a>)</p><p><br></p><h2 id="06-Angular의-파일-구조와-처리-흐름"><a href="#06-Angular의-파일-구조와-처리-흐름" class="headerlink" title="06. Angular의 파일 구조와 처리 흐름"></a>06. Angular의 파일 구조와 처리 흐름</h2><p><br></p><h3 id="6-1-Angular-어플리케이션의-파일-구조"><a href="#6-1-Angular-어플리케이션의-파일-구조" class="headerlink" title="6.1 Angular 어플리케이션의 파일 구조"></a>6.1 Angular 어플리케이션의 파일 구조</h3><p>angular는 프레임워크 이므로 웹 애플리케이션 구축에 기본적으로 필요한 기능의 구현체를 정형화된 구조로 제공한다. 이를 바탕으로 우리의 애플리케이션에 요구되는 기능을 추가하는 방식으로 애플리케이션을 완성해 간다. 따라서 프레임워크의 학습은 정형화된 프레임 워크의 구조에 익숙해지는 것으로 시작한다.</p><p><br></p><h4 id="6-1-1-src-폴더"><a href="#6-1-1-src-폴더" class="headerlink" title="6.1.1 src 폴더"></a>6.1.1 src 폴더</h4><p>src 폴더는 Angular의 모든 구성요소, 공통 CSS, 이미지나 폰트와 같은정적 파일, 설정 파일등 애플리케이션의 필수 파일을 담고 있다. 개발자가 작성하는 대부분의 파일이 이곳에 포함된다.</p><hr><ul><li><strong>app/app.component.(ts, html, css, spec.ts)</strong> : 모든 컴포넌트의 부모 컴포넌트인 루트 컴포넌트를 구성하는 컴포넌트 클래스, 템플릿, CSS, 유닛 테스트용 스펙 파일</li><li><strong>app/app.module.ts</strong> : Angular의 모든 구성요소를 등록하는 루트 모듈</li><li><strong>assets/</strong> : 이미지, 폰트와 같은 정적 파일을 위한 폴더</li><li><strong>environments/</strong> : 프로젝트 빌드 시에 사용될 프로덕션/개발용 환경 설정 파일이 담겨있는 폴더 </li><li><strong>browserslist/</strong> : autoprefixer, babel과 같은 프런트엔드 도구 간의 적용 대상 브라우저를 공유하는 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">browserslist</a> 의 설정 파일</li><li><strong>favicon.ico</strong> : 파비콘 파일</li><li><strong>index.html</strong> : 웹 어플리케이션에 방문 시 처음으로 로딩되는 디폴트 페이지, 루트 컴포넌트(app.component.*)의 셀렉터(\&lt;app-root>)에 의해 루트 컴포넌트의 뷰가 로드되어 브라우저에 표시된다. (빌드 시에는 번들링된 자바스크립트 파일이 자동 추가된 index.html이 dist 폴더에 생성 됨)</li><li><strong>karma.conf</strong> : <a href="https://karma-runner.github.io" target="_blank" rel="noopener">karma test runner</a> 를 위한 설정 파일로 ng test 명령어 실행 시 참조 됨</li><li><strong>main.ts</strong> : 프로젝트의 메인 진입점, 루트 모듈(AppModule)을 사용하여 애플리케이션의 <a href="https://ko.wikipedia.org/wiki/%EB%B6%80%ED%8A%B8%EC%8A%A4%ED%8A%B8%EB%9E%A9" target="_blank" rel="noopener">부트스트랩</a>(기동) 한다.</li><li><strong>polyfills.ts</strong> : 크로스 브라우징을 위한 <a href="https://ko.wikipedia.org/wiki/%ED%8F%B4%EB%A6%AC%ED%95%84_\(%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" target="_blank" rel="noopener">폴리필</a>) 들을 임포트하는 역활을 한다.</li><li><strong>styles.css</strong> : 애플리케이션 전역에 적용되는 글로벌 CSS파일</li><li><strong>test.ts</strong> : 유닛 테스트를 위한 메인 진입점</li><li><strong>tsconfig.(app|spec).json</strong> : TypeScript 컴파일 옵션 설정 파일</li><li><strong>typings.d.ts</strong> : TypeScript를 위한 타입 선언 파일</li></ul><hr><p><br></p><h4 id="6-1-2-기타-설정-파일"><a href="#6-1-2-기타-설정-파일" class="headerlink" title="6.1.2 기타 설정 파일"></a>6.1.2 기타 설정 파일</h4><hr><ul><li><strong>e2e/</strong> : e2e(end-to-end) 테스트 관련 파일을 위한 폴더</li><li><strong>node_modules/</strong> : package.json에 등록된 의존 모듈이 패키지 매니저에 의해 설치되는 의존 모듈 저장소</li><li><strong>.editorconfig</strong> : 코드 에디터 기본 설정 파일 (<a href="https://editorconfig.org/" target="_blank" rel="noopener">https://editorconfig.org/</a>)</li><li><strong>.gitignore</strong> : git 소스 관리 제외 대상을 위한 설정 파일</li><li><strong>angular.json</strong> : Angular CLI를 위한 설정 파일</li><li><strong>package.json</strong> : 의존 모듈 관리를 위해 패키지 매니저(npm, yarn등)가 사용하는 모듈 관리 파일</li><li><strong>README.md</strong> : 프로젝트의 개요를 기술한 README 파일, Angular CLI가 기본적인 내용을 자동 생성</li><li><strong>tsconfig.json</strong> : TypeScript 컴파일 옵션 설정 파일</li><li><strong>tslint.json</strong> : <a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">TSLint</a>가 사용하는 linting(구문 체크) 설정 파일로 ng init 명령어 실행 시 참조</li></ul><hr><p><br></p><h3 id="6-2-Angular-애플리케이션의-처리-흐름"><a href="#6-2-Angular-애플리케이션의-처리-흐름" class="headerlink" title="6.2 Angular 애플리케이션의 처리 흐름"></a>6.2 Angular 애플리케이션의 처리 흐름</h3><p><img src="https://poiemaweb.com/img/angular-process.png" alt="Angular 어플리케이션의 처리 흐름"></p><h5 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h5><p>웹 브라우저가 가장 먼저 로딩하는 프로젝트 파일로 경로는 /my-app/dist/index.html 이지만 이 것은 /my-app/src/index.html이 ng build 명령어로 자바스크립트 파일이 추가 되어 자동 생성된 파일이다.</p><blockquote><p>Angular 애플리케이션을 기동하기 위해서는 수 많은 의존성 모듈(@angular/*, core-js, zone.js, Rxjs.js 등등)과 TypeScript 파일의 컴파일 결과물인 자바스크립트 파일을 로드할 필요가 있는데 Angular는 모듈 번들러 webpack을 사용하여 의존성 모듈과 자바스크립트 파일을 번들링한 후, 수작업 없이 간편하게 로드할 수 있도록 자동화 기능을 제공한다.</p></blockquote><p>번들링의 결과물로 생성된 JS파일들이 로드되어 실행되면서 Angular 애플리케이션은 동작하기 시작한다. 번들링된 JS파일은 아래와 같다.</p><ul><li>main.js</li><li>polyfills.js</li><li>styles.js</li><li>vendor.js</li><li>runtime.js</li></ul><p><br></p><h4 id="main-ts"><a href="#main-ts" class="headerlink" title="main.ts"></a>main.ts</h4><p>main.ts는 프로젝트의 메인 진입점(main entry point)로 루트 모듈(/src/app/app.modules.ts)을 사용하여 애플리케이션을 기동(부트스트랩) 한다.<br>(main.ts는 angular.json의 main프로퍼티의 설정에 의해 로드 된다.)</p><p><br></p><h4 id="app-modules-ts"><a href="#app-modules-ts" class="headerlink" title="app.modules.ts"></a>app.modules.ts</h4><p>@NgModule 데코레이터의 인자로 전달되는 메타데이터에 애플리케이션 전체의 설정 정보를 기술한 루트 모듈, 루트 모듈은 루트 컴포넌트 (/src/app/app.component.ts)를 기동(부트스트랩)한다.</p><p><br></p><h4 id="app-component-ts"><a href="#app-component-ts" class="headerlink" title="app.component.ts"></a>app.component.ts</h4><p>모든 컴포넌트의 부모 역활을 담당하는 루트 컴포넌트로 my-app 프로젝트의 경우 /dist/index.html 의 \&lt;app-root>에 의해 루트 컴포넌트의 뷰가 로드 되어 콘텐츠(\&lt;app-root>의 콘텐츠)로 브라우저에 표시된다.</p><p><br></p><h3 id="6-3-Angular의-구성요소"><a href="#6-3-Angular의-구성요소" class="headerlink" title="6.3 Angular의 구성요소"></a>6.3 Angular의 구성요소</h3><p>Angular 애플리케이션의 아래의 구성요소를 조합하여 구축한다.</p><blockquote><p><strong>컴포넌트(component)</strong><br>  컴포넌트는 켐플릿과 메타 데이터, 컴포넌트 클래스로 구성되며 데이터 바인딩에 의해 연결된다.<br>  <strong>컴포넌트는 화면을 구성하는 뷰(view)를 생성하고 관리하는 것이 주된 역활이며 화면은 1개 이상의 컴포넌트를 조립하여 구성한다.</strong></p></blockquote><p><br></p><blockquote><p><strong>디렉티브(Directive)</strong><br>  <strong>애플리케이션 전역에서 사용할 수 있는 뷰에 관련한 공통 관심사를 컴포넌트에서 분리하여 구현한 것으로 컴포넌트의 복잡도를 낮추고 가독성을 높인다.</strong><br>  구조 디렉티브(structual directive), 어트리뷰트 디렉티브(attribute directive)로 구분할 수 있으며 큰 틀에서 컴포넌트 또한 디렉티브로 구분할 수 있다.</p></blockquote><p><br></p><blockquote><p><strong>서비스(Service))</strong><br>  다양한 목적의 애플리케이션 공통 로직을 담당한다. 컴포넌트에서 애플리케이션 전역 관심사를 분리하기 위해 사용되며 의존성 주입(dependency injection)이 가능한 클래스로 작성</p></blockquote><p><br></p><blockquote><p><strong>라우터(Router)</strong><br>  컴포넌트를 교체하는 방법으로 뷰를 전환하여 화면 간 이동을 구현</p></blockquote><p><br></p><blockquote><p><strong>모듈(NgModule)</strong><br>  기능적으로 관련된 구성 요소를 하나의 단위로 묶는 메커니즘을 말한다. 모듈은 관련이 있는 기능들이 응집된 기능 블록으로 애플리케이션을 구성하는 하나의 단위를 만들며 모듈은 다른 모듈과 결합할 수 있으며 Angular는 여러 모듈을 조합하여 애플리케이션을 구성한다.<br>  <strong>컴포넌트, 디렉티브, 파이프, 서비스등의 Angular 구성요소는 모듈에 등록되어야 사용할 수 있다.</strong></p></blockquote><p><br></p><p><img src="https://poiemaweb.com/img/angular-process.png" alt="Angular 구성 요소와 아키텍처"></p><p>Angular는 컴포넌트를 중심으로 Angular 구성요소를 조합하여 애플리케이션을 구축한다.</p><ul><li>뷰를 담당하는 컴포넌트를 중심으로 화면을 구성</li><li>디렉티브와 서비스를 사용하여 애플리케이션 전역의 관심사를 분리하고 컴포넌트는 필요 시 디렉티브와 서비스를 사용</li><li>라우터는 컴포넌트를 교체하는 방식으로 뷰를 전환하여 화면 간 이동을 구현</li><li>모듈은 관련된 구성요소를 하나로 묶어 애플리케이션을 구성하는 하나의 단위를 만드는 역활을 함</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular-essentials&quot;&gt;&lt;a href=&quot;#Angular-essentials&quot; class=&quot;headerlink&quot; title=&quot;Angular essentials&quot;&gt;&lt;/a&gt;Angular essentials&lt;/h1&gt;&lt;p&gt;(&lt;a hr
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="angular" scheme="http://windfanta.github.io/blog/categories/study/angular/"/>
    
    
  </entry>
  
  <entry>
    <title>Angular essentials - typeScript</title>
    <link href="http://windfanta.github.io/blog/2018/07/23/study-angular-essential-4/"/>
    <id>http://windfanta.github.io/blog/2018/07/23/study-angular-essential-4/</id>
    <published>2018-07-23T07:21:49.000Z</published>
    <updated>2018-08-02T02:08:40.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-essentials"><a href="#Angular-essentials" class="headerlink" title="Angular essentials"></a>Angular essentials</h1><p>(<a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13761643" target="_blank" rel="noopener">https://book.naver.com/bookdb/book_detail.nhn?bid=13761643</a>)</p><p><br></p><h2 id="04-TypeScript"><a href="#04-TypeScript" class="headerlink" title="04. TypeScript"></a>04. TypeScript</h2><p><br></p><h3 id="4-1-TypeScript-개요"><a href="#4-1-TypeScript-개요" class="headerlink" title="4.1 TypeScript 개요"></a>4.1 TypeScript 개요</h3><p>HTML5가 등장하기 이전까지 웹 애플리케이션은 플래시, 실버라이트, 액티브엑스와 같은 플러그인에 의존하여 인터랙티브한 웹페이지를 구축해왔으나 HTML5가 등장함으로써 플러그 인에 의존하던 구축방식은 자바스크립트로 대체되었다.<br>또한 AJAX의 활성화로 데스크톱 애플리케이션과 유사한 사용자 경험을 제공할 수 있는 SPA(Single Page Application)가 대세가 되었고 과거 서버 측이 담당하던 업무의 많은 부분이 클라이언트 측으로 이동하게 되었고 자바스크립트는 웹의 어셈블리언어로 불릴만킄 중요한 언어로 그 위상이 높아지게 되었음</p><p>모든 프로그래밍 언어에 장, 단점이 있듯 자바스크립트도 언어가 잘 정제되기 이전에 서둘러 출시된 문제와 과거 웹페이지의 보조적인 기능을 수행하기 위해 한정적인 용도로 만들어진 태생적 한계로 좋은 점도 나쁜 점도 많은 것이 사실이며 C나 java와 같은 C-Family 언어와는 구별되는 아래와 같은 특성이 있다.</p><ul><li>프로토타입 기반 객체지향 언어</li><li>스코프와 this</li><li>동적 타입(Dynamic Type) 언어(자세한 내용은 4.2 참고)</li></ul><p>이와 같은 특성은 코드가 복잡해질 수 있고 디버그와 테스트 공수가 증가하는 등의 문제를 일으 킬 수 있어 특히 규모가 큰 프로젝트에서 주의하여야 한다.<br>위와 같은 자바스크립트의 태생적 문제는 극복하기 위해 CoffeeScript, Dart, Haxe와 같은 AltJS(자바스크립트 대체언어)가 등장하였다.</p><p>TypeScript 또한 자바스크립트 대체 언어의 하나로 JavaScript(ES5)의 상위 집합(superset)으로 2012년 MS에서 발표, 정적 타이핑을 지원하며 ES6의 class, module과 ES7의 데코레이터 등을 지원한다.</p><p>TypeScript는 ES5의 상위 집합이므로 기존의 자바스크립트(ES5) 문법을 그대로 사용할 수 있으며 ES6의 새로운 기능을 사용하기 위해 바벨(babel)과 같은 별도의 트랜스파일러를 사용하지 않아도 ES6의 새로운 기능을 기존의 자바스크립트 엔진에서 실행할 수 있다. (TypeScript도 컴파일 과정을 거쳐야 하므로 실제 작업 과정 자체는 비슷하다고 볼 수 있음)</p><p>TypeScript는 이후 ECMAScript의 업그레이드에 따른 새로운 기능을 계속 추가할 예정이어서 매년 업그레이드 될 ECMAScript의 표준을 따라갈 수 있는 좋은 수단이 될 것</p><p><br></p><h3 id="4-2-TypeScript의-장점"><a href="#4-2-TypeScript의-장점" class="headerlink" title="4.2 TypeScript의 장점"></a>4.2 TypeScript의 장점</h3><h4 id="정적-타입"><a href="#정적-타입" class="headerlink" title="정적 타입"></a>정적 타입</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2개의 매개변수 a,b를 받아 더한 값을 반환하는 함수</span></span><br><span class="line"><span class="comment">개발자는 의도는 매개변수로 number로 전달받는 것이였으나 코드 어디에도 표시되지 않으며 자바스크립트 문법상의 어떤 문제도 없음</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래와 같이 사용하면 의도되지 않은 결과를 반환</span></span><br><span class="line">sum(<span class="string">'x'</span>, <span class="string">'y'</span>);</span><br></pre></td></tr></table></figure><p>위 코드는 개발자의 의도대로 실행되진 않지만 문법상에 어떠한 문제도 없으며 에러 없이 정상적으로 실행하게 된다.<br>이는 변수나 반환 값의 타입을 사전에 지정하지 않는 자바스크립트의 동적 타이핑(Dynamic Typing)에 의한 것</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typescript</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수 및 반환 값의 type을 설정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 아래와 같이 설정한 타입과 다른 값을 사용하면 컴파일 단계에서 오류 발생</span></span><br><span class="line">sum(<span class="string">'x'</span>, <span class="string">'y'</span>);</span><br></pre></td></tr></table></figure><p>위와 같이 TypeScript는 정적 타입(static type)을 지원하므로 컴파일 단계에서 오류를 포착할 수 있으며 명시적인 정적 타입의 지정으로 개발자의 의도를 명확하게 코드로 기술하여 코드의 가독성을 높일 뿐만아니라 디버깅을 쉽게할 수 있는 장점이 있다.</p><p><br></p><h4 id="강력한-객체지향-프로그래밍-지원"><a href="#강력한-객체지향-프로그래밍-지원" class="headerlink" title="강력한 객체지향 프로그래밍 지원"></a>강력한 객체지향 프로그래밍 지원</h4><p>인터페이스, 제네릭 등과 같은 강력한 객체지향 프로그래밍 지원은 크고 복잡한 프로젝트의 코드 기반을 쉽게 구성할 수 있도록 도우며 Java, C#등 클래스 기반 객체지향 언어에 익숙한 개발자가 자바스크립트 프로젝트를 수행하는 데 진입장 벽을 낮추는 효과도 있다.</p><p><br></p><h4 id="ES6-ESNext-지원"><a href="#ES6-ESNext-지원" class="headerlink" title="ES6 / ESNext 지원"></a>ES6 / ESNext 지원</h4><p>TypeScript는 별도의 개발환경을 구축해야 하므로 다소 복잡해진 측면이 있지만 ES6를 완전히 지원하지 않고 있는 브라우저들을 고려하여 Babel등의 트랜스파일러를 사용해야하는 현재의 상황임을 감안하면 TypeScript를 위한 환경 구축에 드는 수고는 크지 않음(트랜스파일러든, TypeScript 컴파일러든 어쨋든 한가지는 해야하는 상황이란 이야기)<br>또한 TypeScript는 ECMAScript 표준에 포함되지는 않았지만 표준화가 유력한 스펙을 선제적으로 도입하므로 유용한 기능을 안전하게 도입하기에 유리하다 (이건 babel도 마찬가지긴 함)</p><p><br></p><h3 id="4-3-TypeScript-개발환경-구축"><a href="#4-3-TypeScript-개발환경-구축" class="headerlink" title="4.3 TypeScript 개발환경 구축"></a>4.3 TypeScript 개발환경 구축</h3><p>TypeScript의 파일(.ts)은 브라우저에서 동작하지 않으므로 TypeScript 컴파일러를 이용해 자바스크립트 파일로 변환해야 한다.</p><p><br></p><h4 id="4-3-1-TypeScript-컴파일러-설치"><a href="#4-3-1-TypeScript-컴파일러-설치" class="headerlink" title="4.3.1 TypeScript 컴파일러 설치"></a>4.3.1 TypeScript 컴파일러 설치</h4><p>npm을 사용하여 TypeScript을 전역에 설치</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br></pre></td></tr></table></figure><p>버전확인</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-3-2-TypeScript-컴파일러-사용법"><a href="#4-3-2-TypeScript-컴파일러-사용법" class="headerlink" title="4.3.2 TypeScript 컴파일러 사용법"></a>4.3.2 TypeScript 컴파일러 사용법</h4><p>TypeScript 컴파일러(tsc)는 .ts파일을 .js파일로 컴파일(트랜스파일링) 한다.<br>(TypeScript 파일을 자바스크립트 파일로 변환하는 과정은 컴파일보다는 트랜스파일링이 더 적절한 표현이라고 함)</p><p><strong>person.ts의 파일의 변환(확장자는 생략해도 무방)</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc person</span><br></pre></td></tr></table></figure></p><p><strong>person.ts / student.ts 복수의 파일 변환</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc person student</span><br></pre></td></tr></table></figure></p><p><strong>와일드 카드를 사용하여 모든 TypeScript의 파일 변환</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc *.ts</span><br></pre></td></tr></table></figure></p><p><strong>watch를 통한 자동변환(–watch / -w)</strong><br>(지정한 파일에 내용 변경이 일어나면 자동으로 감지하여 변환)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc person --watch</span><br></pre></td></tr></table></figure></p><p><strong>트랜스파일링될 js의 버전지정(–target/ - t)</strong><br>(별도의 선언 없이 트랜스파일링되는 .js파일의 버전은 ES3)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc person -t es6</span><br></pre></td></tr></table></figure></p><p>설정할 수 있는 버전은 ES3, ES5, ES6(ES2015), ES2016, ES2017(ESNext)이며 저 자세한 옵션들은 ‘typeScript Compiler Options’ 참고</p><blockquote><p>참고 - <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">typeScript Compiler Options</a></p></blockquote><p><br></p><h3 id="4-4-정적-타이핑-static-typing"><a href="#4-4-정적-타이핑-static-typing" class="headerlink" title="4.4 정적 타이핑(static typing)"></a>4.4 정적 타이핑(static typing)</h3><h4 id="4-4-1-타입-선언"><a href="#4-4-1-타입-선언" class="headerlink" title="4.4.1 타입 선언"></a>4.4.1 타입 선언</h4><p>변수에서의 타입 선언은 변수명 뒤에 타입(자료형, data type)을 명시하는 것으로 타입을 선언할 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo:<span class="built_in">string</span> = <span class="string">'hello'</span>;</span><br></pre></td></tr></table></figure><p>함수에서의 타입은 아래와 같이 선언<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수(x, y)와 반환값에 대한 타입 설정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// arrow function</span></span><br><span class="line"><span class="keyword">const</span> multiply2 = (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x * y;</span><br></pre></td></tr></table></figure></p><p>만약 선언한 타입에 맞지 않는 값을 할당하면 컴파일 시점에 에러가 발생하며 이는 변수, 함수 모두 동일<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bar: <span class="built_in">number</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">multiply(<span class="string">'1'</span>, <span class="number">10</span>);</span><br><span class="line">multiply2(<span class="number">2</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>타입 선언은 개발자가 코드를 예측할 수 있도록 돕는 것과 동시에 문법이나 타입 에러 혹은 일치하지 않는 값의 할당등 기본 오류를 런타임 이전에 검출하며<br>IDE(EX&gt;vscode)에 따라 코드를 작성하는 시점에도 에러를 검출할 수 있는 등 개발효율을 크게 향상시켜 줄 수 있다.</p><p>아래와 같이 TypeScript는 자바스크립트의 superset으로 자바스크립트의 타입을 그대로 사용할 수 있을 뿐 아니라 typeScript 고유의 타입을 추가로 사용할 수 있음</p><p><strong>JavaScript와 TypeScript 함께 사용할 수 있는 데이터 타입</strong></p><table><thead><tr><th>타입 (data type)</th><th>설명</th></tr></thead><tbody><tr><td>boolean</td><td>논리형 (true / false)</td></tr><tr><td>null</td><td>값이 없음을 명시</td></tr><tr><td>undefined</td><td>값을 할당하지 않은 변수의 초깃값</td></tr><tr><td>number</td><td>숫자(정수, 실수, Infinity, NaN)</td></tr><tr><td>string</td><td>문자열</td></tr><tr><td>symbol</td><td>고유하고 수정 불가능한 데이터 타입이며 주로 객체 프로퍼티의 식별자로 사용<br>(ES6에서 추가된 타입으로 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="noopener">MDN</a> 참고)</td></tr><tr><td>object</td><td>객체형</td></tr><tr><td>array</td><td>배열</td></tr></tbody></table><p><br></p><p><strong>TypeScript에서 사용할 수 있는 데이터 타입</strong></p><table><thead><tr><th>타입 (data type)</th><th>설명</th></tr></thead><tbody><tr><td>tuple</td><td>고정된 요소 수만큼의 자료형을 미리 선언 후 배열을 표현</td></tr><tr><td>enum</td><td>열거형, 숫자 값 집합에 이름을 지정한 것</td></tr><tr><td>any</td><td>타입을 추론할 수 없거나 타입 체크가 필요없는 변수에 사용, var키워드로 선언한 변수와 같이 어떤 타입의 값이라도 할당 가능</td></tr><tr><td>void</td><td>일반적으로 함수에서 반환값이 없을 때 사용</td></tr><tr><td>never</td><td>결코 발생하지 않는 값</td></tr></tbody></table><p><br></p><blockquote><p>참고 - <a href="https://infoscis.github.io/2017/05/14/TypeScript-handbook-basic-types/" target="_blank" rel="noopener">TypeScript 기본타입</a></p></blockquote><p><br></p><p><strong>TypeScript에서 타입 선언의 예</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">let</span> isDone: <span class="built_in">boolean</span>: <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">let</span> decimal: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> hex: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> binary: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> octal: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">'Kim'</span>;</span><br><span class="line">name = <span class="string">'Lee'</span>;</span><br><span class="line"><span class="keyword">let</span> greeting: <span class="built_in">string</span> = <span class="string">`Hello my name is <span class="subst">$&#123;name&#125;</span>`</span>;<span class="comment">// ES6 템플릿 문자열</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="keyword">let</span> obj: object = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// array</span></span><br><span class="line"><span class="keyword">let</span> list1: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">'two'</span>, <span class="literal">true</span>];</span><br><span class="line"><span class="keyword">let</span> list2: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> list3: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];<span class="comment">// 제네릭 배열 타입</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple - 고정된 요소의 수만큼 타입을 미리 선언 후 배열을 표현</span></span><br><span class="line"><span class="keyword">let</span> tuple: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">tuple = [<span class="string">'hello'</span>, <span class="number">20</span>];<span class="comment">// ok!</span></span><br><span class="line">tuple = [<span class="number">10</span>, <span class="string">'hello'</span>];<span class="comment">// error!</span></span><br><span class="line">tuple = [<span class="string">'hello'</span>, <span class="number">10</span>, <span class="literal">true</span>];<span class="comment">// error!</span></span><br><span class="line">tuple.push(<span class="literal">true</span>);<span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// enum - enum(열거형)은 숫자 값 집합에 이름을 지정한 것</span></span><br><span class="line"><span class="keyword">enum</span> Color1 &#123;Red, Green, Blue&#125;<span class="comment">// 값을 지정하지 않으면 0부터 시작되어 순차적으로 증가(Red = 0, Green = 1, Blue = 2)</span></span><br><span class="line"><span class="keyword">let</span> c11: Color1 = Color1.Red;<span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> c12: Color1 = Color1.Green;<span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> c13: Color1 = Color1.Blue;<span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color2 &#123;Red = <span class="number">4</span>, Green, Blue&#125;<span class="comment">// 값을 지정한 요소의 다음 요소들은 순차적으로 증가</span></span><br><span class="line"><span class="keyword">let</span> c21: Color2 = Color2.Red;<span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> c22: Color2 = Color2.Green;<span class="comment">// 5</span></span><br><span class="line"><span class="keyword">let</span> c23: Color2 = Color2.Blue;<span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color3 &#123;Red, Green = <span class="number">4</span>, Blue&#125;<span class="comment">// 초기 값이 지정되지 않은 첫번째 요소는 0</span></span><br><span class="line"><span class="keyword">let</span> c21: Color2 = Color2.Red;<span class="comment">// 0</span></span><br><span class="line"><span class="keyword">let</span> c22: Color2 = Color2.Green;<span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> c23: Color2 = Color2.Blue;<span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color4 &#123;Red = <span class="number">4</span>, Green = <span class="number">72</span>, Blue = <span class="number">999</span>&#125;<span class="comment">// 요소의 값은 꼭 순차적이지 않아도 상관없음</span></span><br><span class="line"><span class="keyword">let</span> c21: Color2 = Color2.Red;<span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> c22: Color2 = Color2.Green;<span class="comment">// 72</span></span><br><span class="line"><span class="keyword">let</span> c23: Color2 = Color2.Blue;<span class="comment">// 999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// any - 타입 추론을 할 수 없거나 체크가 필요없는 변수에 사용</span></span><br><span class="line"><span class="keyword">let</span> notSure: <span class="built_in">any</span> = <span class="number">10</span>;</span><br><span class="line">notSure = <span class="string">'hello'</span>;<span class="comment">// ok!</span></span><br><span class="line">notSure = <span class="literal">true</span>;<span class="comment">// ok!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// void - 일반적으로 함수에서 반환 값이 없을 때 사용</span></span><br><span class="line"><span class="keyword">let</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span></span>):<span class="title">void</span> </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> func2 = (x:<span class="built_in">number</span>):<span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// never</span></span><br><span class="line"><span class="comment">// - 결코 발생하지 않는 값, 어떤 값도 할당할 수 없음</span></span><br><span class="line"><span class="comment">// - 함수에 사용하는 어떤 값도 리턴되지 않는 것을 넘어 도달 불가능한 부분(에러 호출이나 무한루프)이 있어야 타입체크를 통과</span></span><br><span class="line"><span class="keyword">let</span> neverVar: never = <span class="literal">null</span>;<span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alwaysError</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line"> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();<span class="comment">// ok!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'inifinite'</span>);<span class="comment">// ok!</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한 <strong>TypeScript가 기본적으로 제공하는 타입은 모두 소문자로 대문자로 시작하는 타입의 표기는 타입의 래퍼객체 타입을 의미하므로 사용에 주의</strong> (EX&gt; string(타입), String(래퍼객체타입))</p><p><br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> primiteveStr: <span class="built_in">string</span>;</span><br><span class="line">primiteveStr = <span class="string">'hello'</span>;<span class="comment">// ok!</span></span><br><span class="line">primiteveStr = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello!'</span>);<span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objectStr: <span class="built_in">String</span>;</span><br><span class="line">objectStr = <span class="string">'hello'</span>;<span class="comment">// ok!</span></span><br><span class="line">objectStr = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'hello'</span>)<span class="comment">// ok!</span></span><br></pre></td></tr></table></figure><p>위의 예시의 데이터 객체 외에 다른 객체의 유형도 타입이 될 수 있다.</p><p><br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Date 타입</span></span><br><span class="line"><span class="keyword">const</span> today: Data = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTMLElement 타입</span></span><br><span class="line"><span class="keyword">const</span> elem: HTMLElement = <span class="built_in">document</span>.getElementById(<span class="string">'myId'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용자 정의 타입(class)</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-4-2-정적-타이핑-static-typing"><a href="#4-4-2-정적-타이핑-static-typing" class="headerlink" title="4.4.2 정적 타이핑(static typing)"></a>4.4.2 정적 타이핑(static typing)</h4><p>정적 타이핑은 변수를 선언할 때 변수에 할당할 값의 타입에 따라 사전에 타입을 명시적으로 선언해야하며 선언한 타입에 맞는 값을 할당해야 함.</p><p>자바스크립트는 동적 타입(dynamic type)언어 혹은 느슨한 타입(loosely typed)언어로 변수 타입 선언 없이 값이 할당되는 과정에서 동적으로 타입을 추론하며 변수의 타입이 결정된 후에도 같은 변수에 여러 타입의 값을 교차하여 할당할 수 있음 이러한 동적 타이핑은 사용하기 간편하지만 코드를 예측하기 힘들어 예상치 못한 오류를 만들 가능성이 높음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript(dynamic type)</span></span><br><span class="line"><span class="keyword">let</span> foo;<span class="comment">// undefined</span></span><br><span class="line">foo = <span class="literal">null</span>;<span class="comment">// null</span></span><br><span class="line">foo = &#123;&#125;;<span class="comment">// object</span></span><br><span class="line">foo = <span class="number">3</span>;<span class="comment">// number</span></span><br><span class="line">foo = <span class="number">3.14</span>;<span class="comment">// number</span></span><br><span class="line">foo = <span class="string">'hello'</span>;<span class="comment">// string</span></span><br><span class="line">foo = <span class="literal">true</span>;<span class="comment">// boolean</span></span><br></pre></td></tr></table></figure><p>정적 타이핑은 TypeScript의 가장 독특한 특징으로 타입을 명시적으로 선언하며 타입이 결정된 후에는 타입을 변경할 수 없다. 잘못된 타입의 값이 할당, 반환되면 컴파일러는 이를 감지하여 에러를 발생시킨다.</p><p><br></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript(static type)</span></span><br><span class="line"><span class="keyword">let</span> foo: <span class="built_in">string</span>,</span><br><span class="line"> bar: <span class="built_in">number</span>,</span><br><span class="line"> baz: <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line">foo = <span class="string">'hello'</span>;<span class="comment">// ok!</span></span><br><span class="line">bar = <span class="number">123</span>;<span class="comment">// ok!</span></span><br><span class="line">baz = <span class="string">'true'</span><span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수에서의 사용</span></span><br><span class="line"><span class="keyword">let</span> add = (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> x + y;</span><br><span class="line"></span><br><span class="line">add(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">// 30</span></span><br><span class="line">add(<span class="string">'10'</span>, <span class="number">20</span>)<span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p>정적, 동적 타이핑의 우위에 대한 것은 절대적으로 평가할 수 없지만 정적 타이핑의 장점인 코드 가독성, 예측성, 안정성은 대규모 프로젝트에 매우 적합하다.</p><p><br></p><h4 id="4-4-3-타입-추론-type-inference"><a href="#4-4-3-타입-추론-type-inference" class="headerlink" title="4.4.3 타입 추론(type inference)"></a>4.4.3 타입 추론(type inference)</h4><p>TypeScript에서도 타입 선언을 생략하면 값이 할당되는 과정에서 any로 설정되어 동적으로 타입이 결정된다. 하지만 이러한 방식은 TypeScript의 장점을 없애기 때문에 사용하지 않는 것을 권장<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo;</span><br><span class="line">foo = <span class="string">'hello'</span>;<span class="comment">// string</span></span><br><span class="line">foo = <span class="literal">true</span><span class="comment">// boolean</span></span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="4-5-클래스"><a href="#4-5-클래스" class="headerlink" title="4.5 클래스"></a>4.5 클래스</h3><p>ES6에서 도입된 클래스는 클래스 기반의 언어에 익숙한 개발자가 보다 빠르게 학습할 수 있는 단순명료한 새로운 문법을 제시하고 있다.<br>(클래스는 사실 새로운 모델을 제공하는 것은 아니고 클래스도 함수로 기존의 프로토타입 기반 패턴의 문법적 설탕이다)<br>TypeScript에서의 클래스는 ES6의 클래스와 상당히 유사하지만 몇 가지 고유한 확장기능을 가지고 있다.</p><p><br></p><h4 id="4-5-1-클래스-정의"><a href="#4-5-1-클래스-정의" class="headerlink" title="4.5.1 클래스 정의"></a>4.5.1 클래스 정의</h4><p>ES6의 클래스는 아래와 같이 클래스 몸체에 프로퍼티를 선언할 수 없고 반드시 생성자(constructor) 내부에서 클래스 프로퍼티를 선언하고 초기화 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javaScript</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> walk() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> is walking`</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 ES6에서는 문제없이 실행되지만 TypeScript에서는 컴파일에러가 발생한다.</p><p><br></p><p><strong>TypeScript에서는 클래스 몸체에 클래스 프로퍼티를 사전에 선언해야 한다.</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// typeScript</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line"> name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> walk() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span> is walking`</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'Kim'</span>);</span><br><span class="line">person.walk();<span class="comment">// 'Lee is walking'</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-5-2-접근제한자"><a href="#4-5-2-접근제한자" class="headerlink" title="4.5.2 접근제한자"></a>4.5.2 접근제한자</h4><p>es6의 class와 달리 클래스 기반의 다른 언어처럼 TypeScript의 class에서는 접근제한자를 지원한다.</p><blockquote><p><strong>TypeScript의 class에서 지원하는 접근제한자</strong></p><ul><li>public(접근제한자를 생략하면 public으로 선언)</li><li>protected</li><li>private</li></ul></blockquote><p><strong>접근제한자를 선언한 프로퍼티와 메서드의 접근 가능성</strong></p><table><thead><tr><th>접근 가능성</th><th>public</th><th>protected</th><th>private</th></tr></thead><tbody><tr><td>클래스 내부</td><td>O</td><td>O</td><td>O</td></tr><tr><td>자식 클래스 내부</td><td>O</td><td>O</td><td>X</td></tr><tr><td>클래스 인스턴스</td><td>O</td><td>X</td><td>X</td></tr></tbody></table><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Foo</span></span><br><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line"> <span class="keyword">public</span> x: <span class="built_in">string</span>;<span class="comment">// public은 생략해도 무방</span></span><br><span class="line"> <span class="keyword">protected</span> y: <span class="built_in">string</span>;</span><br><span class="line"> <span class="keyword">private</span> z: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span>, z: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">this</span>.x = x;</span><br><span class="line">  <span class="keyword">this</span>.y = y;</span><br><span class="line">  <span class="keyword">this</span>.z = z;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x);<span class="comment">// ok!</span></span><br><span class="line"><span class="built_in">console</span>.log(y);<span class="comment">// error!</span></span><br><span class="line"><span class="built_in">console</span>.log(z);<span class="comment">// error!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Bar</span></span><br><span class="line"><span class="keyword">class</span> Bar <span class="keyword">extends</span> Foo &#123;</span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">string</span>, y: <span class="built_in">string</span>, z: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">super</span>(x, y, z);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);<span class="comment">// ok!(public)</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.y);<span class="comment">// ok!(protected)</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.z);<span class="comment">// error!(private)</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-5-3-생성자-파라미터에-접근제한자-선언"><a href="#4-5-3-생성자-파라미터에-접근제한자-선언" class="headerlink" title="4.5.3 생성자 파라미터에 접근제한자 선언"></a>4.5.3 생성자 파라미터에 접근제한자 선언</h4><p>접근 제한자는 생성자 파라미터에도 선언할 수 있다. <strong>이때 접근 제한자가 사용된 생성자 파라미터는 암묵적으로 클래스 프로퍼티로 선언되고 생성자 내부에서 별도의 초기화가 없어도 암묵적으로 초기화가 수행된다.</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> x: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="string">'hello~!'</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(foo);</span><br><span class="line"><span class="built_in">console</span>.log(foo.x);<span class="comment">// ok!('hello')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Bar &#123;</span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> x: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> Bar(<span class="string">'hi~!'</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(bar);</span><br><span class="line"><span class="built_in">console</span>.log(bar.x);<span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p><strong>생성자 내부에 별도의 접근 제한자를 선언하지 않으면 생성자 파라미터는 생성자 내부에서만 유효한 지역변수가 되어 외부 참조가 불가능해진다.</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params">x: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="string">'hello~!'</span>);</span><br><span class="line"><span class="built_in">console</span>.dir(foo);<span class="comment">// x프로퍼티가 존재하지 않음</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-5-4-readonly-키워드"><a href="#4-5-4-readonly-키워드" class="headerlink" title="4.5.4 readonly 키워드"></a>4.5.4 readonly 키워드</h4><p>TypeScript는 readonly 키워드를 사용할 수 있는데 <strong>readonly가 선언된 클래스 프로퍼티는 선언 시 또는 생성자 내부에서만 값을 할당할 수 있게 된다.</strong><br>그 외에 경우에는 값을 할당할 수 없고 오직 읽기만 가능한 상태가 되며 이를 이용하여 상수의 선언에 사용한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line"> <span class="comment">// readonly로 클래스 프로퍼티 생성</span></span><br><span class="line"> <span class="keyword">private</span> readonly MSG: <span class="built_in">string</span> = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 생성자 내부에서는 readonly 프로퍼티도 할당가능</span></span><br><span class="line">  <span class="keyword">this</span>.MSG = <span class="string">'ho'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> log() &#123;</span><br><span class="line">  <span class="comment">// 생성자와 선언 시점이 아닌 곳에서 값을 할당하는 경우 컴파일 시점에서 에러</span></span><br><span class="line">  <span class="comment">//this.MSG = 'hi!';</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.MSG);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.log();</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-5-5-static-키워드"><a href="#4-5-5-static-키워드" class="headerlink" title="4.5.5 static 키워드"></a>4.5.5 static 키워드</h4><p>ES6에서의 static 키워드는 정적 메서드를 정의하는데 사용된다.<br>정적 메서드는 클래스의 인스턴스가 아닌 클래스 이름으로 호출하며 그렇기 때문에 인스턴스를 생성하지 않아도 호출할 수 있음</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"> <span class="keyword">constructor</span>(prop) &#123;</span><br><span class="line">  <span class="keyword">this</span>.prop = prop;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> staticMethod() &#123;</span><br><span class="line">  <span class="comment">// static 키워드로 정의한 정적 메서드에서는 this를 사용할 수 없음</span></span><br><span class="line">  <span class="comment">// 정적 메서드 내부에서의 this는 클래스의 인스턴스가 아닌 자신을 가리킴</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'static method'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> prototypeMethod() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Foo.staticMethod());<span class="comment">// 'static method'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="keyword">new</span> Foo(<span class="number">123</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo.staticMethod())<span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p><br></p><p><strong>TypeScript에서는 static 키워드를 클래스 프로퍼티에도 사용할 수 있다.</strong> 정적 클래스 프로퍼티는 정적 메서드와 마찬가지로 인스턴스가 아닌 클래스 이름으로 호출하며 클래스의 인스턴스를 생성하지 않아도 호출할 수 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript</span></span><br><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line"> <span class="comment">// 생성된 인스턴스의 개수</span></span><br><span class="line"> <span class="keyword">static</span> instanceCounter: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 인스턴스가 생성될 때마다 1씩 증가</span></span><br><span class="line">  <span class="keyword">this</span>.instanceCounter++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instanceCounter을 증가시키기 위해 인스턴스 생성</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">let</span> foo2 = <span class="keyword">new</span> Foo();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Foo.instanceCounter);<span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.instanceCounter);<span class="comment">// error!</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-5-6-추상-클래스-abstract"><a href="#4-5-6-추상-클래스-abstract" class="headerlink" title="4.5.6 추상 클래스(abstract)"></a>4.5.6 추상 클래스(abstract)</h4><p>추상 클래스(abstract class)는 abstract 키워드를 사용하며 선언하며 하나 이상의 추상 메서드를 포함한다. 직접 인스턴스를 생성할 수 없고 상속만을 위해 사용된다.<br>추상 클래스를 상속한 클래스는 추상 클래스의 추상 메서드를 반드시 구현해야한다.<br>4.5.7의 인터페이스(interface)는 추상 클래스와 유사하지만 모든 메서드가 추상 메서드라는 차이가 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 추상 클래스</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal &#123;</span><br><span class="line"> <span class="comment">// 추상 메서드</span></span><br><span class="line"> <span class="comment">// 메서드는 프로퍼티와 달리 ()를 표기</span></span><br><span class="line"> <span class="keyword">abstract</span> makeSound(): <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"> move(): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'roaming the earth'</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line"> <span class="comment">// Animal을 상속 받았으므로 추상 메서드인 makeSound는 반드시 구현해야 함</span></span><br><span class="line"> makeSound() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'bowwow~'</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const animal = new Animal();// error!(추상 클래스는 인스턴스를 직접 생성할 수 없음)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myDog = <span class="keyword">new</span> Dog();</span><br><span class="line">myDog.makeSound();<span class="comment">// 'bowwow~'</span></span><br><span class="line">myDog.move();<span class="comment">// 'roaming the earth'</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="4-6-인터페이스-interface"><a href="#4-6-인터페이스-interface" class="headerlink" title="4.6 인터페이스(interface)"></a>4.6 인터페이스(interface)</h3><p>인터페이스는 <strong>일반적으로 타입 체크를 위해 사용되며 변수, 함수, 클래스에 사용</strong>할 수 있다.<br>인터페이스는 여러 가지 자료형을 갖는 프로퍼티로 이루어진 새로운 자료형을 정의하는 것과 유사한데 인터페이스에 선언된 프로퍼티 또는 메소드의 구현을 강제하여 일관성을 유지할 수 있도록 하는 것<br>인터페이스는 프로퍼티와 메서드를 가질 수 있다는 점에서 클래스와 유사하나 직접 인스턴스를 생성할 수 없고 모든 메서드가 추상 메서드이다.(가상 클래스는 일반 메서드도 생성할 수 있음) 그리고 추상 메서드와 달리 abstract 키워드를 사용하지 않는다.</p><p><br></p><h4 id="4-6-1-변수와-인터페이스"><a href="#4-6-1-변수와-인터페이스" class="headerlink" title="4.6.1 변수와 인터페이스"></a>4.6.1 변수와 인터페이스</h4><p>인터페이스는 변수의 타입으로 사용할 수 있는데 이때 인터페이스를 타입으로 선언한 변수는 해당 인터페이스를 준수해야 한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line"> id: <span class="built_in">number</span>;</span><br><span class="line"> content: <span class="built_in">string</span>,</span><br><span class="line"> completed: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 todo의 type을 interface인 Todo로 설정</span></span><br><span class="line"><span class="keyword">let</span> todo:Todo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수의 값은 설정한 인터페이스를 준수해야함</span></span><br><span class="line">todo = &#123;</span><br><span class="line"> id: <span class="number">1</span>,</span><br><span class="line"> content: <span class="string">'typeScript'</span>,</span><br><span class="line"> completed: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>인터페이스를 사용하여 함수 파라미터의 타입도 선언할 수 있는 데 당연히도 해당 함수는 함수 파라미터의 타입으로 지정한 인터페이스를 준수하는 인수를 전달해야 한다.<br>함수의 객체를 전달할 때 복잡한 매개변수 체크가 필요 없어서 유용하다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Todo &#123;</span><br><span class="line"> id: <span class="built_in">number</span>;</span><br><span class="line"> comtent: <span class="built_in">string</span>;</span><br><span class="line"> completed: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> todos: Todo[] = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 addTodo의 파라미터 type을 Todo로 설정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addTodo</span>(<span class="params">todo: Todo</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// ...은 rest parameter</span></span><br><span class="line"> todos = [...todos, todo];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newTodo: Todo = &#123;</span><br><span class="line"> id: <span class="number">1</span>,</span><br><span class="line"> content: <span class="string">'typeScript'</span>,</span><br><span class="line"> completed: <span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addTodo(newTodo);</span><br><span class="line"><span class="built_in">console</span>.log(todos);<span class="comment">// &#123; id: 1, content: 'typeScript', completed: false &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>참고 - <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions/rest_parameters" target="_blank" rel="noopener">MDN - rest parameter</a></p></blockquote><p><br></p><h4 id="4-6-2-함수와-인터페이스"><a href="#4-6-2-함수와-인터페이스" class="headerlink" title="4.6.2 함수와 인터페이스"></a>4.6.2 함수와 인터페이스</h4><p>인터페이스는 함수의 타입으로도 사용할 수 있다. 이때 함수의 인터페이스에는 타입이 선언된 파라미터와 리턴 타입을 정의한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인터페이스 SquareFunc은 함수의 타입</span></span><br><span class="line"><span class="keyword">interface</span> SquareFunc &#123;</span><br><span class="line"> <span class="comment">// 파라미터 및 반환값의 type정의</span></span><br><span class="line"> (num: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> squereFunc: SquereFunc = <span class="function"><span class="keyword">function</span>(<span class="params">num: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(squereFunc(<span class="number">10</span>));<span class="comment">// 100</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-6-3-클래스와-인터페이스"><a href="#4-6-3-클래스와-인터페이스" class="headerlink" title="4.6.3 클래스와 인터페이스"></a>4.6.3 클래스와 인터페이스</h4><p><strong>클래스 선언문의 implements뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다.</strong> 이는 인터페이스를 구현하는 클래스의 일관성을 유지할 수 있다는 장점을 갖는다.<br>(인터페이스는 프로퍼티와 메소드를 가질 수 있다는 점에서 클래스와 유사하나 직접 인터페이스를 생성할 수는 없다.)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인터페이스 ITodo 정의</span></span><br><span class="line"><span class="keyword">interface</span> ITodo &#123;</span><br><span class="line"> id: <span class="built_in">number</span>;</span><br><span class="line"> content: <span class="built_in">string</span>;</span><br><span class="line"> completed: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Todo <span class="keyword">implements</span> ITodo &#123;</span><br><span class="line"> <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params"><span class="keyword">public</span> content: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params"><span class="keyword">public</span> completed: <span class="built_in">boolean</span></span></span><br><span class="line"><span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> todo = <span class="keyword">new</span> Todo(<span class="number">1</span>, <span class="string">'typeScript'</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(todo); <span class="comment">// &#123; id: 1, content: 'typeScript', completed: false &#125;</span></span><br></pre></td></tr></table></figure><p>인터페이스는 프로퍼티 뿐만 아니라 메소드도 포함할 수 있다.<br>(단 모든 메소드는 추상메소드이어야 하며 프로퍼티와 마찬가지로 인터페이스에서 정의한 추상 메소드는 반드시 구현하여야 한다.)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line"> name: <span class="built_in">string</span>;</span><br><span class="line"> sayHello(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">implements</span> Iperson &#123;</span><br><span class="line"> <span class="keyword">constructor</span> (<span class="params"></span></span><br><span class="line"><span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"> sayHello() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Hi~ <span class="subst">$&#123;this.name&#125;</span>`</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person: IPerson</span>) </span>&#123;</span><br><span class="line"> person.sayHello();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">'kim'</span>);</span><br><span class="line"></span><br><span class="line">greeter(me);<span class="comment">// 'Hi~ kim'</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-6-4-덕-타이핑-duck-typing"><a href="#4-6-4-덕-타이핑-duck-typing" class="headerlink" title="4.6.4 덕 타이핑(duck typing)"></a>4.6.4 덕 타이핑(duck typing)</h4><p>주의해야 할 것은 인터페이스를 구현하였다는 것만이 타입 체크를 통과하는 유일한 방법은 아니다. 타입 체크에서 중요한 것은 값을 실제로 가지고 있다는 것이다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 인터페이스 IDuck을 정의</span></span><br><span class="line"><span class="keyword">interface</span> IDuck &#123;</span><br><span class="line"> quack():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 클래스 MallardDuck은 인터페이스 IDuck을 구현</span></span><br><span class="line"><span class="keyword">class</span> MallardDuck <span class="keyword">implements</span> IDuck &#123;</span><br><span class="line"> quack() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Quack!'</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 클래스 RedheadDuck은 인터페이스 IDuck을 구현하지는 않았지만 인터페이스 IDuck과 동일한 구조를 가짐</span></span><br><span class="line"><span class="keyword">class</span> RedheadDuck &#123;</span><br><span class="line"> quack() &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Q~uack!'</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 함수 makeNoise는 매개변수로 duck(IDuck의 인터페이스를 구현한)을 전달받음</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeNoise</span>(<span class="params">duck: IDuck</span>) </span>&#123;</span><br><span class="line"> duck.quack();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">makeNoise(<span class="keyword">new</span> MallardDuck());<span class="comment">// 'Quack!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. IDuck 인터페이스를 구현하지 않는 매개변수를 사용해도 이상없이 동작</span></span><br><span class="line">makeNoise(<span class="keyword">new</span> RedheadDuck());<span class="comment">// 'Q~uack!'</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>인터페이스 IDuck은 quack 메서드를 정의</li><li>함수 makeNoise는 매개변수로 duck(IDuck의 인터페이스를 구현한)을 전달받음</li><li>클래스 MallardDuck은 인터페이스 IDuck을 구현</li><li>클래스 RedheadDuck은 인터페이스 IDuck을 구현하지는 않았지만 인터페이스 IDuck과 동일한 구조를 가짐</li><li>IDuck 인터페이스를 구현하지 않는 매개변수를 사용해도 이상없이 동작</li></ol></blockquote><p><strong><strong>TypeScript는 해당 인터페이스에서 정의한 프로퍼티나 메서드를 가지고 있다면 그 인터페이스를 구현한 것으로 인정한다.</strong></strong><br>이 것을 덕 타이핑(duck typing) 또는 구조적 타이핑이라고 한다. 인터페이스를 변수에 사용할 경우에도 덕 타이핑은 적용된다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line"> name:<span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params">person: IPerson</span>) </span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`hello~ <span class="subst">$&#123;person.name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인터페이스 IPerson을 구현하지 않았음</span></span><br><span class="line"><span class="keyword">const</span> me = &#123;</span><br><span class="line"> name: <span class="string">'Lee'</span>,</span><br><span class="line"> age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sayHello(me); <span class="comment">// 'hello~ Lee'</span></span><br></pre></td></tr></table></figure><p><strong>인터페이스는 개발 단계에서 도움을 주기 위해 제공되는 기능으로 자바스크립트의 표준이 아니다.</strong> 위 예제의 TypeScript 파일을 자바스크립트 파일로 트랜스파일링하면 아래와 같이 인터페이스가 삭제된다.</p><p><br></p><h4 id="4-6-5-선택적-프로퍼티-optional-property"><a href="#4-6-5-선택적-프로퍼티-optional-property" class="headerlink" title="4.6.5 선택적 프로퍼티(optional property)"></a>4.6.5 선택적 프로퍼티(optional property)</h4><p>인터페이스 프로퍼티는 반드시 구현되어야 한다. 하지만 인터페이스의 프로퍼티가 선택적으로 필요한 경우가 있을 수 있는데 이때 선택적 프로퍼티로 선언할 수 있다.<br>선택적 프로퍼티는 프로퍼티명 뒤에 ‘?’를 붙여 사용하며 생략하여도 에러가 발생하지 않는다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인터페이스 UserInfo의 age, address 프로퍼티는 생략 가능하다.</span></span><br><span class="line"><span class="keyword">interface</span> UserInfo &#123;</span><br><span class="line"> userName: <span class="built_in">string</span>;</span><br><span class="line"> passWord: <span class="built_in">string</span>;</span><br><span class="line"> age?: <span class="built_in">number</span>;</span><br><span class="line"> address?: <span class="built_in">string</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userInfo: UserInfo = &#123;</span><br><span class="line"> userName: <span class="string">'aaa@asd.com'</span>,</span><br><span class="line"> password: <span class="string">'q1w2e3'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(userInfo);</span><br></pre></td></tr></table></figure><p><br></p><h4 id="4-6-7-제네릭"><a href="#4-6-7-제네릭" class="headerlink" title="4.6.7 제네릭"></a>4.6.7 제네릭</h4><p>정적 타입 언어는 함수 또는 클래스를 정의하는 시점에 매개변수나 반환 값의 타입을 선언하여야 한다. 하지만 함수 또는 클래스를 정의하는 시점에 매개변수, 반환 값의 타입을 지정하기 어려운 경우가 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line"> <span class="keyword">protected</span> data = [];</span><br><span class="line"></span><br><span class="line"> push(item) &#123;</span><br><span class="line">  <span class="keyword">this</span>.data.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> pop() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">0</span>);</span><br><span class="line">queue.push(<span class="string">'1'</span>);<span class="comment">// 의도하지 않은 실수(data에 들어가는 모든 값은 숫자일 것으로 예상)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// error! (toFixed는 Number의 메서드이므로)</span></span><br></pre></td></tr></table></figure><p>위 예제는 FIFO(First In First Out)구조로 데이터를 저장하는 큐를 표현한 것으로 data 프로퍼티에 타입 선언을 생략하여 any[] 타입으로 설정되었으며 any[] 타입은 어떤 타입의 요소도 가질 수 있다는 것을 의미한다.<br>즉 저장하는 값은 어떤 타입의 값이던 포함할 수 있게되므로 숫자만 들어올 것이라는 기대를 충족하지 못하게 된다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue &#123;</span><br><span class="line"> <span class="keyword">protected</span> data = [];</span><br><span class="line"></span><br><span class="line"> push(item) &#123;</span><br><span class="line">  <span class="keyword">this</span>.data.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> pop() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> NumberQueue <span class="keyword">extends</span> Queue &#123;</span><br><span class="line"> push(item: <span class="built_in">number</span>) &#123;</span><br><span class="line">  <span class="keyword">super</span>.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> pop() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.pop();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> NumberQueue();</span><br><span class="line"></span><br><span class="line">queue.push(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// queue.push('1');// 컴파일 과정에서 에러 발생</span></span><br><span class="line">queue.push(+<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>이러한 문제를 해결하기 위해 Queue를 상속 받는 number타입 전용의 클래스를 정의하였다. 하지만 다양한 타입을 지원해야 한다면 타입 별로 클래스를 상속 받아 추가해야하므로 이 또한 좋은 방법은 아니다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Queue&lt;T&gt; &#123;</span><br><span class="line"> <span class="keyword">protected</span> data: <span class="built_in">Array</span>&lt;T&gt; = [];</span><br><span class="line"></span><br><span class="line"> push(item: T) &#123;</span><br><span class="line">  <span class="keyword">this</span>.data.push(item);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> pop() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data.shift();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 숫자 전용 Queue</span></span><br><span class="line"><span class="keyword">const</span> numberQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"></span><br><span class="line">numberQueue.push(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// queue.push('1');// 컴파일 과정에서 에러 발생</span></span><br><span class="line">queue.push(+<span class="string">'1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 문자열 전용 Queue</span></span><br><span class="line"><span class="keyword">const</span> stringQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">stringQueue.push(<span class="string">'hello'</span>);</span><br><span class="line">stringQueue.push(<span class="string">'world'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.pop().toFixed())<span class="comment">// 'world'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 커스텀 객체 전용 Queue</span></span><br><span class="line"><span class="keyword">const</span> myQueue = <span class="keyword">new</span> Queue&lt;&#123;</span><br><span class="line"> name: <span class="built_in">string</span>,</span><br><span class="line"> age: <span class="built_in">number</span></span><br><span class="line">&#125;&gt;;</span><br><span class="line"></span><br><span class="line">myQueue.push(&#123;</span><br><span class="line"> name: <span class="string">'Lee'</span>,</span><br><span class="line"> age: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line">myQueue.push(&#123;</span><br><span class="line"> name: <span class="string">'kim'</span>,</span><br><span class="line"> age: <span class="number">40</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myQueue.pop());<span class="comment">// &#123;name: 'Lee', age: 20&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(myQueue.pop());<span class="comment">// &#123;name: 'kim', age: 40&#125;</span></span><br></pre></td></tr></table></figure><p><strong>제네릭은 선언 시점이 아닌 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다.</strong> 한번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.<br><strong>T</strong>는 제네릭을 선언할 때 관용적으로 사용되는 식별자로 ‘타입 파라미터(type parameter)라 한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params">items: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> item.reverse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arg = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 인수에 따라 타입 매개변수가 결정</span></span><br><span class="line"><span class="keyword">const</span> reserved = reverse(arg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reversed);<span class="comment">// [5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure><p>위와 같이 함수에서도 제네릭을 사용할 수 있는 데 reverse 함수는 인수의 타입에 의해 매개변수가 결정된다.<br>예를 들어 위와 같이 number타입의 요소를 갖는 배열을 전달받으면 타입 매개변수가 number가 된다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>&lt;<span class="title">T</span>&gt;(<span class="params">items: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> item.reverse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arg = [</span><br><span class="line"> &#123;name: <span class="string">'Lee'</span>&#125;,</span><br><span class="line"> &#123;name: <span class="string">'kim'</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> revesed = reverse(arg);</span><br><span class="line"><span class="built_in">console</span>.log(reversed);<span class="comment">// [ &#123;name: 'kim'&#125;, &#123;name: 'Lee'&#125; ]</span></span><br></pre></td></tr></table></figure><p>위와 같이 name의 타입이 string을 갖는 요소의 배열을 전달 받으면 타입 매개변수는 <strong>{ name: string }</strong> 이 된다.</p><blockquote><p>참고</p><ul><li><a href="https://jaeyeophan.github.io/2017/12/30/TS-5-Generics-in-TypeScript/" target="_blank" rel="noopener">Generics in TypeScript</a></li><li><a href="https://zetawiki.com/wiki/%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80_%EC%9D%B8%EC%88%98%EC%9D%98_%EC%B0%A8%EC%9D%B4" target="_blank" rel="noopener">인수와 매개변수</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular-essentials&quot;&gt;&lt;a href=&quot;#Angular-essentials&quot; class=&quot;headerlink&quot; title=&quot;Angular essentials&quot;&gt;&lt;/a&gt;Angular essentials&lt;/h1&gt;&lt;p&gt;(&lt;a hr
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="angular" scheme="http://windfanta.github.io/blog/categories/study/angular/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 2 CH9 애니메이션 효과 다루기</title>
    <link href="http://windfanta.github.io/blog/2018/04/03/study-jquery-12/"/>
    <id>http://windfanta.github.io/blog/2018/04/03/study-jquery-12/</id>
    <published>2018-04-03T01:41:16.000Z</published>
    <updated>2018-07-30T01:01:30.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-2"><a href="#자바스크립트-jQuery-완전정복-스터디-2" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 2 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 2 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650875" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650875</a>)</p><p><br></p><h1 id="CH9-애니메이션-효과-다루기"><a href="#CH9-애니메이션-효과-다루기" class="headerlink" title="CH9 애니메이션 효과 다루기"></a>CH9 애니메이션 효과 다루기</h1><hr><p><br></p><h2 id="lesson-01-jQuery-애니메이션-효과-종류"><a href="#lesson-01-jQuery-애니메이션-효과-종류" class="headerlink" title="lesson 01 - jQuery 애니메이션 효과 종류"></a>lesson 01 - jQuery 애니메이션 효과 종류</h2><hr><h3 id="02-jQuery-애니메이션-효과-종류"><a href="#02-jQuery-애니메이션-효과-종류" class="headerlink" title="02_jQuery 애니메이션 효과 종류"></a>02_jQuery 애니메이션 효과 종류</h3><h4 id="1-기본효과"><a href="#1-기본효과" class="headerlink" title="1_기본효과"></a>1_기본효과</h4><p>jQuery는 일반적으로 가장 많이 사용하는 등장 효과(show, hide)와 페이드 효과(부드럽게 사라지고 나타나는 fadeIn, fadeOut)그리고 슬라이드 효과(slideIn, slideOut)를 기본으로 제공합니다.</p><p><br></p><h4 id="2-사용자-정의-효과"><a href="#2-사용자-정의-효과" class="headerlink" title="2_사용자 정의 효과"></a>2_사용자 정의 효과</h4><p>jQuery는 기본 효과뿐 아니라 자신이 원하는 다양한 효과를 만들 수 있는 <strong>animate()</strong> 라는 메서드를 제공합니다.<br>기본 효과 역시 animate() 메서드를 이용해 만들어져 있습니다.</p><p><br></p><h2 id="lesson-02-기본-애니메이션-효과-다루기"><a href="#lesson-02-기본-애니메이션-효과-다루기" class="headerlink" title="lesson 02 - 기본 애니메이션 효과 다루기"></a>lesson 02 - 기본 애니메이션 효과 다루기</h2><hr><p><br></p><h3 id="02-핵심-내용"><a href="#02-핵심-내용" class="headerlink" title="02_핵심 내용"></a>02_핵심 내용</h3><h4 id="1-나타나고-사라지는-효과"><a href="#1-나타나고-사라지는-효과" class="headerlink" title="1. 나타나고 사라지는 효과"></a>1. 나타나고 사라지는 효과</h4><blockquote><p>show()<br><a href="http://api.jquery.com/show/" target="_blank" rel="noopener">http://api.jquery.com/show/</a></p></blockquote><blockquote><p>hide()<br><a href="http://api.jquery.com/hide/" target="_blank" rel="noopener">http://api.jquery.com/hide/</a></p></blockquote><p>매개변수</p><table><thead><tr><th>이름</th><th>설명</th></tr></thead><tbody><tr><td>duration</td><td>효과가 지속될 시간 값으로 단위는 밀리초(1/1000초)이며 기본 값은 400ms 입니다. 값은 문자열(‘slow’, ‘normal’, ‘fast’)도 사용할 수 있습니다.</td></tr><tr><td>easing</td><td>사용할 easing 함수 이름</td></tr><tr><td>complete</td><td>효과(애니메이션)가 완료됐을 때 호출할 콜백 함수</td></tr><tr><td>options</td><td>위에 나열된 매개변수들을 하나의 객체로 묶어 간결하게 전달할 수 있습니다.</td></tr></tbody></table><p><strong> show, hide 메서드의 사용 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/v7pr978z/5/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> show, hide 메서드의 사용2 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/r35mmdbo/3/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h4 id="2-이징-함수-소개와-활용법"><a href="#2-이징-함수-소개와-활용법" class="headerlink" title="2. 이징 함수 소개와 활용법"></a>2. 이징 함수 소개와 활용법</h4><p>책 참고(P433 ~)</p><blockquote><p>jQuery Easing Plugin<br><a href="http://gsgd.co.uk/sandbox/jquery/easing/" target="_blank" rel="noopener">http://gsgd.co.uk/sandbox/jquery/easing/</a></p></blockquote><p><br></p><h4 id="3-페이드-fade-인-아웃-효과"><a href="#3-페이드-fade-인-아웃-효과" class="headerlink" title="3. 페이드(fade) 인/아웃 효과"></a>3. 페이드(fade) 인/아웃 효과</h4><p><strong> fadeIn, fadeOut 메서드의 사용 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/h1c8ye53/3/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h4 id="4-슬라이드-slide-업-다운-효과"><a href="#4-슬라이드-slide-업-다운-효과" class="headerlink" title="4. 슬라이드(slide) 업/다운 효과"></a>4. 슬라이드(slide) 업/다운 효과</h4><p><strong> slideUp, slideDown 메서드의 사용 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/Lyst4b62/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h4 id="5-options-활용하기"><a href="#5-options-활용하기" class="headerlink" title="5. options 활용하기"></a>5. options 활용하기</h4><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>duration</td><td>애니메이션의 시간을 지정(형태:Number, String / 초기값:400)</td></tr><tr><td>easing</td><td>사용할 이징 함수의 이름을 지정(형태:String / 초기값: swing</td></tr><tr><td>step</td><td>애니메이션의 프레임이 진행될 때 호출되는 함수, 현재 애니메이션 프레임에 적용된 스타일 속성 값을 알아낼 때 주로 사용(형태:function(Number now, Tween tween)</td></tr><tr><td>complete</td><td>효과(애니메이션)가 완료됐을 때 호출할 콜백 함수(형태: function)</td></tr><tr><td>start</td><td>효과(애니메이션)가 시작될 때 호출할 콜백 함수(형태: function)</td></tr><tr><td>progress</td><td>step과 동일하게 애니메이션의 프레임이 진행될 때 호출되는 함수로 jQuery 1.8에서 추가되었으며 애니메이션의 진행률 및 남은 시간을 알 수 있음)(형태: function)</td></tr><tr><td>done</td><td>효과(애니메이션)가 완료 후 호출할 콜백 함수, complete와 동일하며 jQuery 1.8에서 추가(형태: function(Promise animation, Boolean jumpToend)</td></tr></tbody></table><p><strong> options toggle메서드 사용1(start, complete) </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/v98oy58u/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> options toggle메서드 사용2(step) </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/sebrrotb/8/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> options toggle메서드 사용3(progress, done) </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/2guq5fy2/11/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson-03-사용자-정의-애니메이션-효과"><a href="#lesson-03-사용자-정의-애니메이션-효과" class="headerlink" title="lesson 03 - 사용자 정의 애니메이션 효과"></a>lesson 03 - 사용자 정의 애니메이션 효과</h2><hr><p>jQuery에서는 사용자 정의 효과를 만들 수 있도록 animate()라는 메서드를 제공합니다.<br>앞에서 보았던 기본효과(show(), hide()등등) 메서드 내부는 animate() 메서드로 구현되어 있습니다.</p><p>매개변수</p><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>properties</td><td>애니메이션을 적용할 CSS 스타일 프로퍼티와 값이 담길 객체(Object)</td></tr><tr><td>duration</td><td>애니메이션 효과가 지속될 시간 값(1/1000, ‘slow’, ‘normal’, ‘fast’)</td></tr><tr><td>easg</td><td>사용할 이징 함수의 이름(String)</td></tr><tr><td>complete</td><td>효과(애니메이션)가 완료됐을 때 호출할 콜백 함수(형태: function)</td></tr><tr><td>options</td><td>위의 매개변수들을 하나의 객체로 묶어 간결하게 전달할 수 있으며 기본적인 매개변수 외에 다양한 값을 설정할 수 있습니다.</td></tr></tbody></table><blockquote><p>jQuery animate()<br><a href="http://api.jquery.com/animate/" target="_blank" rel="noopener">http://api.jquery.com/animate/</a></p></blockquote><p><strong> animate() 메서드의 사용1 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/v56pjfo2/6/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> animate() 메서드의 사용2 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/kL0syzsz/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> animate() 메서드의 사용3 </strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/f3g2g671/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>jQuery stop()<br><a href="http://findfun.tistory.com/365" target="_blank" rel="noopener">http://findfun.tistory.com/365</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-2&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-2&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 2 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>HTML, CSS 요약(사내공유용)</title>
    <link href="http://windfanta.github.io/blog/2018/03/30/study-css/"/>
    <id>http://windfanta.github.io/blog/2018/03/30/study-css/</id>
    <published>2018-03-30T07:21:49.000Z</published>
    <updated>2018-07-30T01:01:30.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML-CSS"><a href="#HTML-CSS" class="headerlink" title="HTML, CSS"></a>HTML, CSS</h1><p><br></p><h2 id="CSS-BOX-MODEL"><a href="#CSS-BOX-MODEL" class="headerlink" title="CSS BOX-MODEL"></a><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model" target="_blank" rel="noopener">CSS BOX-MODEL</a></h2><hr><p><strong>HTML문서에서 각 엘리먼트(요소)는 사각형 박스로 나타냅니다.</strong></p><p>CSS에서 이 사각형 박스는 각각 표준 박스 모델을 사용하여 기술 됩니다. 각 박스는 4가지의 경계가 있습니다.</p><ul><li>margin 경계</li><li>border 경계</li><li>padding 경계</li><li>content 경계</li></ul><p><img src="https://mdn.mozillademos.org/files/8685/boxmodel-(3" alt="CSS 박스모델"></p><p><br></p><p><strong>마진 상쇄(margin-collapsing)</strong></p><p>CSS에서 margin 값이 겹치는 요소가 존재하는 경우 top, bottom에 한해 겹치는 영역의 높은 값 1가지만 적용되는 현상</p><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/zq5mwxyp/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><blockquote><p>참고 - [CSS] 마진 상쇄 현상(margin collapsing)의 이해와 해결<br><a href="http://blog.danggun.net/4276" target="_blank" rel="noopener">http://blog.danggun.net/4276</a></p></blockquote><p><br><br><br></p><h2 id="CSS-레이아웃"><a href="#CSS-레이아웃" class="headerlink" title="CSS 레이아웃"></a>CSS 레이아웃</h2><hr><p>CSS 레이아웃을 배웁시다<br>(<a href="http://ko.learnlayout.com/no-layout.html" target="_blank" rel="noopener">http://ko.learnlayout.com/no-layout.html</a>)</p><p>flex의 예<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/69ak4953/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>참고1&gt; CSS Flex 속성<br><a href="http://webdir.tistory.com/349" target="_blank" rel="noopener">http://webdir.tistory.com/349</a></p></blockquote><blockquote><p>참고2&gt; Flexbox 이해: 당신이 알아야 할 모든 것<br><a href="https://www.vobour.com/1-flexbox-%EC%9D%B4%ED%95%B4-%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-%EB%AA%A8%EB%93%A0-%EA%B2%83-understa" target="_blank" rel="noopener">https://www.vobour.com/1-flexbox-%EC%9D%B4%ED%95%B4-%EB%8B%B9%EC%8B%A0%EC%9D%B4-%EC%95%8C%EC%95%84%EC%95%BC-%ED%95%A0-%EB%AA%A8%EB%93%A0-%EA%B2%83-understa</a></p></blockquote><p><br></p><h2 id="CSS-선택자"><a href="#CSS-선택자" class="headerlink" title="CSS 선택자"></a>CSS 선택자</h2><hr><p>CSS3 Selector - Styling 대상을 특정하는 셀렉터<br>(<a href="http://poiemaweb.com/css3-selector" target="_blank" rel="noopener">http://poiemaweb.com/css3-selector</a>)</p><p><br></p><h2 id="CSS-3-개요"><a href="#CSS-3-개요" class="headerlink" title="CSS 3 개요"></a>CSS 3 개요</h2><hr><p>CSS의 뒤에 붙는 숫자는 CSS Level뒤에 붙는 숫자를 줄여서 표현한 것으로 CSS Level2는 2011년 6월에 권장 단계에 이르게 됨(이때까지 9년이 걸림)<br>CSS3(level 3)는 CSS 2.1을 상속하는 것을 목표로 하며 다중열(multi-columns), 유동적인 상자(flexible box), 격자 배치(grid layouts) 뿐만 아니라 둥그런 모서리(rounded corners), 그림자( shadows) , 부드러운 색의 변이(gradients) , 변이(transitions), 움직임(animations) 등도 지원합니다.</p><p><br></p><h3 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h3><p>(<a href="http://poiemaweb.com/css3-inheritance-cascading" target="_blank" rel="noopener">http://poiemaweb.com/css3-inheritance-cascading</a>)</p><p><br></p><h3 id="단위"><a href="#단위" class="headerlink" title="단위"></a>단위</h3><p>(<a href="http://poiemaweb.com/css3-units" target="_blank" rel="noopener">http://poiemaweb.com/css3-units</a>)</p><blockquote><p>당신은 모를 수도 있는 CSS의 7가지 단위<br><a href="https://webdesign.tutsplus.com/ko/articles/7-css-units-you-might-not-know-about--cms-22573" target="_blank" rel="noopener">https://webdesign.tutsplus.com/ko/articles/7-css-units-you-might-not-know-about--cms-22573</a></p></blockquote><p><br></p><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>(<a href="http://poiemaweb.com/css3-transition" target="_blank" rel="noopener">http://poiemaweb.com/css3-transition</a>)</p><blockquote><p>같이 볼만한 글<br><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions</a></p></blockquote><p><br></p><h3 id="Gradient"><a href="#Gradient" class="headerlink" title="Gradient"></a>Gradient</h3><p>(<a href="http://poiemaweb.com/css3-gradient" target="_blank" rel="noopener">http://poiemaweb.com/css3-gradient</a>)</p><p><br></p><h3 id="css3-animation"><a href="#css3-animation" class="headerlink" title="css3-animation"></a>css3-animation</h3><p>(<a href="http://poiemaweb.com/css3-animation" target="_blank" rel="noopener">http://poiemaweb.com/css3-animation</a>)</p><blockquote><p>같이 볼만한 글<br><a href="http://www.beautifulcss.com/archives/272" target="_blank" rel="noopener">http://www.beautifulcss.com/archives/272</a></p></blockquote><p><br></p><h3 id="CSS-애니메이션-성능-개선-방법"><a href="#CSS-애니메이션-성능-개선-방법" class="headerlink" title="CSS 애니메이션 성능 개선 방법"></a>CSS 애니메이션 성능 개선 방법</h3><p>(<a href="http://wit.nts-corp.com/2017/06/05/4571" target="_blank" rel="noopener">http://wit.nts-corp.com/2017/06/05/4571</a>)</p><p><br></p><blockquote><p>참고 - MDN CSS Reference(브라우저 호환성 확인)<br><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Reference#%EC%84%A0%ED%83%9D%EC%9E%90" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Reference#%EC%84%A0%ED%83%9D%EC%9E%90</a></p></blockquote><p><br><br><br></p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><hr><blockquote><p><strong>HTML5 설명(<a href="https://namu.wiki/w/HTML5" target="_blank" rel="noopener">https://namu.wiki/w/HTML5</a>)</strong><br>HTML5라고 불리우는 개념은 단순히 웹 문서를 작성할 때 사용되는 <strong>마크업 랭귀지(HTML)의 문법적(syntactic) 버전 뿐만 아니라 새로운 DOM API 스펙을 포함하는 것</strong><br>문법면에서는 이전에 비해 상당히 간결하고 명확해 졌다. XHTML에 있던 XML 문법도 모두 제거되어 HTML 4.01의 방식으로 돌아갔다.<br>또한 이전에는 JavaScript를 사용해서 엄청나게 긴 코드를 써서 간접적으로 구현해야 했던 기능들이 정식 엘리먼트(video, audio등)로 편입됨으로서 간단하게 구현해낼 수 있게 되었으며 불필요하게 길게 적어야했던 이전 버전에서 꼭 필요한 부분만 남기도록 바뀌는 등 여러가지 개선점이 생겼다.<br>API면에서, HTML5에서는 비디오 및 오디오와 같은 미디어 엘리먼트에 대한 API뿐를 포함해 오프라인 웹 앱 구현, 문서 편집 등과 같은 다양한 기능에 대한 API가 추가되었으며, WHATWG에 의해 Geolocation, Web SQL, File API, Audio API등이 “Living standard”로 권고되고 있다.  HTML5에서의 변화 (W3C)  WHATWG 스펙 이를 통해 이전에는 플래시, 실버라이트 등의 외부 플러그인을 통해서만 지원할 수 있던 클라이언트 사이드에서의 사용자 인터페이스를 위한 기능들의 상당수를 브라우저 자체의 기능을 이용해 구현할 수 있게 되었다.<br>이런 API들은 사실상의 브라우저 표준 스크립트 언어인 JavaScript(이론적으로는 다른 스크립트 언어라도 관계없다. 브라우저가 지원한다면 말이지만…)를 통해 이용할 수 있다. 이 때문에 HTML5는 마크업 언어라고만 보기는 더 이상 힘들어졌다. 단, HTML5 그 자체만으로 모든 것이 된다는 오해는 삼가자. HTML5 그 자체가 제공하는 것은 문서 구조와 API이고, 이걸 API와 연결시켜 실제 동작을 구현하는 것은 JavaScript라는 언어로, 이 둘은 엄연히 별개의 것이다. HTML5와 JavaScript가 서로 연결되어 돌아가는 개념이지, HTML5 안에 JavaScript가 포함되는 것이 절대로 아니다. 단적으로, JavaScript는 ECMAScript라는 표준안이 따로 나오는 별도의 프로그래밍 언어이다.<br>인터넷 익스플로러는 9부터 일부 태그를 지원하기 시작했고, 10에서 거의 대부분 지원한다. 8 이하를 지원하려면 html5shiv.js[1]라는 JavaScript를 이용하면 된다. 단 이 경우 JavaScript를 사용하기에 페이지 렌더링 속도가 느려진다는 단점이 있다. 그리고 위의 브라우저 API를 이용하는 기능들은 사용이 불가능하다. 이 JavaScript가 대체하는 것은 HTML5의 마크업 뿐이기 때문이다. </p></blockquote><blockquote><p>API<br><a href="https://ko.wikipedia.org/wiki/API" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/API</a></p></blockquote><blockquote><p>WHATWG(웹 하이퍼텍스트 애플리케이션 테크놀로지 워킹 그룹)<br><a href="https://ko.wikipedia.org/wiki/WHATWG" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/WHATWG</a></p></blockquote><p><br></p><h3 id="HTML5-소개"><a href="#HTML5-소개" class="headerlink" title="HTML5 소개"></a>HTML5 소개</h3><p>(<a href="http://poiemaweb.com/html5-syntax" target="_blank" rel="noopener">http://poiemaweb.com/html5-syntax</a>)</p><p><br></p><h3 id="시멘틱-웹"><a href="#시멘틱-웹" class="headerlink" title="시멘틱 웹"></a>시멘틱 웹</h3><p>(<a href="http://poiemaweb.com/html5-semantic-web" target="_blank" rel="noopener">http://poiemaweb.com/html5-semantic-web</a>)</p><p><br></p><h3 id="form"><a href="#form" class="headerlink" title="form"></a>form</h3><p>(<a href="http://poiemaweb.com/html5-tag-forms" target="_blank" rel="noopener">http://poiemaweb.com/html5-tag-forms</a>)</p><p><br></p><h3 id="시맨틱한-HTML5-마크업-구조-설계-어떻게-할까"><a href="#시맨틱한-HTML5-마크업-구조-설계-어떻게-할까" class="headerlink" title="시맨틱한 HTML5 마크업 구조 설계, 어떻게 할까?"></a>시맨틱한 HTML5 마크업 구조 설계, 어떻게 할까?</h3><p>(<a href="https://www.slideshare.net/NULINTS/2014-html5" target="_blank" rel="noopener">https://www.slideshare.net/NULINTS/2014-html5</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTML-CSS&quot;&gt;&lt;a href=&quot;#HTML-CSS&quot; class=&quot;headerlink&quot; title=&quot;HTML, CSS&quot;&gt;&lt;/a&gt;HTML, CSS&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;CSS-BOX-MODEL&quot;&gt;&lt;a href=&quot;#CS
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="CSS" scheme="http://windfanta.github.io/blog/categories/study/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 2 CH7 이벤트 다루기</title>
    <link href="http://windfanta.github.io/blog/2018/03/22/study-jquery-11/"/>
    <id>http://windfanta.github.io/blog/2018/03/22/study-jquery-11/</id>
    <published>2018-03-22T01:42:45.000Z</published>
    <updated>2018-07-30T01:01:30.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-2"><a href="#자바스크립트-jQuery-완전정복-스터디-2" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 2 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 2 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650875" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650875</a>)</p><p><br></p><h1 id="CH7-이벤트-다루기"><a href="#CH7-이벤트-다루기" class="headerlink" title="CH7 이벤트 다루기"></a>CH7 이벤트 다루기</h1><hr><p><br></p><h2 id="lesson-01-이벤트-소개"><a href="#lesson-01-이벤트-소개" class="headerlink" title="lesson 01 - 이벤트 소개"></a>lesson 01 - 이벤트 소개</h2><hr><h3 id="01-이벤트란"><a href="#01-이벤트란" class="headerlink" title="01_이벤트란?"></a>01_이벤트란?</h3><p>책 P242 참고</p><p><br></p><h3 id="02-이벤트-종류"><a href="#02-이벤트-종류" class="headerlink" title="02_이벤트 종류"></a>02_이벤트 종류</h3><blockquote><ol><li><em>마우스 이벤트</em><br>사용자가 마우스 버튼을 눌렀을 때 발생하는 이벤트, 화면상에서 마우스 버튼이 눌린 위치, ctrl키 또는 alt키를 누른 상태에서 마우스 버튼을 눌렀는지를 나타내는 정보가 담깁니다.<br><br></li><li><em>키보드 이벤트</em><br>사용자가 키보드를 눌렀을 때 발생하는 이벤트로 이때 눌린 키에 대한 정보가 이벤트에 담깁니다.<br><br></li><li><em>태그요소 고유 이벤트</em><br>엘리먼트마다 발생하는 고유의 이벤트로 예를 들어 ‘img’태그 요소의 경우 이미지가 모두 로드되면 load 이벤트를 발생시켜 이미지가 로드 됐음을 알리며 ‘input’ 태그 요소는 입력한 정보가 바뀌면 change 이벤트를 발생 시켜 입력 정보가 변경됐음을 알립니다.<br><br></li><li><em>사용자 정의 이벤트</em><br>개발자가 직접 만들어서 사용하는 이벤트, 주로 개발자 고유 라이브러리 또는 클래스를 만들고 이를 사용한 어떤 작업이 끝났음을 사용자에게 알려줄 때 개발자만의 이벤트를 만들어 사용합니다.</li></ol></blockquote><p><br></p><h3 id="03-이벤트-단계"><a href="#03-이벤트-단계" class="headerlink" title="03_이벤트 단계"></a>03_이벤트 단계</h3><p>자바스크립트 이벤트를 이해하려면 이벤트 흐름을 반드시 알고 있어야 합니다.<br>이벤트는 크게 3단계에 걸쳐 발생합니다.</p><ol><li>캡쳐 단계</li><li>타깃 단계</li><li>버블링 단계</li></ol><blockquote><p>참고 - JAVASCRIPT EVENT PHASE 이벤트<br><a href="http://derveljunit.tistory.com/236" target="_blank" rel="noopener">http://derveljunit.tistory.com/236</a></p></blockquote><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/2o0rfsfd/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p><em>메모</em></p><blockquote><ol><li>이벤트 흐름<br>이벤트 흐름은 오직 DOM노드 객체를 따라 이동하며 사용자가 만든 객체에서는 절대 일어나지 않을뿐더러 이벤트를 흐르게 할 수도 없습니다.<br><br></li><li>event.Phase 프로퍼티<br>예제 코드에서 event.Phase는 이벤트 단계를 알 수 있는 프로퍼티 입니다.<br>0 - none<br>1 - 캡쳐<br>2 - 타겟<br>3 - 버블링</li></ol></blockquote><p><br></p><h4 id="단계-01-캡처-Capture-단계"><a href="#단계-01-캡처-Capture-단계" class="headerlink" title="단계 01_캡처(Capture) 단계"></a>단계 01_캡처(Capture) 단계</h4><h5 id="01-설명"><a href="#01-설명" class="headerlink" title="01_설명"></a>01_설명</h5><p>가장 먼저 실행되는 이벤트 단계로서, 이벤트 흐름은 가장 취상위 노드인 document에서 시작해 html태그와 body태그를 거쳐 실제 이벤트를 발생시킨 #b2 노드 전까지 흐르게되며 이단계를 캡쳐 단계라고 부릅니다.<br>이때 지나오며 만나는 노드 중 캡쳐 단계에 이벤트 리스너가 등록돼 있다면 이벤트 리스너가 실행됩니다.</p><p><br></p><h5 id="02-이벤트-등록-방법"><a href="#02-이벤트-등록-방법" class="headerlink" title="02_이벤트 등록 방법"></a>02_이벤트 등록 방법</h5><blockquote><p>Javascript<br>var eleBtn = document.getElementById(‘#btn’); // 대상<br>eleBtn.addEventListener(‘이벤트명’, 리스터, true);</p></blockquote><blockquote><p>jQuery<br>$대상.get(0).addEventListener(‘이벤트명’, 리스너, true);</p></blockquote><p>jQuery에 경우 캡쳐 단계에 이벤트를 등록하는 기능을 제공하지 않아 위와 같이 자바스크립트의 DOM에 접근해 자바스크립트 방식을 이벤트를 등록해야 합니다.</p><p><br></p><h5 id="03-캡쳐-단계의-용도"><a href="#03-캡쳐-단계의-용도" class="headerlink" title="03_캡쳐 단계의 용도"></a>03_캡쳐 단계의 용도</h5><p>캡쳐 단계의 용도는 주로 타깃/버블링 단계의 이벤트 실행 전에 처리해야할 사전 작업 또는 타깃/버블링 단계 이벤트를 제어하는 용도로 아주 가끔 사용합니다.</p><p><br></p><h4 id="단계-02-타깃-target-단계"><a href="#단계-02-타깃-target-단계" class="headerlink" title="단계 02_타깃(target) 단계"></a>단계 02_타깃(target) 단계</h4><h5 id="01-설명-1"><a href="#01-설명-1" class="headerlink" title="01_설명"></a>01_설명</h5><p>타깃 단계는 이벤트 흐름이 이벤트를 발생시킨 노드에 머무르는 단계를 말하며 이때 이벤트를 발생시킨 노드에 이벤트가 등록되어 있다면 리스너가 실행됩니다.</p><p><br></p><h5 id="02-이벤트-등록-방법-1"><a href="#02-이벤트-등록-방법-1" class="headerlink" title="02_이벤트 등록 방법"></a>02_이벤트 등록 방법</h5><blockquote><p>Javascript<br>var eleBtn = document.getElementById(‘#btn’); // 대상<br>eleBtn.addEventListener(‘이벤트명’, 리스터, false);</p></blockquote><blockquote><p>jQuery<br>$(대상).on(‘이벤트이름’, 리스너);</p></blockquote><p><br></p><h4 id="단계-03-버블-bubble-단계"><a href="#단계-03-버블-bubble-단계" class="headerlink" title="단계 03_버블(bubble) 단계"></a>단계 03_버블(bubble) 단계</h4><h5 id="01-설명-2"><a href="#01-설명-2" class="headerlink" title="01_설명"></a>01_설명</h5><p><em>버블 단계는 캡처 단계의 역순으로 흐르는 단계를 의미합니다.</em><br>그리고 이 흐름을 버블링(bubbling)이라고 부릅니다.</p><p><strong>버블링의 예</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/kjkp54xu/6/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h5 id="02-이벤트-등록-방법-2"><a href="#02-이벤트-등록-방법-2" class="headerlink" title="02_이벤트 등록 방법"></a>02_이벤트 등록 방법</h5><blockquote><p>Javascript<br>var eleBtn = document.getElementById(‘#btn’); // 대상<br>eleBtn.addEventListener(‘이벤트명’, 리스터, false);</p></blockquote><blockquote><p>jQuery<br>$(대상).on(‘이벤트이름’, 리스너);</p></blockquote><p><em>타깃 단계와 버블 단계에 이벤트를 등록하는 방법은 동일합니다.</em><br>타깃 단계인지 버블 단계인지 구분할때는 Event 객체와 eventPhase 속성을 사용하면 됩니다.</p><p><strong>eventPhase속성을 통한 버블링 차단</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/w02kbeut/3/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>JS 버블링(Bubbling) &amp; 캡쳐링(Capturing)<br><a href="https://project42da.github.io/js/2017/01/30/js-bubblingcapturing/" target="_blank" rel="noopener">https://project42da.github.io/js/2017/01/30/js-bubblingcapturing/</a></p></blockquote><p><br></p><h2 id="lesson-02-핵심-내용"><a href="#lesson-02-핵심-내용" class="headerlink" title="lesson 02 - 핵심 내용"></a>lesson 02 - 핵심 내용</h2><hr><h3 id="01-일반-이벤트-등록"><a href="#01-일반-이벤트-등록" class="headerlink" title="01_일반 이벤트 등록"></a>01_일반 이벤트 등록</h3><blockquote><p>$대상.on(‘이벤트이름’, 리스너)</p></blockquote><p><em>참고</em></p><blockquote><p>jQuery 버전 1.6까지는 bind() 메서드를 사용했지만 1.7이후 on()으로 변경되었습니다. 이와 동시에 live(), delegate() 등의 이벤트 메서드도 on()에 통합되었습니다.</p></blockquote><p><br></p><h3 id="02-단축-이벤트-등록"><a href="#02-단축-이벤트-등록" class="headerlink" title="02_단축 이벤트 등록"></a>02_단축 이벤트 등록</h3><blockquote><p>$대상.단축이벤트(리스너)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// on() 메서드 사용</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 단축 메서드 click() 사용</span></span><br><span class="line">$(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'hello'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>jQuery에서는 일반적으로 많이 사용하는 이벤트를 좀 더 쉽게 사용할 수 있게 단축 이벤트 메서드를 가지고 있습니다.<br>예를 들어 click이벤트를 등록하는 경우 단축 이벤트 메서드를 사용하면 다음과 같이 click() 메서드를 이용해 간결하게 처리할 수 있습니다.</p><blockquote><p>단축 이벤트 메서드 내부에서는 on() 메서드를 사용하기 때문에 두 방법 중 여러분이 편한 방법을 사용하면 됩니다.</p></blockquote><blockquote><p>jQuery 이벤트 목록<br><a href="https://api.jquery.com/category/events/" target="_blank" rel="noopener">https://api.jquery.com/category/events/</a></p></blockquote><p><br></p><h3 id="03-등록한-이벤트-제거"><a href="#03-등록한-이벤트-제거" class="headerlink" title="03_등록한 이벤트 제거"></a>03_등록한 이벤트 제거</h3><blockquote><p>지정한 이벤트(click등) 중 특정 리스너 제거<br>$대상.off(‘이벤트이름’, 삭제하고 싶은 리스너 명)<br><br><br>지정한 이벤트(click등) 제거<br>$대상.off(‘이벤트이름’)<br><br><br>대상의 이벤트 전부 제거<br>$대상.off(‘이벤트이름’)</p></blockquote><p><br></p><h3 id="04-이벤트-한-번만-실행"><a href="#04-이벤트-한-번만-실행" class="headerlink" title="04_이벤트 한 번만 실행"></a>04_이벤트 한 번만 실행</h3><blockquote><p>$대상.one(‘이벤트이름’, 리스너)</p></blockquote><p>one()메서드를 통해 등록된 이벤트 리스너는 한번 실행되고 자동 제거 됩니다.</p><h3 id="05-기본-행동-취소"><a href="#05-기본-행동-취소" class="headerlink" title="05_기본 행동 취소"></a>05_기본 행동 취소</h3><blockquote><p>event.preventDefault()</p></blockquote><p>a태그 클릭 시 click이벤트 발생 후 해당 링크로 이동하게 되는 데 여기서 해당 링크로 이동하는 행동을 기본행동이라고 합니다.</p><p>모든 이벤트가 기본 행동을 취소할 수 있는 건 아닙니다. 이벤트 발생 후 실행되는 기본행동이 알려면 이벤트 객체의 cancelable 프로퍼티의 값을 확인하는 것으로 알 수 있으며 값이 true인 경우 기본 행동이 실행된다는 의미 입니다.</p><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/4ew5hbtd/4/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p>기본행동 관련속성 P264 ~ 확인</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-2&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-2&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 2 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 2 CH5~6 스타일, 속성 다루기</title>
    <link href="http://windfanta.github.io/blog/2018/03/19/study-jquery-10/"/>
    <id>http://windfanta.github.io/blog/2018/03/19/study-jquery-10/</id>
    <published>2018-03-19T07:27:11.000Z</published>
    <updated>2018-07-30T01:01:30.074Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-2"><a href="#자바스크립트-jQuery-완전정복-스터디-2" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 2 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 2 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650875" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650875</a>)</p><p><br></p><h1 id="CH5-스타일-다루기"><a href="#CH5-스타일-다루기" class="headerlink" title="CH5 스타일 다루기"></a>CH5 스타일 다루기</h1><hr><p><br></p><h2 id="lesson-01-스타일-소개"><a href="#lesson-01-스타일-소개" class="headerlink" title="lesson 01 - 스타일 소개"></a>lesson 01 - 스타일 소개</h2><hr><h3 id="01-스타일-종류"><a href="#01-스타일-종류" class="headerlink" title="01_스타일 종류"></a>01_스타일 종류</h3><blockquote><ol><li>외부 스타일 - 외부 파일(.css)에 선언된 스타일</li><li>내부 스타일 - html문서 내 style 태그를 통해 선언된 스타일</li><li>인라인 스타일 - 엘리먼트에 style 속성을 통해 선언된 스타일</li></ol></blockquote><p><br></p><h3 id="02-스타일을-다루는-방법"><a href="#02-스타일을-다루는-방법" class="headerlink" title="02_스타일을 다루는 방법"></a>02_스타일을 다루는 방법</h3><hr><blockquote><p><strong><em> 정적인 방법 </em></strong><br>작성한 스타일을 직접 변경하는 방법을 말하며 스타일 변경 후 문서를 재실행해야 합니다.<br><br><strong><em> 동적인 방법 </em></strong><br>웹 문서를 실행한 상태에서 자바스크립트와 jQuery를 이용해 스타일을 다루는 방법을 말하며 문서의 재실행이 필요 없습니다.</p></blockquote><p><br> </p><h2 id="03-jQuery를-활용한-스타일-다루는-방법의-특징"><a href="#03-jQuery를-활용한-스타일-다루는-방법의-특징" class="headerlink" title="03_jQuery를 활용한 스타일 다루는 방법의 특징"></a>03_jQuery를 활용한 스타일 다루는 방법의 특징</h2><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/870r1ey5/11/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><blockquote><p>window.getCoumputeStyle<br>[<a href="https://developer.mozilla.org/ko/docs/Web/API/Window/getComputedStyle]" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/API/Window/getComputedStyle]</a></p></blockquote><p><br></p><h2 id="lesson-02-핵심내용"><a href="#lesson-02-핵심내용" class="headerlink" title="lesson 02 - 핵심내용"></a>lesson 02 - 핵심내용</h2><hr><p>실무를 진행하기 위해 반드시 할 줄 알아야하는 핵심 내용만 선별해서 다룹니다.</p><blockquote><p>스타일 값 구하기<br>스타일 값 설정하기<br>클래스 추가<br>클래스 삭제</p></blockquote><p><br></p><h3 id="01-스타일-값-구하기"><a href="#01-스타일-값-구하기" class="headerlink" title="01_스타일 값 구하기"></a>01_스타일 값 구하기</h3><blockquote><p>jQuery를 이용한 스타일 값 구하기<br>$대상.css(‘스타일 속성이름’);<br>$대상.css([‘스타일속성이름1’, ‘스타일속성이름2’….]);</p></blockquote><p><br></p><h3 id="02-스타일-설정하기"><a href="#02-스타일-설정하기" class="headerlink" title="02_스타일 설정하기"></a>02_스타일 설정하기</h3><p>스타일 값 구하고 설정하기<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/Lku3dm0v/7/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h3 id="03-클래스-제어"><a href="#03-클래스-제어" class="headerlink" title="03_클래스 제어"></a>03_클래스 제어</h3><blockquote><p>class 추가<br>$(대상).addClass(‘클래스명1 클래스명2’);</p></blockquote><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/c4v05hy0/4/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p><br></p><blockquote><p>class 삭제<br>$(대상).removeClass(‘클래스명1 클래스명2’);</p></blockquote><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/tzuygd37/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p><br></p><blockquote><p>기타 class 제어</p></blockquote><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/dhhgzd6j/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p><br></p><h1 id="CH6-속성-다루기"><a href="#CH6-속성-다루기" class="headerlink" title="CH6 속성 다루기"></a>CH6 속성 다루기</h1><hr><p><br></p><h2 id="lesson-01-속성-소개"><a href="#lesson-01-속성-소개" class="headerlink" title="lesson 01 - 속성 소개"></a>lesson 01 - 속성 소개</h2><hr><p>일반 태그의 id와 class 그리고 a태그에 링크 정보를 담는 href와 img태그에 이미지 정보를 담는 src등을 일반 속성이라 부르며 data-value와 가이 사용자 필요에 의해서 만들어 사용하는 속성을 사용자 정의 속성이라고 부릅니다.</p><p>일반 속성의 예<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/event.jpg"</span> <span class="attr">alt</span>=<span class="string">"이벤트"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>사용자 정의 속성의 예<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">data-value</span>=<span class="string">"true"</span>&gt;</span>확인<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="lesson-02-핵심-내용"><a href="#lesson-02-핵심-내용" class="headerlink" title="lesson 02 - 핵심 내용"></a>lesson 02 - 핵심 내용</h2><hr><blockquote><p><strong><em> 속성 값 구하기 </em></strong><br>$(대상).attr(‘속성명’);<br>$(대상).data(‘(data-를 제외한)속성명’);<br><br><strong><em> 속성 값 설정하기 </em></strong><br>$(대상).attr(‘속성명’, ‘속성값’);<br>$(대상).data(‘(data-를 제외한)속성명’, ‘속성값’); </p></blockquote><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/vwumj7ar/5/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><blockquote><p>attr과 prop은 왜 나누어졌는가?<br>[<a href="http://javascriptandjquerydev.blogspot.kr/2012/07/attr-prop.html]" target="_blank" rel="noopener">http://javascriptandjquerydev.blogspot.kr/2012/07/attr-prop.html]</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-2&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-2&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 2 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 2 CH02 jQuery 소개</title>
    <link href="http://windfanta.github.io/blog/2018/03/05/study-jquery-9/"/>
    <id>http://windfanta.github.io/blog/2018/03/05/study-jquery-9/</id>
    <published>2018-03-05T02:36:40.000Z</published>
    <updated>2018-07-30T01:01:30.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-2"><a href="#자바스크립트-jQuery-완전정복-스터디-2" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 2 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 2 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650875" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650875</a>)</p><p><br></p><h1 id="CH02-jQuery-기능"><a href="#CH02-jQuery-기능" class="headerlink" title="CH02 jQuery 기능"></a>CH02 jQuery 기능</h1><hr><p><br></p><h2 id="lesson-01-jQuery-기능"><a href="#lesson-01-jQuery-기능" class="headerlink" title="lesson 01 - jQuery 기능"></a>lesson 01 - jQuery 기능</h2><hr><h3 id="01-jQuery란"><a href="#01-jQuery란" class="headerlink" title="01_jQuery란?"></a>01_jQuery란?</h3><p>1장에서 알아본 것처럼 jQuery는 크로스 브라우징 라이브러리의 한 종류로서 <strong>자바스크립트 DOM을 좀 더 쉽게 사용할 수 있게 도와주는 라이브러리</strong> 입니다.<br>(jQuery는 언어가 아닌 자바스크립트 문법으로 만들어진 라이브러리일 뿐 입니다.)</p><p><br> </p><h3 id="02-jQuery-기능1"><a href="#02-jQuery-기능1" class="headerlink" title="02_jQuery 기능1"></a>02_jQuery 기능1</h3><p>대부분의 라이브러리가 그렇듯 jQuery 역시 jQuery만의 독창적인 기술과 표현법으로 자바스크립트에서 처리하는 수많은 작업을 아주 쉽게 처리해주는 기능의 집합으로 구성돼 있습니다.</p><blockquote><ul><li><strong>jQuery DOM</strong><br>jQuery의 가장 핵심기능으로 노드를 찾는 것부터 추가, 수정, 삭제까지 노드와 관련된 모든 기능을 제공합니다.<br><br></li><li><strong>jQuery Ajax</strong><br>서버와 데이터를 아주 쉽게 주고 받을 수 있는 다양한 통신 기능을 제공하며 추가로 서버에서 받은 데이터를 jQuery DOM과 연계할 수 있는 기능까지 제공하고 있어 동적인 화면을 쉽게 제작할 수 있습니다.<br>(참고 - 이 책에서는 지면상 다루지 않는 부분 입니다.)<br><br></li><li><strong>jQuery 효과(effect)</strong><br>jQuery는 인터렉티브 웹 콘텐츠 제작에 반드시 필요한 다양한 효과 기능을 기본적으로 제공합니다. 이 역시 DOM과 직접 연계돼 있어 DOM 요소에 효과를 아주 쉽게 적용할 수 있습니다.<br><br></li><li><strong>jQuery 플러그인(plug-in)</strong><br>jQuery가 다른 라이브러리의 경쟁 속에서 살아남아 소위 대세가 될 수 있었던 이유 가운데 하나는 바로 다양한 플러그인이 있기 때문입니다.</li></ul></blockquote><p><br></p><h3 id="03-jQuery-기능2"><a href="#03-jQuery-기능2" class="headerlink" title="03_jQuery 기능2"></a>03_jQuery 기능2</h3><p>책 P37 및 <a href="http://api.jquery.com/" target="_blank" rel="noopener">http://api.jquery.com/</a> 참고</p><p><br></p><h2 id="lesson-02-jQuery-학습방법"><a href="#lesson-02-jQuery-학습방법" class="headerlink" title="lesson 02 - jQuery 학습방법"></a>lesson 02 - jQuery 학습방법</h2><hr><h3 id="01-jQuery의-정체"><a href="#01-jQuery의-정체" class="headerlink" title="01_jQuery의 정체"></a>01_jQuery의 정체</h3><p>사실 jQuery는 수 많은 메서드를 가지고 있는 클래스 입니다. 좀 더 정확히 말하자면 jQuery는 자바스크립트 문법 중 프로토타입(prototype) 방식으로 만들어진 클래스 입니다. jQuery를 배운다는 의미는 바로 jQuery 메서드를 배운다는 의미와 같습니다.</p><p><br></p><h3 id="02-초보자가-반드시-할-줄-알아야-하는-jQuery-핵심-내용-정리"><a href="#02-초보자가-반드시-할-줄-알아야-하는-jQuery-핵심-내용-정리" class="headerlink" title="02_초보자가 반드시 할 줄 알아야 하는 jQuery 핵심 내용 정리"></a>02_초보자가 반드시 할 줄 알아야 하는 jQuery 핵심 내용 정리</h3><p><strong>노드 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/0nse7wew/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>스타일 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/qa0nzvkv/4/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>속성 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/s02b1bqd/3/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>이벤트 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/1s2pqak3/6/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>위치 및 크기 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/93j33ttd/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>애니메이션 효과 다루기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/3L02guxa/12/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson-03-jQuery를-사용하는-이유"><a href="#lesson-03-jQuery를-사용하는-이유" class="headerlink" title="lesson 03 - jQuery를 사용하는 이유"></a>lesson 03 - jQuery를 사용하는 이유</h2><hr><h3 id="01-jQuery-VS-Javascript"><a href="#01-jQuery-VS-Javascript" class="headerlink" title="01_jQuery VS Javascript"></a>01_jQuery VS Javascript</h3><p>앞서 언급한 것처럼 jQuery는 자바스크립트 DOM을 좀 더 쉽게 작업하기 위한 라이브러리 덩어리 입니다.<br>단순하게 설명하면 똑같은 작업을 자바스크립트로 코딩하면 10줄, jQuery로 코딩하면 1줄로 처리 할 수 있을 만큼 효율적인 코드로 작업할 수 있습니다.</p><p><br></p><h4 id="기본-기능-비교"><a href="#기본-기능-비교" class="headerlink" title="기본 기능 비교"></a>기본 기능 비교</h4><p><strong>아이디가 header인 노드를 찾아 border를 4px solid #f00으로 변경하기</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> headerEle = <span class="built_in">document</span>.getElementById(<span class="string">'header'</span>);</span><br><span class="line">headerEle.style.border = <span class="string">'4px solid #ff0000'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'#header'</span>).css(<span class="string">'border'</span>, <span class="string">'4px solid #ff0000'</span>);</span><br></pre></td></tr></table></figure><p><strong>태그이름이 p인 노드를 찾아 border를 찾아 4px solid #f00으로 변경하기</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> pEles = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pEles.length; i++) &#123;</span><br><span class="line">  pEles[i].style.border = <span class="string">'4px solid #ff0000'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'p'</span>).css(<span class="string">'border'</span>, <span class="string">'4px solid #ff0000'</span>);</span><br></pre></td></tr></table></figure></p><p><strong>문서 내용 중 div의 자식 p요소 중 클래스 ‘test2’가 적용된 요소를 모두 찾아 border값을 적용</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="comment">// 클래스 명이 'test2'인 모든 엘리먼트를 변수 test2Eles에 할당</span></span><br><span class="line"><span class="keyword">var</span> test2Eles = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'test2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test2Eles에 할당된 엘리먼트의 숫자만큼 반복문 실행</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; test2Eles.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> targetEle = test2Eles[i];</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 조건 문으로 .test2 클래스를 가진 엘리먼트 중 P태그이고 부모가 DIV태그를 갖는 경우를 찾음</span></span><br><span class="line">  <span class="keyword">if</span> (targetEle.tagName == <span class="string">'P'</span> &amp;&amp; targetEle.parentNode.tagName == <span class="string">'DIV'</span>) &#123;</span><br><span class="line">    targetEle.style.border = <span class="string">'4px solid #ff0000'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'div &gt; p.test2'</span>).css(&#123;</span><br><span class="line">  border: <span class="string">'4px solid #ff0000'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>jQuery의 매력은 찾고자 하는 내용이 복잡하면 복잡할수록 더 놀라운 효과를 발휘합니다.( 예제의 경우는 이정도로 복잡한 상황에서도 편리하게 사용할 수 있다는 예로 실무에서는 변경 혹은 특정한 형태를 갖는 엘리먼트는 명확히 표기하는 것이 좋습니다. )<br>정리해보면 예제를 통해 알아본 것처럼 일단 코드 양으로만 비교해도 자바스크립트보다 jQuery의 코드 양이 훨씬적다는 걸 알 수 있습니다.<br>더욱 놀라운 건 원하는 노드를 찾기 위해 열분이 이미 알고 있는 CSS 선택자 개념이 jQuery에서 그대로 사용되고 있다는 점입니다. 이 기능은 jQuery가 다른 크로스 브라우징 라이브러리의 도전을 물리치고 지금까지 인기를 얻고 있는 이유 중 하나 입니다.</p><p><br></p><h4 id="크로스-브라우징-비교"><a href="#크로스-브라우징-비교" class="headerlink" title="크로스 브라우징 비교"></a>크로스 브라우징 비교</h4><p><strong>버튼(#btn1)을 클릭하면 ‘안녕하세요’ 메시지를 띄워주세요(alert)</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> btnEle = <span class="built_in">document</span>.getElementById(<span class="string">'#btn1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 조건문 - attachEvent 메서드가 존재하는 지 확인</span></span><br><span class="line"><span class="comment">// attachEvent(IE에서의 addEventListener와 같은 기능의 메서드로 IE11부터 사용 불가) </span></span><br><span class="line"><span class="keyword">if</span> (btn1.attachEvent) &#123;</span><br><span class="line">  <span class="comment">// attachEvent 메서드가 존재한다면 이 것을 통해 click이벤트를 등록</span></span><br><span class="line">  btn1.attachEvent(<span class="string">'onclick'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'안녕하세요'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="comment">// 존재하지 않는 경우 addEventListener를 통해 click이벤트를 등록</span></span><br><span class="line">  btn1.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'안녕하세요;'</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'#btn1'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'안녕하세요'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="애니메이션-효과"><a href="#애니메이션-효과" class="headerlink" title="애니메이션 효과"></a>애니메이션 효과</h4><p><strong>버튼을 클릭하면 물고기를 왼쪽에서 오른쪽으로 움직여 주세요(javascript)</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/vr3ob90n/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>버튼을 클릭하면 물고기를 왼쪽에서 오른쪽으로 움직여 주세요(jQuery)</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/mmxc83jo/3/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>jQuery는 애니메이션 기능을 자체적으로 제공하고 있기 때문에 간단한 애니메이션부터 복잡한 애니메이션까지 쉽게 만들 수 있습니다. jQuery는 편리하고 유용하지만 여기서 주의해야할 사항이 하나 있습니다. 지금까지 내용을 보면 자바스크립트를 거의 배우지 않아도 되는 것처럼 느끼는 사용자도 있을 것 입니다.<br>하지만 이건 정말 잘못된 생각으로 jQuery는 그저 편한 여러 라이브러리 중 하나이며 전체가 될 수 없습니다.</p><p><br></p><h3 id="02-jQuery와-CSS와의-관계"><a href="#02-jQuery와-CSS와의-관계" class="headerlink" title="02_jQuery와 CSS와의 관계"></a>02_jQuery와 CSS와의 관계</h3><p>책 P54 ~ P55 참고</p><p><br></p><h2 id="lesson-04-jQuery-개발-환경-설정"><a href="#lesson-04-jQuery-개발-환경-설정" class="headerlink" title="lesson 04 - jQuery 개발 환경 설정"></a>lesson 04 - jQuery 개발 환경 설정</h2><hr><blockquote><p>CDN(Content Delivery Network)<br><a href="http://cdn.hosting.kr/cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/" target="_blank" rel="noopener">http://cdn.hosting.kr/cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/</a></p></blockquote><p><br></p><h3 id="02-진입점인-ready-메서드-설정"><a href="#02-진입점인-ready-메서드-설정" class="headerlink" title="02 진입점인 ready() 메서드 설정"></a>02 진입점인 ready() 메서드 설정</h3><p>대부분의 프로그래밍 언어에는 진입점에 해당하는 main()함수가 있습니다. jQuery역시 main()과 비슷한 진입점을 제공하는데요. 바로 ready()라는 메서드 입니다.<br>ready()메서드는 문서의 노드를 사용할 준비가 되면 document 객체에서 발생하는 DOmContent loaded이벤트 처리를 포장한(wrapping) 메서드 입니다.<br>jQuery에서 ready()를 이용해서 진입점을 설정하는 방법은 다음과 같이 4가지 방법이 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방법1(jQuery에서 공식으로 권장하는 방식)</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'jQuery에 온 걸 환영합니다.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법2</span></span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'jQuery에 온 걸 환영합니다.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법3</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'jQuery에 온 걸 환영합니다.'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법4</span></span><br><span class="line">jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'jQuery에 온 걸 환영합니다.'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="ready-와-load"><a href="#ready-와-load" class="headerlink" title="ready()와 load()"></a>ready()와 load()</h4><blockquote><p>오중호랑이의 비밀로그 - jQuery ready와 load의 차이<br><a href="http://ojtiger.com/179" target="_blank" rel="noopener">http://ojtiger.com/179</a></p></blockquote><p><br></p><h2 id="lesson-05-jQuery의-정체"><a href="#lesson-05-jQuery의-정체" class="headerlink" title="lesson 05 - jQuery의 정체"></a>lesson 05 - jQuery의 정체</h2><hr><h3 id="01-의-기본-사용-법"><a href="#01-의-기본-사용-법" class="headerlink" title="01_$()의 기본 사용 법"></a>01_$()의 기본 사용 법</h3><p>CSS선택자와 $()를 알고 있다면 다음과 같은 방식으로 기본적인 처리가 가능합니다.</p><blockquote><p>$(‘CSS선택자’).메서드();</p></blockquote><p><br></p><h3 id="02-의-의미"><a href="#02-의-의미" class="headerlink" title="02_$()의 의미"></a>02_$()의 의미</h3><p>jQuery 라이브러리 내부를 상펴보면 다음과 같이 작성되어 있는 것을 확인할 수 있습니다.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br></pre></td></tr></table></figure></p><p>정리해보면 <strong>$는 jQuery 함수와 동일하며 jQuery함수를 좀 더 쉽게 사용하기 위한 일종의 단축이름 입니다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 아래 두 가지는 동일한 코드</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br><span class="line">jQuery(<span class="string">'div'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="03-함수의-리턴-값"><a href="#03-함수의-리턴-값" class="headerlink" title="03_$() 함수의 리턴 값"></a>03_$() 함수의 리턴 값</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $divEles = $(<span class="string">'div'</span>);</span><br><span class="line">$divEles.css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br></pre></td></tr></table></figure><p>위의 코드는 동일한 기능으로 동작합니다. 아래의 코드가 위와 같이 돌아가는 이유는 $()함수가 jQuery 객체를 리턴하기 때문이며 이러한 사실은 jQuery의 레퍼런스를 보면 좀 더 확실히 알 수 있습니다.</p><blockquote><p>jQuery CSS<br><a href="http://api.jquery.com/css/" target="_blank" rel="noopener">http://api.jquery.com/css/</a></p></blockquote><p><strong>왜 에러가 발생할까요?</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/83omp268/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>$()함수가 jQuery 객체를 반환(return)하기 때문에 $(‘div’) 함수 호출 수 jQuery에서 제공하는 css()메서드를 접근연산자인 ‘.’을 사용해 다음과 같은 구문을 실행할 수 있는 이유(== 메서드 체이닝이 가능한 이유) 입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css메서드로 값을 반환(이때는 반환되는 값이 jQuery가 아니기 때문에 체이닝 불가)</span></span><br><span class="line"><span class="built_in">console</span>.log($(<span class="string">'div'</span>).css(<span class="string">'left'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// css메서드로 값을 적용하는 경우</span></span><br><span class="line"><span class="built_in">console</span>.log( $(<span class="string">'div'</span>).css(<span class="string">'left'</span>, <span class="string">'10'</span>).addClass(<span class="string">'on'</span>) );</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery plug-in의 예</span></span><br><span class="line">$.fn.scrollFixed = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">var</span> fixedBG = <span class="keyword">new</span> ScrollFixed(self, data);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 여기서 return 값을 this(jQuery)로 선언하지 않으면 체이닝이 불가능</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="04-jQuery의-정체"><a href="#04-jQuery의-정체" class="headerlink" title="04_jQuery의 정체"></a>04_jQuery의 정체</h3><p>jQuery는 자바스크립트 DOM을 좀 더 쉽게 다룰 수 있게 도와주는 기능들로 가득 찬 라이브러리입니다. 이 라이브러리(jQuery)는 자바스크립트의 prototype이라는 클래스 제작 문법으로 만들어졌습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery 구조의 간략한 표현</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jQuery</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// jQuery Core</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jQuery.prototype.css = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">jQuery.prototype.on = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">jQuery.prototype.addClass = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">jQuery.prototype.animate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><p>함수를 사용하기 위해서는 함수호출을 해줘야하는 것처럼 클래스(생성자함수) 역시 사용을 위해서는 클래스의 인스턴스를 생성해줘야 합니다.</p><blockquote><p>var 인스턴스명 = new 클래스명;</p></blockquote><p>하지만 우리는 jQuery를 사용할 때 jQuery의 인스턴스를 생성한 적이 없습니다. 그럼에도 불구하고 사용할 수 있는 건 무슨 이유에서 일까요?<br>바로 $()에서 jQuery의 인스턴스를 사용자 대신 만들어서 제공해주기 때문 입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> jquery();</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// jQuery plug-in의 예</span></span><br><span class="line">$.fn.scrollFixed = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="comment">// 인스턴스 생성</span></span><br><span class="line">  <span class="keyword">var</span> fixedBG = <span class="keyword">new</span> ScrollFixed(self, data);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>그렇다면 $(‘div’)라는 구문을 실행한다면 인스턴스의 갯수는 document의 ‘div’ 엘리먼트의 갯수만큼 만들어지는 걸까요?<br>그것은 아닙니다. 1개의 jQuery 인스턴스에 $()함수를 활용해 찾은 여러 개의 div엘리먼트를 포함하게 됩니다.<br>이때 .css()메서드를 호출하는 경우 jQuery 인스턴스에 넣어둔 div엘리먼트를 반복문을 이용해 노드에 하나씩 접근해 스타일을 변경하게 됩니다.<br>아래의 jQuery와 javascript를 비교해보면 이해에 도움이 될 것입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery</span></span><br><span class="line">$(<span class="string">'div p'</span>).css(<span class="string">'background'</span>, <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> divEles = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 선택한 div의 제어를 위해 반복문을 실행</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; divEles.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 선택 div내 하위 p를 찾는 반복문을 실행(p하위에 또 p가 존재한다면 반복문이 추가되어야 함)</span></span><br><span class="line">  <span class="keyword">var</span> targetEle = divEles[i].getElementsByTagName(<span class="string">'p'</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; targetEle.length; i++) &#123;</span><br><span class="line">    targetEle[j].style.backgroundColor = <span class="string">'red'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 예시지만 jQuery에서 스타일을 변경을 실행하면 jQuery가 아닌 내부의 자바스크립트 DOM이 처리 합니다. 또 jQuery를 사용하는 사용자는 루프를 직접 돌리지 않지만 jQuery 내부에서 루프를 도는 로직이 들어 있기 때문에 jQuery 기능 호출을 줄여주는 것이 좋습니다.</p><p>반복적으로 사용되는 엘리먼트는 캐시(변수에 할당)해서 사용하는 것이 좋습니다.</p><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/SUNGMIN_SHIN/wk1yxq1s/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-2&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-2&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 2 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>(vue.js) - 08 사용자 정의 이벤트</title>
    <link href="http://windfanta.github.io/blog/2018/02/25/study-vue-8/"/>
    <id>http://windfanta.github.io/blog/2018/02/25/study-vue-8/</id>
    <published>2018-02-25T05:56:59.000Z</published>
    <updated>2018-07-30T01:01:30.084Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Vue-js-2-프로그래밍"><a href="#Vue-js-2-프로그래밍" class="headerlink" title="[ Vue.js 2 프로그래밍  ]"></a>[ Vue.js 2 프로그래밍  ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12320270" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=12320270</a>)</p><hr><p><br></p><h1 id="8-사용자-정의-이벤트"><a href="#8-사용자-정의-이벤트" class="headerlink" title="8. 사용자 정의 이벤트"></a>8. 사용자 정의 이벤트</h1><p>때때로 사용자 정의 이벤트가 필요할 때가 있습니다. 이를 위해 vue 인스턴스 메서드를 사용할 수 있습니다. 모든 vue 인스턴스는 이벤트 인터페이스를 구현하고 있습니다.</p><blockquote><p>Vue 이벤트 인터페이스<br>(<a href="https://kr.vuejs.org/v2/api/index.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8" target="_blank" rel="noopener">https://kr.vuejs.org/v2/api/index.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C-%EC%9D%B4%EB%B2%A4%ED%8A%B8</a>)</p></blockquote><p>이는 다음을 의미합니다.</p><blockquote><ul><li>$on(event)를 이용해 이벤트 청취</li><li>$emit(event)를 이용해 이벤트 발생</li><li>$once(event)를 이용해 이벤트를 한번만 청취</li><li>$off(event)를 이용해 이벤트 리스너를 제거</li></ul></blockquote><p><br></p><h2 id="8-1-발생과-정취"><a href="#8-1-발생과-정취" class="headerlink" title="8.1 발생과 정취"></a>8.1 발생과 정취</h2><hr><p><strong>예제</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/5uqpj94w/6/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p>위 예제에서 리스너를 created라는 생명주기 훅(lifecycle hook)내에 등록합니다. this는 vote 메서드와 created 훅 내에서 vue 인스턴스에 바인딩 돼 있습니다. 그래서 this.$on과 this.$emit을 사용해 $on과 $emit함수에 접근할 수 있습니다.</p><p><img src="http://windfanta.ivyro.net/github/imgs/study-vue-8-1.png" alt="console에서 this를 찍어보면"></p><h3 id="생명주기-훅-Lifecycle-hook"><a href="#생명주기-훅-Lifecycle-hook" class="headerlink" title="생명주기 훅(Lifecycle hook)"></a>생명주기 훅(Lifecycle hook)</h3><p>생명주기 훅(라이프사이클 훅)은 Vue관련 이벤트가 발생할 때 실행되는 함수 입니다.</p><blockquote><p>Vue의 생명주기 훅 목록<br>(<a href="https://kr.vuejs.org/v2/guide/instance.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%ED%9B%85" target="_blank" rel="noopener">https://kr.vuejs.org/v2/guide/instance.html#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4-%ED%9B%85</a>)</p></blockquote><p><br></p><h2 id="8-2-부모-자식-간-통신"><a href="#8-2-부모-자식-간-통신" class="headerlink" title="8.2 부모-자식 간 통신"></a>8.2 부모-자식 간 통신</h2><hr><p>부모 컴포넌트가 자식 컴포넌트의 이벤트를 청취할 필요가 있을 때는 상황이 약간 달라집니다. <strong>this가 각기 다른 인스턴스에 바인딩될 것이기 때문에</strong> this.$on / this.$emit을 사용할 수 없습니다.</p><p>부모 컴포넌트는 자식 컴포넌트가 사용되는 템플릿에서 곧바로 v-on을 사용해서 자식 컴포넌트에 발생한 이벤트를 직접 청취할 수 있습니다.</p><blockquote><p>v-on<br>(<a href="https://kr.vuejs.org/v2/api/index.html#v-on" target="_blank" rel="noopener">https://kr.vuejs.org/v2/api/index.html#v-on</a>)</p></blockquote><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/pj29kd5m/7/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p>위 예제에서 <strong>@voted=”countVote”는 자식(food)의 ‘voted’이벤트가 발생할 때 countVote 메서드가 실행된다는 것을 의미</strong>합니다.</p><p><br></p><h2 id="8-3-인자-전달"><a href="#8-3-인자-전달" class="headerlink" title="8.3 인자 전달"></a>8.3 인자 전달</h2><hr><p>이번 예제에서는 각 인스턴스마다 투표 수를 가질 것이며 음식이 투표를 받으면 투표 수가 증가하고, 부모 컴포넌트에도 있는 총 투표 수를 갱신하기 위한 이벤트가 발생할 것입니다.</p><p><strong> 항목별 득표 수 </strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/80u2xs0d/7/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> 로그 추가 </strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/gc1gba2L/5/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Vue-js-2-프로그래밍&quot;&gt;&lt;a href=&quot;#Vue-js-2-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;[ Vue.js 2 프로그래밍  ]&quot;&gt;&lt;/a&gt;[ Vue.js 2 프로그래밍  ]&lt;/h1&gt;&lt;p&gt;(&lt;a hre
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="vue.js" scheme="http://windfanta.github.io/blog/categories/study/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>scss</title>
    <link href="http://windfanta.github.io/blog/2018/02/20/study-sass-1/"/>
    <id>http://windfanta.github.io/blog/2018/02/20/study-sass-1/</id>
    <published>2018-02-20T01:33:18.000Z</published>
    <updated>2018-07-30T01:01:30.081Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SASS-SCSS"><a href="#SASS-SCSS" class="headerlink" title="SASS(SCSS)"></a>SASS(SCSS)</h1><p><img src="https://sass-lang.com/assets/img/logos/logo-b6e1ef6e.svg" alt="SASS"></p><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p><strong>전처리기(preprocessor)</strong><br>임의의 소스 파일을 가져와서 브라우저가 이해할 수 있는 형태로 변환해주는 도구를 뜻하며 존재하지 않는 기능을 추가하는 용도로 주로 사용되며 일반적으로 직접 동작 시킬 수 없어 컴파일이라는 변환의 과정을 거처야 합니다.<br>CSS를 위한 대표적인 전처리기로는 SASS, LESS, Stylus등이 있습니다.</p><p><br></p><p><strong>SASS와 SCSS</strong></p><p>SASS (Syntactically Awesome Style Sheets)</p><blockquote><ul><li>CSS 전처리기의 하나</li><li>나름 오랜 역사를 자랑(2006년~)하며 그만큼 높은 성숙도를 가지고 있음</li><li>코드의 작성은 SASS표기법과 SCSS표기법 두가지를 선택하여 사용할 수 있음</li></ul></blockquote><p>SCSS</p><blockquote><ul><li>SASS의 표기법 중 1가지</li><li>SASS 버전3부터 등장하였으며 SASS의 표준 표기법</li><li>SCSS 표기법은 CSS와 구문이 완전히 호환됨과 동시에 SASS의 모든 기능을 지원하는 것이 특징</li></ul></blockquote><p><br></p><p><strong>표기법에 따른 차이 점의 예</strong></p><p>SASS<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/* SASS */</span><br><span class="line">=btn-submit($color:red)</span><br><span class="line"> display:inline-block</span><br><span class="line"> box-sizing:border-box</span><br><span class="line"> padding:0 15px</span><br><span class="line"> color: $color;</span><br><span class="line"></span><br><span class="line">.box</span><br><span class="line"> width: 100px</span><br><span class="line"> border: 1px solid red;</span><br><span class="line"> div</span><br><span class="line">  color: red</span><br><span class="line">  &amp;:last-child</span><br><span class="line">   +btn-submit(blue)</span><br></pre></td></tr></table></figure></p><p>SCSS<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SCSS */</span></span><br><span class="line">@<span class="keyword">mixin</span> btn-submit(<span class="variable">$color</span>:red) &#123;</span><br><span class="line"> <span class="attribute">display</span>:inline-block</span><br><span class="line"> box-sizing:border-box</span><br><span class="line"> padding:<span class="number">0</span> <span class="number">15px</span></span><br><span class="line"> color: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line"> <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line"> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  &amp;:last-child &#123;</span><br><span class="line">   @<span class="keyword">include</span> btn-submit(blue);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><h2 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h2><p><strong>컴파일 하기</strong></p><ol><li>cli를 이용(ruby, node등)</li><li>어플리케이션 번들러를 사용(webpack, parcel, gulp, grunt 등)</li><li>web app (EX&gt; <a href="https://www.sassmeister.com" target="_blank" rel="noopener">https://www.sassmeister.com</a>)</li><li>gui를 이용(EX&gt; <a href="http://koala-app.com" target="_blank" rel="noopener">http://koala-app.com</a>)</li></ol><p><br></p><p><strong>디버깅</strong></p><ol><li><p><strong>소스맵</strong></p><ol><li>컴파일 과정을 거친 코드는 그 자체로 알아보기 힘들다는 문제가 있음</li><li>이러한 문제를 해결하기 위해 대 부분의 최신 전처리기들에는 일명 소스맵(source map)이라고 불리는 기능을 지원</li><li>소스맵이란 컴파일 된 파일과 그 소스 사이의 관계를 만들어주는 역활을 하는 것으로 JSON 기반 매핑 형식으로 작성</li></ol></li><li><p><strong>소스맵의 사용 예(크롬)</strong></p><ul><li>크롬에서 소스맵을 사용하지 않은 경우 사진과 같이 컴파일된 css의 위치만 확인할 수 있음</li><li>소스맵이 존재하는 경우 .scss의 경로를 안내</li></ul></li></ol><p><br></p><h2 id="문법-http-sass-lang-com-guide"><a href="#문법-http-sass-lang-com-guide" class="headerlink" title="문법 (http://sass-lang.com/guide)"></a>문법 (<a href="http://sass-lang.com/guide" target="_blank" rel="noopener">http://sass-lang.com/guide</a>)</h2><h3 id="1-주석"><a href="#1-주석" class="headerlink" title="1. 주석"></a>1. 주석</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 한줄 주석 입니다.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  여려줄 주석 입니다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-중첩-nest"><a href="#2-중첩-nest" class="headerlink" title="2. 중첩(nest)"></a>2. 중첩(nest)</h3><h4 id="중첩"><a href="#중첩" class="headerlink" title="중첩"></a>중첩</h4><p>중첩기능은 선택자의 반복을 피하고(특히 상위선택자) 코드만으로 마크업의 구조를 예상할 수 있어 편리합니다.</p><h5 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn_submit"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>SUBMIT<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="SCSS"><a href="#SCSS" class="headerlink" title="SCSS"></a>SCSS</h6><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line"> <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line"> <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line"> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="속성-중첩"><a href="#속성-중첩" class="headerlink" title="[ 속성 중첩 ]"></a>[ 속성 중첩 ]</h4><p>복수의 값을 가지는 일부 속성들은 중첩된 형태로 사용할 수 있습니다.</p><h5 id="SCSS-1"><a href="#SCSS-1" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"> <span class="attribute">margin</span>:&#123;</span><br><span class="line">  top: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="attribute">padding</span>: &#123;</span><br><span class="line">  bottom: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">60px</span>;</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="상위-선택자-참조-amp"><a href="#상위-선택자-참조-amp" class="headerlink" title="[ 상위 선택자 참조 (&amp;) ]"></a>[ 상위 선택자 참조 (&amp;) ]</h4><p>중첩 안에 “<strong>&amp;</strong>“ 키워드를 사용하면 상위 선택자를 참조할 수 있습니다.</p><h5 id="HTML-1"><a href="#HTML-1" class="headerlink" title="HTML"></a>HTML</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn_submit"</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>SUBMIT<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="SCSS-2"><a href="#SCSS-2" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line"> <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line"> <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line"> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// &amp;.btn_submit =&gt; button.btn_submit</span></span><br><span class="line"> &amp;<span class="selector-class">.btn_submit</span>&#123;</span><br><span class="line">  <span class="attribute">border-color</span>:blue;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="중첩-nest-벗어나기-at-root"><a href="#중첩-nest-벗어나기-at-root" class="headerlink" title="중첩(nest) 벗어나기 ( @at-root)"></a>중첩(nest) 벗어나기 ( @at-root)</h4><p> “<strong>@at-root</strong>“ 를 사용하면 중첩 안의 변수등 값을 참조하여 사용하지만 구조적으로는 밖에서 사용되어야 하는 경우 유용하게 사용할 수 있습니다.</p><h5 id="SCSS-3"><a href="#SCSS-3" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line"> <span class="variable">$btn-width</span>: <span class="number">200px</span>;</span><br><span class="line"> <span class="variable">$btn-height</span>: <span class="number">300px</span>;</span><br><span class="line"> <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line"> <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line"> <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">20px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> @at-root .link&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="variable">$btn-width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">$btn-height</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS"><a href="#컴파일-된-CSS" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">button</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.link</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="2-변수"><a href="#2-변수" class="headerlink" title="2. 변수"></a>2. 변수</h3><p>여러번 사용될 값이라면 변수로 선언하여 사용할 수 있습니다.</p><h5 id="SCSS-4"><a href="#SCSS-4" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-color-default</span>: <span class="number">#ccc</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line"> <span class="attribute">color</span>: <span class="variable">$font-color-default</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="변수의-유효범위"><a href="#변수의-유효범위" class="headerlink" title="변수의 유효범위"></a>변수의 유효범위</h4><p>변수는 블록 “<strong>{ }</strong>“ 단위로 유효 범위를 가집니다.</p><h5 id="SCSS-5"><a href="#SCSS-5" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">  <span class="variable">$color</span>: blue;</span><br><span class="line">  </span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-1"><a href="#컴파일-된-CSS-1" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="변수의-재선언-재할당"><a href="#변수의-재선언-재할당" class="headerlink" title="변수의 재선언, 재할당"></a>변수의 재선언, 재할당</h4><p>변수는 유효범위 내에서 재선언 및 재할당할 수 있습니다.</p><h5 id="SCSS-6"><a href="#SCSS-6" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: red;</span><br><span class="line"><span class="variable">$bgColor</span>: blue;</span><br><span class="line"></span><br><span class="line"><span class="variable">$color</span>: yellow;</span><br><span class="line"><span class="variable">$bg-color</span>: gray;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="comment">// 재선언된 $color </span></span><br><span class="line">  <span class="attribute">color</span>:<span class="variable">$color</span>;</span><br><span class="line">  <span class="comment">// $bg-color는 $bgColor의 재할당</span></span><br><span class="line">  <span class="attribute">background-color</span>:<span class="variable">$bg-color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-2"><a href="#컴파일-된-CSS-2" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: yellow;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="default"><a href="#default" class="headerlink" title="!default"></a>!default</h4><p>“<strong>!default</strong>“ 는 만약변수가 이미 선언되어 있다면 사용하지 않겠다는 의미로 사용되는 키워드로 외부 SASS나 다수의 작업자가 공통적으로 작업하는 경우 이전에 선언된 값이  존재한다면 바뀌는 것을 막는 용도로 사용 됩니다.</p><h5 id="SCSS-7"><a href="#SCSS-7" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$color: red;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line"> // 변수 $color가 존재한다면 선언되지 않습니다.</span><br><span class="line"> $color: blue !default;</span><br><span class="line"> color:$color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-3"><a href="#컴파일-된-CSS-3" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="global"><a href="#global" class="headerlink" title="!global"></a>!global</h4><p>“<strong>!global</strong>“ 은 변수 선언의 범위와 관계 없이 전역으로 설정하는 키워드로 전역에 동일한 이름의 변수가 존재한다면 재선언됩니다.</p><h5 id="SCSS-8"><a href="#SCSS-8" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$color: red;</span><br><span class="line"></span><br><span class="line">.box1&#123;</span><br><span class="line"> // 전역 $color의 값이 변경</span><br><span class="line"> $color: blue !global;</span><br><span class="line"> color:$color;</span><br><span class="line">&#125;</span><br><span class="line">.box2&#123;</span><br><span class="line"> color: $color;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-4"><a href="#컴파일-된-CSS-4" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="문자-보간"><a href="#문자-보간" class="headerlink" title="#{} (문자 보간)"></a>#{} (문자 보간)</h4><p>“<strong>#{}</strong>“ 를 이용하면 코드의 어디든지 변수 값을 넣을 수 있습니다.</p><h5 id="SCSS-9"><a href="#SCSS-9" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$on: on;</span><br><span class="line">$file-name: &quot;ko_remembrance_48x48.png&quot;;</span><br><span class="line"></span><br><span class="line">.box&#123;</span><br><span class="line"> background:url(https://www.google.com/images/hpp/#&#123;$file-name&#125;);</span><br><span class="line"> &amp;.#&#123;$on&#125; &#123;</span><br><span class="line">  border:1px solid red;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-5"><a href="#컴파일-된-CSS-5" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"> <span class="attribute">background</span>: <span class="built_in">url</span>(https://www.google.com/images/hpp/ko_remembrance_48x48.png);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-class">.on</span> &#123;</span><br><span class="line"> <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="데이터-타입"><a href="#데이터-타입" class="headerlink" title="데이터 타입"></a>데이터 타입</h4><table><thead><tr><th>종류</th><th>사용 예</th><th>설명</th></tr></thead><tbody><tr><td>숫자(number)</td><td>1, 2, 0.5px</td><td>숫자(px등의 단위를 갖는 값도 숫자로 인식)</td></tr><tr><td>문자(string)</td><td>bold, color, img-section</td><td>따옴표는 선택적으로 사용</td></tr><tr><td>색상(color)</td><td>blue, #001100, rgba(255, 0, 0, 0.3)</td><td>색상에 관련된 문자도 포함</td></tr><tr><td>블린(boolean)</td><td>true / false</td><td></td></tr><tr><td>널(null)</td><td>null</td><td>아무 것도 없다는 의미의 값으로 속성 값이 null인경우 컴파일되지 않습니다.</td></tr><tr><td>리스트(list)</td><td>(apple, orange, banana) / apple orange</td><td>공백이나 ‘,’로 구분된 값의 목록이며 괄호는 선택적으로 사용</td></tr><tr><td>맵(Maps)</td><td>(apple: a, orange: o, banana: b)</td><td>괄호안에 선언되여하며 키:값의 형태로 선언</td></tr></tbody></table><p><br></p><h4 id="연산"><a href="#연산" class="headerlink" title="연산"></a>연산</h4><h5 id="산술연산자"><a href="#산술연산자" class="headerlink" title="산술연산자"></a>산술연산자</h5><table><thead><tr><th>종류</th><th>설명</th><th>비고</th></tr></thead><tbody><tr><td>+</td><td>더하기</td><td></td></tr><tr><td>-</td><td>빼기</td><td></td></tr><tr><td>*</td><td>곱하기</td><td>하나 이상의 값이 반드시 숫자</td></tr><tr><td>/</td><td>나누기</td><td>오른쪽의 값이 반드시 숫자</td></tr><tr><td>%</td><td>나머지</td></tr></tbody></table><p><br></p><h5 id="비교-연산자"><a href="#비교-연산자" class="headerlink" title="비교 연산자"></a>비교 연산자</h5><table><thead><tr><th>종류</th><th>설명</th></tr></thead><tbody><tr><td>==</td><td>같음</td></tr><tr><td>!=</td><td>같지 않음</td></tr><tr><td>&lt;</td><td>작음</td></tr><tr><td>&gt;</td><td>큼</td></tr><tr><td>&lt;=</td><td>작거나 같음</td></tr><tr><td>&gt;=</td><td>크거나 같음</td></tr></tbody></table><p><br></p><h5 id="논리-연산자"><a href="#논리-연산자" class="headerlink" title="논리 연산자"></a>논리 연산자</h5><table><thead><tr><th>종류</th><th>설명</th></tr></thead><tbody><tr><td>and</td><td>그리고</td></tr><tr><td>or</td><td>또는</td></tr><tr><td>not</td><td>부정</td></tr></tbody></table><p><br></p><h5 id="연산-사용-시-주의-사항"><a href="#연산-사용-시-주의-사항" class="headerlink" title="연산 사용 시 주의 사항"></a>연산 사용 시 주의 사항</h5><ul><li>연산 시 단위가 다르면 에러가 발생 합니다</li><li>나누기 연산은 값에 변수가 있는 경우가 아니라면 괄호로 값을 묶어야 정상적으로 동작합니다.</li></ul><h5 id="숫자가-아닌-연산-가능한-요소"><a href="#숫자가-아닌-연산-가능한-요소" class="headerlink" title="숫자가 아닌 연산 가능한 요소"></a>숫자가 아닌 연산 가능한 요소</h5><ul><li>색상</li><li>문자열의 연결<br><br></li></ul><h3 id="3-가져오기-import"><a href="#3-가져오기-import" class="headerlink" title="3. 가져오기(import)"></a>3. 가져오기(import)</h3><p>@import 디렉티브를 사용하면 외부에서 SASS(SCSS), CSS 파일을 가져올 수 있습니다.<br>이렇게 가져온 파일은 모두 단일 CSS 파일로 병합되어 출력 됩니다.</p><h5 id="SCSS-10"><a href="#SCSS-10" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style.scss</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"reset.scss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"common.scss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"layout.scss"</span>;</span><br></pre></td></tr></table></figure><p>위의 구조를 컴파일하는 경우 reset, common, layout을 합쳐놓은 style이 컴파일 됨과 동시에 reset, common, layout모두 css파일로 함께 컴파일 됩니다.<br><br></p><h4 id="partial-파일분할"><a href="#partial-파일분할" class="headerlink" title="partial(파일분할)"></a>partial(파일분할)</h4><p>규모가 큰 서비스라면 파일단위로 나누어 관리하는 것이 더 편리할 수 있습니다.  단독으로 사용되지 않는 파일들은 파일 이름 앞에 ‘_’를 붙여 작성하면 컴파일하지 않습니다.</p><h5 id="SCSS-11"><a href="#SCSS-11" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style.scss</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_reset.scss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_common.scss"</span>;</span><br><span class="line">@<span class="keyword">import</span> <span class="string">"_layout.scss"</span>;</span><br></pre></td></tr></table></figure><p>위의 구조라면 reset, common, layout을 합쳐놓은 style만이 컴파일 됩니다.</p><blockquote><p>컴파일 도구에서도 컴파일 되지 않을 파일들을 설정할 수 있지만 파일의 이름만으로 구조와 목적을 이해할 수 있다는 점을 생각하면 파일명에  ‘_’를 붙여 사용하는 것이 좋습니다.</p></blockquote><p><br></p><h3 id="4-확장-extend"><a href="#4-확장-extend" class="headerlink" title="4. 확장(extend)"></a>4. 확장(extend)</h3><p>@extend 디렉티브는 정의 되어 있는 셀렉터(플레이스홀더)의 속성을 그대로 가져옵니다.</p><h5 id="SCSS-12"><a href="#SCSS-12" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// placeholder는 @extend될때만 사용</span></span><br><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">  @<span class="keyword">extend</span> .box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-6"><a href="#컴파일-된-CSS-6" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>, <span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="placeholder"><a href="#placeholder" class="headerlink" title="placeholder"></a>placeholder</h4><p>셀렉터는 아니지만 속성과 값을 정의해놓은 것으로 이름의 앞에 “<strong>%</strong>“ 를 붙여 작성합니다.<br>셀렉터가 아니기 때문에 @extend 디렉티브를 통해 사용하는 경우에만 출력 됩니다.</p><h5 id="SCSS-13"><a href="#SCSS-13" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// placeholder는 @extend될때만 사용</span></span><br><span class="line">%box&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">  @<span class="keyword">extend</span> %box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-7"><a href="#컴파일-된-CSS-7" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="5-흐름제어"><a href="#5-흐름제어" class="headerlink" title="5. 흐름제어"></a>5. 흐름제어</h3><h4 id="조건문-if-else-if-else"><a href="#조건문-if-else-if-else" class="headerlink" title="조건문(@if, @else if, @else)"></a>조건문(@if, @else if, @else)</h4><p>조건문은 조건 식이 참인 경우 블록의 내용을 포함시킵니다.</p><h5 id="SCSS-14"><a href="#SCSS-14" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$width</span>: <span class="number">300px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.block</span>&#123;</span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$width</span> &lt; 200 &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  &#125; @<span class="keyword">else</span> if <span class="variable">$width</span> &lt; 250 &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-8"><a href="#컴파일-된-CSS-8" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="for"><a href="#for" class="headerlink" title="@for"></a>@for</h4><p>@for는 순차적으로 반복되는 작업에 사용합니다.</p><h5 id="SCSS-15"><a href="#SCSS-15" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">for</span> <span class="variable">$i</span> from 1 through 2 &#123;</span><br><span class="line">    <span class="selector-class">.list</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">        <span class="attribute">background-image</span>:url(img/bg-list#&#123;<span class="variable">$i</span>&#125;.jpg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-9"><a href="#컴파일-된-CSS-9" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list1.jpg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list2.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="each"><a href="#each" class="headerlink" title="@each"></a>@each</h4><p>@each는 javascript의 for in문과 유사한 형태로 리스트를 순회하여 반복 합니다.</p><h5 id="SCSS-16"><a href="#SCSS-16" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$animals</span>: (puma, sea-slug, egret, salamander);</span><br><span class="line"></span><br><span class="line">@<span class="keyword">each</span> <span class="variable">$animal</span> in <span class="variable">$animals</span> &#123;</span><br><span class="line">  .#&#123;<span class="variable">$animal</span>&#125;-<span class="attribute">icon</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: url(<span class="string">'/images/bg-#&#123;$animal&#125;.png'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-10"><a href="#컴파일-된-CSS-10" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.puma-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/bg-puma.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sea-slug-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/bg-sea-slug.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.egret-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/bg-egret.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.salamander-icon</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"/images/bg-salamander.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="while"><a href="#while" class="headerlink" title="@while"></a>@while</h4><p>@while은 조건이 거짓일때까지 반복되는 반복문 입니다.</p><h5 id="SCSS-17"><a href="#SCSS-17" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$i</span>: <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">while</span> <span class="variable">$i</span> &gt; 0 &#123;</span><br><span class="line">    <span class="selector-class">.list</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">2em</span> * <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// $i의 값에 -1</span></span><br><span class="line">    <span class="variable">$i</span>: <span class="variable">$i</span> - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-11"><a href="#컴파일-된-CSS-11" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">4em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="6-믹스인"><a href="#6-믹스인" class="headerlink" title="6. 믹스인"></a>6. 믹스인</h3><h4 id="mixin-mixin"><a href="#mixin-mixin" class="headerlink" title="mixin(@mixin)"></a>mixin(@mixin)</h4><p>@mixin은 @extend하여 사용하던 것과 유사하지만 매개변수(인자)와 @content를 활용하여 더 사용하면 더 강력한 기능을 제공합니다.<br>mixin의 선언은 @mixin으로 사용은 @include 디렉티브를 사용합니다.</p><h5 id="기본적인-mixin의-사용"><a href="#기본적인-mixin의-사용" class="headerlink" title="기본적인 mixin의 사용"></a>기본적인 mixin의 사용</h5><h5 id="SCSS-18"><a href="#SCSS-18" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> section &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">  &amp;<span class="selector-class">.on</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> section;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-12"><a href="#컴파일-된-CSS-12" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.section</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section</span><span class="selector-class">.on</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="매개변수를-이용한-mixin의-사용"><a href="#매개변수를-이용한-mixin의-사용" class="headerlink" title="매개변수를 이용한 mixin의 사용"></a>매개변수를 이용한 mixin의 사용</h5><h5 id="SCSS-19"><a href="#SCSS-19" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 매개변수 선언 시 값을 넣으면 기본 값으로 사용되며 값이 null인 경우에는 선언되지 않습니다.</span></span><br><span class="line">@<span class="keyword">mixin</span> section(<span class="variable">$width</span>, <span class="variable">$height</span>:<span class="number">200px</span>, <span class="variable">$border</span>:null) &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">$height</span>;</span><br><span class="line">  <span class="attribute">border</span>:<span class="variable">$border</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section1</span>&#123;</span><br><span class="line">  <span class="comment">// 매개변수는 변수명 없이 순서대로 넣거나</span></span><br><span class="line">  @<span class="keyword">include</span> section(<span class="number">100px</span>, 100px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section2</span>&#123;</span><br><span class="line">  <span class="comment">// 매개변수는 변수명을 포함하여 순서에 상관없이 넣을 수 있습니다.</span></span><br><span class="line">  @<span class="keyword">include</span> section(<span class="variable">$height</span>:<span class="number">50px</span>, <span class="variable">$width</span>:<span class="number">100px</span>, <span class="variable">$border</span>:<span class="number">1px</span> solid red);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-13"><a href="#컴파일-된-CSS-13" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.section1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="가변인수"><a href="#가변인수" class="headerlink" title="가변인수"></a>가변인수</h5><p>인수의 갯수가 불확실한 경우 사용할 수 있으며 가변 인수는 매개변수 뒤에 ‘…’을 붙여줍니다.</p><h5 id="SCSS-20"><a href="#SCSS-20" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> font (<span class="variable">$style</span>: normal, <span class="variable">$weight</span>: normal, <span class="variable">$size</span>: 16px, <span class="variable">$family</span>: sans-serif) &#123;</span><br><span class="line">  <span class="attribute">font</span>: &#123;</span><br><span class="line">    style: <span class="variable">$style</span>;</span><br><span class="line">    weight: <span class="variable">$weight</span>;</span><br><span class="line">    size: <span class="variable">$size</span>;</span><br><span class="line">    family: <span class="variable">$family</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text1</span>&#123;</span><br><span class="line">  <span class="comment">// 매개변수 순서와 개수에 맞게 전달</span></span><br><span class="line">  <span class="variable">$font-values</span>: italic, bold, <span class="number">16px</span>, sans-serif;</span><br><span class="line">  @<span class="keyword">include</span> font(<span class="variable">$font-values</span>...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.text2</span>&#123;</span><br><span class="line">  <span class="comment">// 필요한 값만 키워드 인수로 변수에 담아 전달</span></span><br><span class="line">  <span class="variable">$font-values</span>: (style: italic, size: <span class="number">22px</span>);</span><br><span class="line">  @<span class="keyword">include</span> font(<span class="variable">$font-values</span>...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-14"><a href="#컴파일-된-CSS-14" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text1</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text2</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가변으로 선언한 인수는 그 자체로 리스트로 인식됩니다.</p><h5 id="SCSS-21"><a href="#SCSS-21" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> make-list(<span class="variable">$args</span>...)&#123;</span><br><span class="line">  <span class="comment">// 리스트로 인식되기 때문에 @each를 사용할 수 있음</span></span><br><span class="line">  @<span class="keyword">each</span> <span class="variable">$i</span> in <span class="variable">$args</span> &#123;</span><br><span class="line">    &amp;<span class="selector-class">.list</span>#&#123;<span class="variable">$i</span>&#125; &#123;</span><br><span class="line">      <span class="attribute">background-image</span>:url(img/bg-list#&#123;<span class="variable">$i</span>&#125;.jpg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> make-list(<span class="number">1</span>, 2, 3, 4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-15"><a href="#컴파일-된-CSS-15" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list1</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list1.jpg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list2.jpg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list3</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list3.jpg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.list4</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(img/bg-list4.jpg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="mixin안에서-mixin의-사용"><a href="#mixin안에서-mixin의-사용" class="headerlink" title="mixin안에서 mixin의 사용"></a>mixin안에서 mixin의 사용</h5><h5 id="SCSS-22"><a href="#SCSS-22" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> section(<span class="variable">$width</span>:<span class="number">200px</span>, <span class="variable">$height</span>:<span class="number">200px</span>) &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="variable">$width</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="variable">$height</span>;</span><br><span class="line">  <span class="comment">// 먼저 선언되지 않아도 참조할 수 있습니다.</span></span><br><span class="line">  @<span class="keyword">include</span> border;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">mixin</span> border(<span class="variable">$color</span>:red) &#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section1</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> section(<span class="number">100px</span>, 100px);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.section2</span>&#123;</span><br><span class="line">  @<span class="keyword">include</span> section(<span class="variable">$height</span>:<span class="number">50px</span>, <span class="variable">$width</span>:<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-16"><a href="#컴파일-된-CSS-16" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.section1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.section2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="7-함수"><a href="#7-함수" class="headerlink" title="7. 함수"></a>7. 함수</h3><p>함수는 mixin과 달리 <strong>값</strong>(지정된 스타일이 아님) 을 @return 디렉티브를 통해 반환 합니다.</p><h5 id="SCSS-23"><a href="#SCSS-23" class="headerlink" title="SCSS"></a>SCSS</h5><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@function half(<span class="variable">$num</span>) &#123;</span><br><span class="line">  @return <span class="variable">$num</span> / 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:&#123;</span><br><span class="line">    left: -(half(<span class="number">300px</span>));</span><br><span class="line">    <span class="attribute">top</span>: -(half(<span class="number">300px</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="컴파일-된-CSS-17"><a href="#컴파일-된-CSS-17" class="headerlink" title="컴파일 된 CSS"></a>컴파일 된 CSS</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><blockquote><p>참고</p><ul><li>HEROPY  Tech - <a href="https://heropy.blog/)https://heropy.blog/2018/01/31/sass" target="_blank" rel="noopener">https://heropy.blog/)https://heropy.blog/2018/01/31/sass</a></li><li>Wireframe - <a href="https://soooprmx.com/archives/5059" target="_blank" rel="noopener">https://soooprmx.com/archives/5059</a></li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SASS-SCSS&quot;&gt;&lt;a href=&quot;#SASS-SCSS&quot; class=&quot;headerlink&quot; title=&quot;SASS(SCSS)&quot;&gt;&lt;/a&gt;SASS(SCSS)&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://sass-lang.com/assets/i
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="scss" scheme="http://windfanta.github.io/blog/categories/study/scss/"/>
    
    
  </entry>
  
  <entry>
    <title>(vue.js) - 07 컴포넌트</title>
    <link href="http://windfanta.github.io/blog/2018/02/14/study-vue-7/"/>
    <id>http://windfanta.github.io/blog/2018/02/14/study-vue-7/</id>
    <published>2018-02-14T07:16:41.000Z</published>
    <updated>2018-07-30T01:01:30.084Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Vue-js-2-프로그래밍"><a href="#Vue-js-2-프로그래밍" class="headerlink" title="[ Vue.js 2 프로그래밍  ]"></a>[ Vue.js 2 프로그래밍  ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12320270" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=12320270</a>)</p><hr><p><br></p><h1 id="7-컴포넌트"><a href="#7-컴포넌트" class="headerlink" title="7. 컴포넌트"></a>7. 컴포넌트</h1><p><br></p><h2 id="7-1-컴포넌트란"><a href="#7-1-컴포넌트란" class="headerlink" title="7.1 컴포넌트란?"></a>7.1 컴포넌트란?</h2><hr><p>컴포넌트는 vue.js에서 가장 강력한 기능 중 하나 입니다. 기본 html엘리먼트를 확장해 재 사용 가능한 코드를 캡슐화 하는 데 이바지합니다. 좀 더 상위 수준에서 보면 컴포넌트는 vue.js의 컴파일러가 특정 동작을 추가할 사용자 정의 엘리먼트에 해당합니다.</p><p><br></p><h2 id="7-2-컴포넌트-사용하기"><a href="#7-2-컴포넌트-사용하기" class="headerlink" title="7.2 컴포넌트 사용하기"></a>7.2 컴포넌트 사용하기</h2><hr><p>컴포넌트를 사용하려면 먼저 컴포넌트를 등록해야 합니다. <strong>컴포넌트를 등록하는 한 가지 방법은 Vue.component 메서드를 사용하고 이때 태그(tag)와 생성자(constructor)를 전달하는 것 입니다.</strong><br>태그는 컴포넌트의 이름으로 생성자를 옵션으로 생각하면 됩니다. template옵션은 생성자 내부에 있으며 이곳에 다른 옵션도 추가할 수 있습니다.</p><p><strong>story 컴포넌트 등록</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'story'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  template: <span class="string">'&lt;h1&gt;My horse is amazing!&lt;/h1&gt;'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong> story 컴포넌트 사용 </strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 컴포넌트는 재사용할 수 있습니다. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>사용자 정의 컴포넌트에 아무 이름이나 지정해도 되지만 일반적으로 고유한 이름을 사용해 나중에 추가될 수 있는 실제 html태그와 충돌하지 않도록 예방하는 것이 좋습니다.</p></blockquote><blockquote><p>참고<br>Vue.js 컴포넌트 가이드 - <a href="http://vuejs.kr/jekyll/update/2017/03/13/vuejs-component-style-guide/" target="_blank" rel="noopener">http://vuejs.kr/jekyll/update/2017/03/13/vuejs-component-style-guide/</a></p></blockquote><p><br></p><h2 id="7-3-템플릿"><a href="#7-3-템플릿" class="headerlink" title="7.3 템플릿"></a>7.3 템플릿</h2><hr><p>컴포넌트 템플릿을 선언하는 데는 여러 가지 방법이 있습니다. 이전에 사용한 인라인 템플릿 방식을 사용하면 템플릿 코드가 금장 지저분해집니다.</p><p>인라인템플릿이 아닌 다른 방법은 type이 text/template으로 설정되고 id가 story-template로 설정된 script 태그를 생성하는 것입니다. 이 템플릿을 사용하려면 컴포넌트의 template에서 이 스크립트에 대한 선택자를 참조해야 합니다.</p><p><strong>템플릿의 사용</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/gkwsvsu9/3/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p>제가(책의 저자가)가장 선호하는 template 정의 방법은 template html태그를 만들고 여기에 id를 지정하는 것 입니다. 이렇게하면 이전과 마찬가지로 선택자를 참조할 수 있습니다.</p><p><strong>template html태그를 통한 템플릿사용</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/ohv4nf4e/1/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="7-4-프로퍼티"><a href="#7-4-프로퍼티" class="headerlink" title="7.4 프로퍼티"></a>7.4 프로퍼티</h2><hr><p>여러 개의 컴포넌트 인스턴스를 이용해 항상 같은 내용이 아닌 원하는 내용을 표시하도록 만들어 보겠습니다.</p><p><strong>template(html)</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"story-template"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; plot &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>component등록</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'story'</span>, &#123;</span><br><span class="line">  props: [<span class="string">'plot'</span>],</span><br><span class="line">  template: <span class="string">'#story-template'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><strong>사용</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">plot</span>=<span class="string">"my horse is amazing."</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">plot</span>=<span class="string">"narwhals invented shish kebab."</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">story</span> <span class="attr">plot</span>=<span class="string">"the dark side of the force is stronger."</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/zdatdxfz/3/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe><p>컴포넌트는 프로퍼티를 두 개 이상 가질 수 있습니다. 예를 들어 모든 이야기에 대해 줄거리와 작가를 표시하려면 writer도 함께 전달해야 합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">story</span> <span class="attr">plot</span>=<span class="string">"my horse is amazing"</span> <span class="attr">writer</span>=<span class="string">"mr. weeble"</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br></pre></td></tr></table></figure><p>위와 같이 프로퍼티가 많아져서 엘리먼트가 지저분해지면 객체를 전달하고 해당 객체의 프로퍼티를 표시할 수 있습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">story</span> <span class="attr">v-bind:story</span>=<span class="string">"&#123;plot: 'my horse is amazing!', writer: 'mr. weeble'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">story</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/6wna5j8j/3/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe><blockquote><p>정보</p><ul><li>v-bind는 하나 이상의 속성 또는 컴포넌트 프로퍼티를 표현식에 동적으로 바인딩하는 데 사용</li><li>story 프로퍼티는 문자열(String)이 아닌 자바스크립트 객체(Object)이므로 story=”…”가 아닌 v-bind:story=”…”을 사용해 story 프로퍼티를 전달된 객체와 바인딩 합니다.</li><li>v-bind의 축약형은 :이므로 이제 :story=”…”와 같이 사용합니다.</li></ul></blockquote><h2 id="7-5-재사용성"><a href="#7-5-재사용성" class="headerlink" title="7.5 재사용성"></a>7.5 재사용성</h2><p><strong>사용 예</strong><br><!-- 진행 중 --><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/pjxr40u7/13/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="7-6-종합-예제"><a href="#7-6-종합-예제" class="headerlink" title="7.6 종합 예제"></a>7.6 종합 예제</h2><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/1780en59/16/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe><p>위의 예제에서 favorite버튼을 클릭하면 favorite데이터 값(new Vue에서의)을 갱신하여 모든 favorite버튼을 숨겨지는 것을 의도하였으나<br>기본적으로 모든 프로퍼티는 자식 프로퍼티와 부모 프로퍼티 사이에서 단방향 바인딩을 형성합니다. 부모 프로퍼티가 갱신되면 자식에게 전달되지만 반대 방향으로는 전달되지 않기때문에 의도대로 동작하지 않습니다.<br>(지금까지의 내용으로는 자식과 부모의 데이터를 동기화할 수 없습니다)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Vue-js-2-프로그래밍&quot;&gt;&lt;a href=&quot;#Vue-js-2-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;[ Vue.js 2 프로그래밍  ]&quot;&gt;&lt;/a&gt;[ Vue.js 2 프로그래밍  ]&lt;/h1&gt;&lt;p&gt;(&lt;a hre
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="vue.js" scheme="http://windfanta.github.io/blog/categories/study/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>(vue.js) - 06 필터</title>
    <link href="http://windfanta.github.io/blog/2018/02/13/study-vue-6/"/>
    <id>http://windfanta.github.io/blog/2018/02/13/study-vue-6/</id>
    <published>2018-02-13T11:16:52.000Z</published>
    <updated>2018-07-30T01:01:30.083Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="Vue-js-2-프로그래밍"><a href="#Vue-js-2-프로그래밍" class="headerlink" title="[ Vue.js 2 프로그래밍  ]"></a>[ Vue.js 2 프로그래밍  ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=12320270" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=12320270</a>)</p><hr><p><br></p><h1 id="6-필터"><a href="#6-필터" class="headerlink" title="6. 필터"></a>6. 필터</h1><p><br></p><h2 id="6-1-필터링된-결과"><a href="#6-1-필터링된-결과" class="headerlink" title="6.1 필터링된 결과"></a>6.1 필터링된 결과</h2><hr><p>간혹 원본 데이터를 변경하거나 초기화하지 않으면서 필터링 된 배열을 표시해야할 때가 있습니다.</p><p><strong>methods를 활용하여 이름으로 필터링 하기</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/0pxgm1dt/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="6-1-1-계산된-프로퍼티-computed-properties-사용"><a href="#6-1-1-계산된-프로퍼티-computed-properties-사용" class="headerlink" title="6.1.1 계산된 프로퍼티(computed properties) 사용"></a>6.1.1 계산된 프로퍼티(computed properties) 사용</h2><p>계산된 프로퍼티로도 배열을 필터링 할 수 있습니다. 계산된 프로퍼티는 전부 자바스크립트로 구현하므로 섬세한 제어와 유연성을 확보할 수 있고 어디서든 필터링된 결과에 접근할 수 있습니다. 예를 들어 필터링된 배열의 길이를 코드 상의 어드 곳에서도 가져올 수 있습니다.</p><p><strong>계산된 프로퍼티를 활용하여 득표수(upvotes)로 필터링 하기</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/ubyut7xv/2/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>v-model을 사용하여 동적으로 필터링하기</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/3v3hdfg5/2/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>셀렉트 박스에 v-model을 사용하여 동적으로 필터링하기</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/q0xgsem5/1/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="6-2-결과-정렬"><a href="#6-2-결과-정렬" class="headerlink" title="6.2 결과 정렬"></a>6.2 결과 정렬</h2><p>이따금 어떤 기준에 따라 정렬된 배열을 표시해야 할 때가 있습니다. 계산된 프로퍼티를 이용해 각 이야기의 투표 수에 따라 정렬된 배열을 표시할 수 있습니다. 배열의 정렬하기 위해 자바스크립트 내장 함수인 sort를 사용하겠습니다</p><blockquote><p>Array.sort() - <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort</a></p></blockquote><p><strong>투표 수에 따른 정렬1</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/jfas69gv/3/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p>배열을 upvotes에 값에 따라 정렬하긴 했지만 인기 있는 이야기가 먼저 나와야하는 데 기대했던 것과 다릅니다.<br>정렬된 배열의 순서를 변경하기 위해 사용한 sort 함수를 살펴 봅시다. 자바스크립트의 sort(compareFunction)에서 compareFunction이 전달되면 compareFunction의 반환 값에 따라 배열 요소가 정렬됩니다.<br>a와 b라는 두 요소를 비교 한다면</p><blockquote><ul><li>compareFunction(a, b)가 0보다 작으면 a를 b보다 낮은 인덱스(앞으로)로 정렬</li><li>compareFunction(a, b)가 0이면 a와 b의 위치를 변경하지 않음</li><li>compareFunction(a, b)가 0보다 크면 b를 a보다 낮은 인덱스(앞으로)로 정렬</li></ul></blockquote><p>결국 오름차순에서 내림차순으로 순서를 변경하려면 반환 값에 -1을 곱하면 됩니다.</p><p><strong>투표 수에 따른 정렬2</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/hja6rbas/1/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="6-3-사용자-정의-필터"><a href="#6-3-사용자-정의-필터" class="headerlink" title="6.3 사용자 정의 필터"></a>6.3 사용자 정의 필터</h2><hr><p>사용자 정의 필터는 html코드를 더럽히는 일 없이 사용할 수 있으며 전역의 Vue.filter()를 이용해 처리된 값을 반환하는 fliterFunction을 전달하면 됩니다.</p><blockquote><p>공식 가이드의 filter 소개 - <a href="https://kr.vuejs.org/v2/guide/filters.html" target="_blank" rel="noopener">https://kr.vuejs.org/v2/guide/filters.html</a></p></blockquote><p><strong>사용자 정의 필터</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/cnnkmccv/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="6-4-유틸리티-라이브러리"><a href="#6-4-유틸리티-라이브러리" class="headerlink" title="6.4 유틸리티 라이브러리"></a>6.4 유틸리티 라이브러리</h2><hr><p>좀 더 개선된 방법으로 데이터를 정렬/필터/색인하기 위해서는 자바스크립트 유틸리티 라이브러리를 사용하는 것을 고려해볼 필요가 있습니다.<br>이미 LoDash, UnderScore, Sugar등 훌륭한 라이브러리가 준비돼 있습니다.</p><blockquote><ul><li>LoDash(<a href="https://lodash.com/" target="_blank" rel="noopener">https://lodash.com/</a>)</li><li>underScore.js(<a href="http://underscorejs.org/" target="_blank" rel="noopener">http://underscorejs.org/</a>)</li><li>sugar.js(<a href="https://sugarjs.com/" target="_blank" rel="noopener">https://sugarjs.com/</a>)</li></ul></blockquote><p><strong>lodash를 사용하여 정렬1</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/9jh877c9/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>lodash를 사용하여 정렬2(버튼추가)</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/zvLhfo3r/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>lodash를 사용하여 정렬2(셀렉트박스, 버튼추가)</strong><br><iframe scrolling="no" width="100%" height="300px" src="//jsfiddle.net/SUNGMIN_SHIN/pvmx6bp4/embedded/html,js,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;Vue-js-2-프로그래밍&quot;&gt;&lt;a href=&quot;#Vue-js-2-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;[ Vue.js 2 프로그래밍  ]&quot;&gt;&lt;/a&gt;[ Vue.js 2 프로그래밍  ]&lt;/h1&gt;&lt;p&gt;(&lt;a hre
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="vue.js" scheme="http://windfanta.github.io/blog/categories/study/vue-js/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - PART3 - CH04 ~ 05 Date, Array 클래스</title>
    <link href="http://windfanta.github.io/blog/2018/02/12/study-jquery-8/"/>
    <id>http://windfanta.github.io/blog/2018/02/12/study-jquery-8/</id>
    <published>2018-02-12T10:19:03.000Z</published>
    <updated>2018-07-30T01:01:30.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="PART3-CH04-Date-클래스"><a href="#PART3-CH04-Date-클래스" class="headerlink" title="PART3 - CH04 Date 클래스"></a>PART3 - CH04 Date 클래스</h1><hr><p>Date클래스는 날짜 및 시간과 관련된 다양한 기능을 제공합니다. Date클래스는 다른 자바스크립트 코어 클래스만큼 많이 사용하진 않지만 기본적인 클래스인 만큼 한번 정도는 살펴봐야 합니다.</p><p><br></p><h2 id="lesson01-Date-클래스-소개"><a href="#lesson01-Date-클래스-소개" class="headerlink" title="lesson01 Date 클래스 소개"></a>lesson01 Date 클래스 소개</h2><hr><h3 id="01-Date-클래스란"><a href="#01-Date-클래스란" class="headerlink" title="01_Date 클래스란?"></a>01_Date 클래스란?</h3><p>Date 클래스에는 날짜 및 시간과 관련된 유용한 기능이 담겨있습니다. Date클래스는 실무에서 다음과 같은 경우 유용하게 사용됩니다.</p><blockquote><ul><li>다이어리 같은 프로젝트에서 달력을 만들 때</li><li>현재 시간을 출력하는 시계를 만들 때에도 사용</li><li>슈팅 게임을 만드는 경우 플레이 경과 시간을 알아낼 때에도 사용합니다.</li><li>D-Day를 출력할 때에도 사용합니다.</li></ul></blockquote><p><br></p><h3 id="02-주요-기능"><a href="#02-주요-기능" class="headerlink" title="02_주요 기능"></a>02_주요 기능</h3><p><strong>메서드 목록</strong></p><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p></blockquote><p><br></p><h2 id="lesson02-핵심-내용"><a href="#lesson02-핵심-내용" class="headerlink" title="lesson02 핵심 내용"></a>lesson02 핵심 내용</h2><hr><p><strong>날짜 구하기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/70oe25yz/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>좀 더 나은 날짜구하기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/tkgafvxb/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h1 id="PART3-CH05-Array-클래스"><a href="#PART3-CH05-Array-클래스" class="headerlink" title="PART3 - CH05 Array 클래스"></a>PART3 - CH05 Array 클래스</h1><hr><p>배열 역시 배열 리터럴([1, 2, 3]과 같은 형태)로 많이 사용햇기 때문에 잘 모르겠지만 사실 배열 리터럴은 자동으로 배열(Array)클래스로 변환 돼 사용됩니다. 또 배열 클래스는 자바스크립트 코어 라이브러리 중 사용 빈도가 가장 높은 클래스 중 하나 입니다.</p><h3 id="01-Array-클래스란"><a href="#01-Array-클래스란" class="headerlink" title="01_Array 클래스란?"></a>01_Array 클래스란?</h3><p>Array 클래스는 배열을 만드는 기능부터, 추가, 삭제, 찾기 등의 유용한 기능이 담겨있습니다. Array 클래스는 실무에서 다음과 같은 경우 유용하게 사용됩니다.</p><blockquote><p>-게시판에서 게시물 리스트를 출력할 때 배열이 사용됩니다.<br>-갤러리에서 이미지 리스트를 출력할 때 배열이 사용됩니다.<br>-웹 사이트의 메뉴를 만들 때 메뉴 항목을 출력할 때에도 배열을 사용 합니다.</p></blockquote><p><br></p><h3 id="02-주요-기능-1"><a href="#02-주요-기능-1" class="headerlink" title="02_주요 기능"></a>02_주요 기능</h3><blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p></blockquote><p><br></p><h2 id="lesson02-핵심-내용-1"><a href="#lesson02-핵심-내용-1" class="headerlink" title="lesson02 핵심 내용"></a>lesson02 핵심 내용</h2><hr><p>실무에서는 Array 클래스를 활용해 다음과 같은 기능을 구현할 수 있어야 합니다.</p><blockquote><ul><li>배열 만들기</li><li>배열 요소 개수 알아내기</li><li>특정 위치의 배열 요소 접근하기</li><li>배열을 문자열로 만들기</li><li>문자열을 배열로 만들기</li><li>특정 위치에 배열 요소 추가</li><li>특정 위치의 배열 요소 삭제</li><li>정렬하기</li></ul></blockquote><h3 id="01-배열-만들기"><a href="#01-배열-만들기" class="headerlink" title="01_배열 만들기"></a>01_배열 만들기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리터럴 방식</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'사'</span>, <span class="string">'오'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스 방식</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'사'</span>, <span class="string">'오'</span>);</span><br></pre></td></tr></table></figure><p><strong>배열 선언 및 추가, 삭제</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/5f67m7zm/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>splice 메서드(<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/splice</a>)</p></blockquote><p><strong>배열 정렬하기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/a6tm8m4g/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>배열 총 합 구하기</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/zzLfjju4/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong>배열의 사용 예</strong><br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/34r2moae/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - PART2 - CH03 함수 중급</title>
    <link href="http://windfanta.github.io/blog/2018/01/31/study-jquery-7/"/>
    <id>http://windfanta.github.io/blog/2018/01/31/study-jquery-7/</id>
    <published>2018-01-31T10:20:27.000Z</published>
    <updated>2018-07-30T01:01:30.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="PART2-CH03-함수-중급"><a href="#PART2-CH03-함수-중급" class="headerlink" title="PART2 - CH03 함수 중급"></a>PART2 - CH03 함수 중급</h1><hr><p><br></p><h2 id="lesson01-변수와-함수의-관계"><a href="#lesson01-변수와-함수의-관계" class="headerlink" title="lesson01 변수와 함수의 관계"></a>lesson01 변수와 함수의 관계</h2><hr><h3 id="01-변수에-함수를-저장한-경우"><a href="#01-변수에-함수를-저장한-경우" class="headerlink" title="01_변수에 함수를 저장한 경우"></a>01_변수에 함수를 저장한 경우</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 hello 선언</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(name + <span class="string">'님 환영합니다.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 함수 hello 실행</span></span><br><span class="line">hello(<span class="string">'홍길동'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수 func에 함수 hello를 할당</span></span><br><span class="line"><span class="keyword">var</span> func = hello;</span><br><span class="line"><span class="comment">// 변수 func(=== hello)를 실행</span></span><br><span class="line">func(<span class="string">'고길동'</span>);</span><br></pre></td></tr></table></figure><h3 id="02-매개변수-값으로-함수-사용하기"><a href="#02-매개변수-값으로-함수-사용하기" class="headerlink" title="02_매개변수 값으로 함수 사용하기"></a>02_매개변수 값으로 함수 사용하기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 hello1 선언</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'hello.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 hello2 선언</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'안녕하세요.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 execute(매개변수로 값으로 함수를 받을 함수)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  func();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute를 통해 함수 hello1, hello2를 실행</span></span><br><span class="line">execute(hello1);</span><br><span class="line">execute(hello2);</span><br></pre></td></tr></table></figure><p>&lt; 매개변수로 함수를 전달하여 날짜를 출력하는 예제 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/48nkfvto/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h3 id="03-리턴-값으로-함수사용하기"><a href="#03-리턴-값으로-함수사용하기" class="headerlink" title="03_리턴 값으로 함수사용하기"></a>03_리턴 값으로 함수사용하기</h3><p>함수는 어떤 값(데이터)든 리턴할 수 있습니다. 이는 리턴 값으로 함수를 리턴할 수 있다는 의미이기도 합니다.</p><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/fp261Lyw/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><p><br></p><h2 id="lesson02-함수-리터럴과-익명-함수"><a href="#lesson02-함수-리터럴과-익명-함수" class="headerlink" title="lesson02 함수 리터럴과 익명 함수"></a>lesson02 함수 리터럴과 익명 함수</h2><hr><h3 id="01-리터럴이란"><a href="#01-리터럴이란" class="headerlink" title="01_리터럴이란?"></a>01_리터럴이란?</h3><p>데이터를 만드는 방법은 크게 리터럴 방식과 객체 방식 두 가지가 있습니다.<br> (리터럴은 코드 상에서 데이터를 표현하는 방식을 말합니다.)</p><blockquote><p>리터럴부터 클로저까지 - <a href="http://programmingsummaries.tistory.com/92" target="_blank" rel="noopener">http://programmingsummaries.tistory.com/92</a></p></blockquote><p>&lt; 데이터 선언방식에 따른 차이 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/yL6wjkrg/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>함수표현, 선언 - <a href="http://insanehong.kr/post/javascript-function/" target="_blank" rel="noopener">http://insanehong.kr/post/javascript-function/</a></p></blockquote><p><br></p><h3 id="02-함수-리터럴이란"><a href="#02-함수-리터럴이란" class="headerlink" title="02_함수 리터럴이란?"></a>02_함수 리터럴이란?</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리터럴 방식으로 함수 선언(함수 표현식)</span></span><br><span class="line"><span class="keyword">var</span> hello1 = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(name + <span class="string">'님 안녕하세요'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 일반적인 방식으로 함수 선언(함수 선언식)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  alert(name + <span class="string">'님 안녕하세요'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello1(<span class="string">'홍길동'</span>);</span><br><span class="line">hello1(<span class="string">'고길동'</span>);</span><br></pre></td></tr></table></figure><p>&lt; 함수 선언 방식에 따른 호이스팅 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/4b7612cj/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h3 id="03-익명함수란"><a href="#03-익명함수란" class="headerlink" title="03_익명함수란?"></a>03_익명함수란?</h3><p>익명함수는 이름을 지정하지 않은 함수를 의미합니다.</p><p>&lt; 함수 선언식과 표현식에 따른 호이스팅 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/4b7612cj/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 익명 함수의 사용 예  &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/xw4b1sfr/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson03-함수-정의-방법-4가지"><a href="#lesson03-함수-정의-방법-4가지" class="headerlink" title="lesson03 함수 정의 방법 4가지"></a>lesson03 함수 정의 방법 4가지</h2><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function 키워드의 사용(함수 선언식)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'안녕1'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 리터럴(함수표현식)의 사용</span></span><br><span class="line"><span class="keyword">var</span> hello2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'안녕2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function 객체를 통한 생성(거의 안씀)</span></span><br><span class="line"><span class="keyword">var</span> hello3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"name"</span>, <span class="string">"alert(name)"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 익명함수 확장을 이용한 정의(jQuery 플러그인 제작 시 자주사용)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">&#125;)(<span class="string">'안녕'</span>);</span><br></pre></td></tr></table></figure><p><br></p><h2 id="lesson04-함수-종류"><a href="#lesson04-함수-종류" class="headerlink" title="lesson04 함수 종류"></a>lesson04 함수 종류</h2><hr><h3 id="01-함수-분류"><a href="#01-함수-분류" class="headerlink" title="01_함수 분류"></a>01_함수 분류</h3><blockquote><p>사용자 정의 함수 - 사용자가 필요한 기능을 직접 만든 함수를 말함<br>자바스크립트 코어 함수 - 자바스크립트가 기본적으로 제공하는 함수</p></blockquote><p><br></p><h3 id="02-사용-방법에-다른-함수-종류"><a href="#02-사용-방법에-다른-함수-종류" class="headerlink" title="02_사용 방법에 다른 함수 종류"></a>02_사용 방법에 다른 함수 종류</h3><table><thead><tr><th>함수 종류</th><th>내용</th></tr></thead><tbody><tr><td>일반 함수</td><td>가장 일반적으로 사용한 함수를 말합니다.</td></tr><tr><td>중첩 함수</td><td>함수 안에 함수가 있는 경우 중첩되었다라고하며 이때 함수 안에 있는 함수를 중첩 함수라고 합니다.</td></tr><tr><td>콜백 함수</td><td>함수 실행결과 값을 리턴이 아닌 매개변수로 넘어온 함수를 호출해서 넘겨주는 방식을 콜백이라하며 이때 매개변수로 넘어온 함수를 콜백 함수라고 합니다.</td></tr><tr><td>클로저 함수</td><td>일반적인 함수의 경우 함수 호출에 의해 함수 내부의 실행 구문을 모두 실행하게 되면 함수 내부에서 만든 지역변수가 자동으로 사라지지만 어떤 경우에는 사라지지 않고 남는 경우가 있습니다. 이 현상을 클로저라고 하며 이 현상을 일으키는 함수를 클로저 함수라고 합니다.</td></tr><tr><td>맴버함수(메서드)</td><td>맴버함수는 클래스 내부에 만들어지며 주로 메서드라고 불립니다.</td></tr></tbody></table><p><br></p><h2 id="lesson05-중첩-함수"><a href="#lesson05-중첩-함수" class="headerlink" title="lesson05 중첩 함수"></a>lesson05 중첩 함수</h2><hr><p>중첩함수는 함수 내부에 만들어지는 함수를 중첩 함수라고 부릅니다.<br>중첩함수는 아래와 같은 경우 사용 합니다.</p><p><br></p><h3 id="02-중첩함수는-이럴-때-사용해요"><a href="#02-중첩함수는-이럴-때-사용해요" class="headerlink" title="02_중첩함수는 이럴 때 사용해요"></a>02_중첩함수는 이럴 때 사용해요</h3><p><strong> 내부 전용 함수 </strong><br>함수 내부의 지역변수처럼 함수 내부에서만 사용할 수 있는 것으로 일반적으로는 이름 없는 이벤트 리스너에 많이 사용됩니다.<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/tpqknnxg/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><strong> 중복 코드 또는 코드의 그룹화 </strong><br>함부 내부의 커다란 기능이나 중복 코드를 내부 함수로 만들어 재사용할 때도 중첩함수를 사용합니다.<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/aupat9br/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h3 id="03-중첩함수와-중첩-함수를-포함한-함수와의-관계"><a href="#03-중첩함수와-중첩-함수를-포함한-함수와의-관계" class="headerlink" title="03_중첩함수와 중첩 함수를 포함한 함수와의 관계"></a>03_중첩함수와 중첩 함수를 포함한 함수와의 관계</h3><p>중첩함수의 가장 큰 특징은 중첩 함수에서는 중첩함수를 포함하고 있는 함수의 지역변수에 접근해서 사용할 수 있다는 것입니다.</p><p>&lt; 함수 유효범위에 따른 사용 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/666kyoeg/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>위처럼 내부에서는 외부를 참조할 수 있으나 외부에서 내부는 참조할 수 없습니다.</p><p><br></p><h2 id="lesson06-콜백-함수"><a href="#lesson06-콜백-함수" class="headerlink" title="lesson06 콜백 함수"></a>lesson06 콜백 함수</h2><hr><h3 id="01-콜백-함수란"><a href="#01-콜백-함수란" class="headerlink" title="01_콜백 함수란?"></a>01_콜백 함수란?</h3><p>콜백함수는 주로 함수 내부의 처리결과 값을 함수 외부로 내보낼 때 사용하며 일종의 return 문과 비슷한 기능을 한다고 볼 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 콜백 함수의 예</span></span><br><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// callback function</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>&lt; 콜백 함수의 사용 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/r58bjyuo/2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h3 id="03-return-VS-콜백-함수"><a href="#03-return-VS-콜백-함수" class="headerlink" title="03_return VS 콜백 함수"></a>03_return VS 콜백 함수</h3><p>&lt; return을 사용하는 경우 &gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">alert(<span class="string">'두 수의 합은'</span> + result + <span class="string">'입니다.'</span>);</span><br></pre></td></tr></table></figure></p><p>&lt; 콜백 함수를 사용하는 경우 &gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = num1 + num2;</span><br><span class="line">  </span><br><span class="line">  callback(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumAlert</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  alert(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>, sumAlert);</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="04-동기-VS-비동기"><a href="#04-동기-VS-비동기" class="headerlink" title="04_동기 VS 비동기"></a>04_동기 VS 비동기</h3><p><strong> 동기란? </strong><br>일반적으로 함수가 호출된 후 끝날 때까지 다음 구문을 실행하지 않고 대기하고 있는 경우를 우리는 동기라고 합니다.<br>(즉 실행한 함수가 끝나지 않았다면 다음으로 진행하지 않고 기다리는 형태를 말합니다.)</p><p><strong> 동기란? </strong><br>동기와 반대 되는 개념으로 일반적으로 함수가 호출된 후 끝날 때 까지 기다리지 않고 바로 다음 구문을 실행하는 경우를 비동기라고 합니다.</p><p>&lt; jQuery ajax 사용 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/tpg55n3t/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; jQuery animate callback &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/6Lp5Lmjj/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 콜백 지옥의 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/coL5ytg7/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson07-클로저-함수"><a href="#lesson07-클로저-함수" class="headerlink" title="lesson07 클로저 함수"></a>lesson07 클로저 함수</h2><hr><h3 id="01-클로저란"><a href="#01-클로저란" class="headerlink" title="01_클로저란?"></a>01_클로저란?</h3><p>클로저는 함수 내부에 만든 지역변수가 사라지지 않고 계속해서 값을 유지하고 있는 상태를 말합니다.<br>(함수의 생명주기가 종료되었지만 내부함수가 참조하고 있어 그 함수에 접근할 수 있는 함수라고 설명되기도 합니다.)<br>&lt; 간단한 클로저의 예1 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/qa64me5j/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 간단한 클로저의 예2 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/ret1hjjm/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="03-클로저를-사용하면-좋은-점"><a href="#03-클로저를-사용하면-좋은-점" class="headerlink" title="03_클로저를 사용하면 좋은 점"></a>03_클로저를 사용하면 좋은 점</h3><p>클로저를 사용하면 연관 있는 변수와 기능(중첩 함수)을 하나의 함수로 묶어 독립적으로 실행시킬 수 있다는 것으로 함수 내부에 데이터가 만들어지기 때문에 외부에서 수정할 수 없는 보호된 데이터를 만들 수 있게 됩니다.<br>(객체지향 프로그래밍에서는 이를 private 데이터라고 부른다고 함)</p><blockquote><p>자바스크립트 클로저 쉽게 이해하기 - <a href="http://chanlee.github.io/2013/12/10/understand-javascript-closure/" target="_blank" rel="noopener">http://chanlee.github.io/2013/12/10/understand-javascript-closure/</a></p></blockquote><p><br></p><h2 id="번외-어휘적-유효범위-lexical-scope"><a href="#번외-어휘적-유효범위-lexical-scope" class="headerlink" title="번외 - 어휘적 유효범위(lexical scope)"></a>번외 - 어휘적 유효범위(lexical scope)</h2><hr><p>자바스크립트는 Lexical scope 특성을 지닙니다.<br>Lexical scope란 Scope가 함수 실행시점이 아닌 <strong>함수 정의 시점</strong>에 정해진다는 의미입니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 전역변수 name을 선언하고 값을 'nero'로 할당</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'nero'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapper</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 지역 변수 name를 선언하고 값을 '홍길동'으로 할당</span></span><br><span class="line">  <span class="keyword">var</span> name  = <span class="string">'홍길동'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 함수 log를 실행</span></span><br><span class="line">  log();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// alert으로 무엇이 찍힐까요?</span></span><br><span class="line">wrapper();</span><br></pre></td></tr></table></figure><p>&lt; 확인 1 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/kx1sh06v/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 확인 2 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/wr3e9vce/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>출처 - <a href="https://jae-kwang.github.io/blog/2017/11/13/js-closure/" target="_blank" rel="noopener">https://jae-kwang.github.io/blog/2017/11/13/js-closure/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>처음 만나는 파이썬 - Chapter2</title>
    <link href="http://windfanta.github.io/blog/2018/01/26/study-python-1/"/>
    <id>http://windfanta.github.io/blog/2018/01/26/study-python-1/</id>
    <published>2018-01-26T00:50:55.000Z</published>
    <updated>2018-07-30T01:01:30.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="처음-만나는-파이썬"><a href="#처음-만나는-파이썬" class="headerlink" title="[ 처음 만나는 파이썬 ]"></a>[ 처음 만나는 파이썬 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=11825959" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=11825959</a>)</p><p><br></p><h1 id="Chapter2-파이썬-프로그래밍-시작하기"><a href="#Chapter2-파이썬-프로그래밍-시작하기" class="headerlink" title="Chapter2 - 파이썬 프로그래밍 시작하기"></a>Chapter2 - 파이썬 프로그래밍 시작하기</h1><hr><h3 id="공백의-사용"><a href="#공백의-사용" class="headerlink" title="공백의 사용"></a>공백의 사용</h3><p>파이썬에서는 프로그램을 읽기 쉽게 하려고 공백에 관한 엄격한 규칙을 정해 놓았다. 비유하자면 원고지에 글을 쓸 때 단락을 시작하는 첫 칸은 비워야하는 규칙과 유사한 것으로 프로그램 코드의 각 줄 앞 부분에 넣는 공백을 <strong>인덴트(indent)</strong>라고 한다.<br>(인텐츠가 필수가 아닌 언어도 있으며 그러한 언어의 경우 가독성을 위해 의례적으로 인덴트를 사용하지만 지키지 않아도 에러가 발생하진 않는다.)</p><p><br></p><h2 id="Chapter2-2-파이썬으로-계산하기"><a href="#Chapter2-2-파이썬으로-계산하기" class="headerlink" title="Chapter2-2 파이썬으로 계산하기"></a>Chapter2-2 파이썬으로 계산하기</h2><hr><p>덧셈, 뺄셈<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'덧셈'</span></span><br><span class="line"><span class="number">1128</span> + <span class="number">2344</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'뺄셈'</span></span><br><span class="line"><span class="number">400</span> - <span class="number">330</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'곱셈'</span></span><br><span class="line"><span class="number">10</span> * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'나눗셈'</span></span><br><span class="line"><span class="number">10</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'거듭제곱'</span></span><br><span class="line"><span class="number">2</span>**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'나머지'</span></span><br><span class="line"><span class="number">10</span> % <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><br></p><p>&lt;파이썬의 산술연산자&gt;</p><table><thead><tr><th>산술연산자</th><th>사용법</th><th>뜻</th></tr></thead><tbody><tr><td>+</td><td>1 + 1</td><td>뎃셈</td></tr><tr><td>-</td><td>1 - 1</td><td>뺄셈</td></tr><tr><td>*</td><td>2 * 2</td><td>곱셈</td></tr><tr><td>/</td><td>2 / 2</td><td>나누기</td></tr><tr><td>%</td><td>2 / 1</td><td>나머지(나누기)</td></tr><tr><td>**</td><td>2 ** 2</td><td>거듭제곱</td></tr></tbody></table><p><br></p><h2 id="Chapter2-3-변수-데이터를-편리하게-다루기-위해"><a href="#Chapter2-3-변수-데이터를-편리하게-다루기-위해" class="headerlink" title="Chapter2-3 변수(데이터를 편리하게 다루기 위해)"></a>Chapter2-3 변수(데이터를 편리하게 다루기 위해)</h2><hr><h3 id="변수의-작성방법"><a href="#변수의-작성방법" class="headerlink" title="변수의 작성방법"></a>변수의 작성방법</h3><p>변수를 기술하는 방법은 변수명과 값 사이에 =(EQUAL)을 쓰면 됩니다.</p><blockquote><p>변수명 = 값</p></blockquote><h3 id="변수의-역활과-주요-장점"><a href="#변수의-역활과-주요-장점" class="headerlink" title="변수의 역활과 주요 장점"></a>변수의 역활과 주요 장점</h3><blockquote><p>1&gt; 연락처와 같이 기억해 두기 어려운 데이터(전화번호)를 lee_telephone과 같이 기억하기 쉬운 이름으로 저장하여 원할 때 사용할 수 있다.<br>2&gt; 데이터에 이름을 붙임으로써 의미를 부여할 수 있다. 예를 들어 0.08이라는 값에 tax라는 이름의 변수명을 지정한다면 tax는 영어로 세금이라는 뜻으로 tax가 곱해져있는 계산식을 보면 세금을 계산하고 있다고 쉽게 유추할 수 있다.</p></blockquote><h3 id="변수에-사용할-수-있는-문자"><a href="#변수에-사용할-수-있는-문자" class="headerlink" title="변수에 사용할 수 있는 문자"></a>변수에 사용할 수 있는 문자</h3><p>변수의 이름은 기본적으로 자유롭게 명명할 수 있지만 모든 문자를 다 사용할 수 있는 것은 아니며 아래와 같은 규칙을 갖는다.</p><blockquote><p>1&gt; 첫 번째 문자에 숫자를 사용하지 않는다.<br>2&gt; 예약어를 사용하지 않는다.</p></blockquote><p>변수의 이름을 지을 때는 그 변수가 가지는 의미를 나타내는 영어 단어를 사용한다. 예를 들어 사과의 가격을 담는 변수라면 apple_price라고 하는 것이 적절한데 그 이유는 다른 사람이 이 코드를 봤을 때 그 변수가 어떤 의미를 가지는지 알기 쉽기 때문이다.</p><p><br></p><h2 id="Chapter2-4-비교연산자-어느쪽이-더-많은가-큰가"><a href="#Chapter2-4-비교연산자-어느쪽이-더-많은가-큰가" class="headerlink" title="Chapter2-4 비교연산자(어느쪽이 더 많은가? 큰가?)"></a>Chapter2-4 비교연산자(어느쪽이 더 많은가? 큰가?)</h2><hr><h3 id="비교연산자란"><a href="#비교연산자란" class="headerlink" title="비교연산자란?"></a>비교연산자란?</h3><p>비교연산자는 이름 그대로 비교에 사용되는 연산자로 데이터 간으 ㅣ비교를 통해 어느 쪽 숫자가 더 크거나 작은지 확인하는 데 사용합니다.</p><h3 id="python의-비교-연산자"><a href="#python의-비교-연산자" class="headerlink" title="python의 비교 연산자"></a>python의 비교 연산자</h3><table><thead><tr><th>비교 연산자</th><th>사용 예</th><th>뜻</th></tr></thead><tbody><tr><td>&gt;</td><td>2 &gt; 1</td><td>2는 1보다 크다</td></tr><tr><td>&gt;=</td><td>2 &gt;= 1</td><td>2는 1보다 크거나 같다</td></tr><tr><td>&lt;</td><td>1 &lt; 2</td><td>1은 2보다 작다</td></tr><tr><td>&lt;=</td><td>1 &lt;= 2</td><td>1은 2보다 작거나 같다</td></tr><tr><td>==</td><td>2 == 2</td><td>2와 2는 같다</td></tr><tr><td>!=</td><td>2 != 1</td><td>2와 1은 같지 않다.</td></tr></tbody></table><p><br></p><h2 id="Chapter2-5-데이터형-파이썬에서-다루는-다양한-데이터의-종류"><a href="#Chapter2-5-데이터형-파이썬에서-다루는-다양한-데이터의-종류" class="headerlink" title="Chapter2-5 데이터형(파이썬에서 다루는 다양한 데이터의 종류)"></a>Chapter2-5 데이터형(파이썬에서 다루는 다양한 데이터의 종류)</h2><hr><h3 id="수치형"><a href="#수치형" class="headerlink" title="수치형"></a>수치형</h3><p>1, 2, 10과 같은 숫자를 다루는 데이터형이 수치형으로 수치형 데이터끼리는 더하기, 빼기등의 연산을 할 수 있다.<br>수치형에는 세 가지 종류가 있는 데 정수(integer), 부동소수점(소수), 복소수로 정수는 int, 부동소숫점(소수)는 float, 복소수는 complex라고 한다.</p><p><strong> 정수 </strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">34</span> + <span class="number">45</span></span><br><span class="line"></span><br><span class="line">number = <span class="number">55</span></span><br></pre></td></tr></table></figure></p><p><strong> 부동소수점(소수) </strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="number">3.4</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><strong> 복소수 </strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">complex = <span class="number">5</span> + <span class="number">5j</span></span><br><span class="line">complex + (<span class="number">3</span> + <span class="number">1j</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'(8+6j)'</span></span><br></pre></td></tr></table></figure></p><h3 id="문자열-형"><a href="#문자열-형" class="headerlink" title="문자열 형"></a>문자열 형</h3><p>말 그대로 문자열을 다루는 데이터형으로 문자들을 작은따옴표(‘)나 큰따옴표(“)로 둘러싸서 문자열형을 지정할 수 있다.<br>그리고 작은따옴표나 큰따옴표 세개를 연속으로 붙이면 복수행의 문자열을 만들 수 있다.</p><p><strong> 문자열 </strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'happy'</span></span><br><span class="line"><span class="string">"birthDay"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   sunday</span></span><br><span class="line"><span class="string">   monday</span></span><br><span class="line"><span class="string">   tuesday</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><h4 id="문자열-형과-산술연산자"><a href="#문자열-형과-산술연산자" class="headerlink" title="문자열 형과 산술연산자"></a>문자열 형과 산술연산자</h4><p>문자열형에서도 산술연산자 +와 *를 사용하여 조작할 수 있다.</p><p><strong> +를 사용한 문자열 조작 </strong><br>문자열형에 산술연산자 +를 사용하면 문자열들을 연결할 수 있다.<br>단 문자열 형에서 +기호를 사용할 때에는 문자열 형 간에만 사용해야하며 그렇지 않은 경우 에러가 발생하게 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'thunder'</span> + <span class="string">'bolt'</span></span><br><span class="line"></span><br><span class="line"><span class="string">'에러 발생'</span></span><br><span class="line"><span class="string">'thunder'</span> + <span class="number">100</span></span><br></pre></td></tr></table></figure><p><strong> *를 사용한 문자열 조작 </strong><br>문자열형 데이터에 숫자를 곱하면 문자열이 반복된 데이터를 얻을 수 있다.<br>단 문자열형에 * 연산자를 사용할 때는 문자열형과 수치형 간에만 사용해야하며 그렇지 않은 경우 에러가 발생하게 된다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'hello'</span> * <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'에러 발생'</span></span><br><span class="line"><span class="string">'hello'</span> * <span class="string">'world'</span></span><br></pre></td></tr></table></figure><p><strong> 수치형과 문자열형은 어때서 나뉘었는가? </strong><br>숫자는 수치형뿐 아니라 문자열형으로 다루고 싶은 경우가 있는 데 예를 들어 전화번호는 어떤 데이터형이 적절할까?<br>답은 문자열형이다 왜냐하면 전화번호의 숫자는 더하거나 뺄 일이 없기 때문(연산할 일이 없단 이야기)이다. 그리고 각 데이터형에서는 그 데이터형에 맞는 다양한 기능들이 준비되어 있으므로 적합한 용도로 사용하는 것이 좋다.</p><p><strong> 문자열 형의 편리한 기능 </strong></p><p>upper() 메서드를 사용한 대문자로 변경<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'hello'</span>;</span><br><span class="line">text.upper()</span><br></pre></td></tr></table></figure></p><p>count() 메서드를 사용한 특정 문자를 몇번 포함하는 지 확인하기<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">word = <span class="string">'maintenance'</span></span><br><span class="line">word.count(<span class="string">'n'</span>)</span><br></pre></td></tr></table></figure></p><h3 id="논리형"><a href="#논리형" class="headerlink" title="논리형"></a>논리형</h3><p>논리형은 True / False 두가지 값밖에 존재하지 않으며 비교의 결과로 전달되기도 한다.<br>논리형을 사용할 때 주의할 점은 True와 False모두 첫 글자는 대문자 인것으로 소문자로 작성하는 경우 논리형으로 인식하지 않는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">46</span> &gt; <span class="number">49</span></span><br><span class="line"><span class="string">'True'</span></span><br><span class="line"></span><br><span class="line"><span class="number">46</span> &gt; <span class="number">49</span></span><br><span class="line"><span class="string">'False'</span></span><br></pre></td></tr></table></figure><h3 id="리스트형"><a href="#리스트형" class="headerlink" title="리스트형"></a>리스트형</h3><p>많은 데이터를 하나로 묶어서 사용하 ㄹ수 있는 데이터형으로 묶고 싶은 데이터를 쉼표(,)로 구분하여 대괄호([])에 넣는다.</p><blockquote><p>[57, ‘banana’, True]</p></blockquote><p>여러 데이터형과 마찬가지로 변수에 대입(할당)하여 사용할 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Agroup = [<span class="string">'lee'</span>, <span class="string">'kim'</span>]</span><br><span class="line">Bgroup = [<span class="string">'jang'</span>, <span class="string">'han'</span>]</span><br></pre></td></tr></table></figure><p><strong> 리스트형에 요소를 추가, 제거하기 </strong><br>리스트형의 요소를 추가할 때는 append()메서드를 삭제할 때는 remove()메서드를 사용한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Agroup = [<span class="string">'lee'</span>, <span class="string">'kim'</span>]</span><br><span class="line"></span><br><span class="line">Agroup.append(<span class="string">'park'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Agroup = [<span class="string">'lee'</span>, <span class="string">'kim'</span>]</span><br><span class="line"></span><br><span class="line">Agroup.remove(<span class="string">'lee'</span>)</span><br></pre></td></tr></table></figure><p><strong> 리스트형에 요소 정렬하기 </strong><br>리스트형의 요소를 정렬할 때는 sort()메서드를 사용한다. 문자형, 수치형에 모두 사용할 수 있지만 두가지가 섞여있는 경우 에러가 발생하는 점에 주의한다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Agroup = [<span class="string">'lee'</span>, <span class="string">'kim'</span>, <span class="string">'park'</span>]</span><br><span class="line"></span><br><span class="line">Agroup.sort()</span><br><span class="line"></span><br><span class="line"><span class="string">"['kim', 'lee', 'park']"</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Agroup = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">Agroup.sort()</span><br><span class="line"></span><br><span class="line"><span class="string">"[1, 2, 3, 4, 5]"</span></span><br></pre></td></tr></table></figure><h3 id="01-함수는-이럴-때-사용해요"><a href="#01-함수는-이럴-때-사용해요" class="headerlink" title="01_함수는 이럴 때 사용해요"></a>01_함수는 이럴 때 사용해요</h3><p>함수를 사용하면 좋은 점은 두 가지로 꼽을 수 있습니다.</p><blockquote><ol><li>코드 중복 제거 및 코드 재사용</li><li>유지보수 용이성</li></ol></blockquote><p>&lt; 함수를 사용하지 않은 경우 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/28yyv5L7/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 함수를 사용한 경우 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/wbyr3ujz/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><br><br></p><h3 id="02-함수란"><a href="#02-함수란" class="headerlink" title="02_함수란?"></a>02_함수란?</h3><p>특정 기능을 하는 구문(알고리즘, 로직)을 독립된 부품으로 만들어 재사용하고자 할 때 사용하는 문법으로 일종의 포장기법이라고 할 수 있습니다.<br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;처음-만나는-파이썬&quot;&gt;&lt;a href=&quot;#처음-만나는-파이썬&quot; class=&quot;headerlink&quot; title=&quot;[ 처음 만나는 파이썬 ]&quot;&gt;&lt;/a&gt;[ 처음 만나는 파이썬 ]&lt;/h1&gt;&lt;p&gt;(&lt;a href=&quot;http://book.naver.co
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="python" scheme="http://windfanta.github.io/blog/categories/study/python/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - PART2 - CH01 함수 기초</title>
    <link href="http://windfanta.github.io/blog/2018/01/24/study-jquery-6/"/>
    <id>http://windfanta.github.io/blog/2018/01/24/study-jquery-6/</id>
    <published>2018-01-24T06:06:16.000Z</published>
    <updated>2018-07-30T01:01:30.077Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="PART2-CH01-함수-기초"><a href="#PART2-CH01-함수-기초" class="headerlink" title="PART2 - CH01 함수 기초"></a>PART2 - CH01 함수 기초</h1><hr><p><br></p><h2 id="lesson01-함수-소개"><a href="#lesson01-함수-소개" class="headerlink" title="lesson01 함수 소개"></a>lesson01 함수 소개</h2><hr><h3 id="01-함수는-이럴-때-사용해요"><a href="#01-함수는-이럴-때-사용해요" class="headerlink" title="01_함수는 이럴 때 사용해요"></a>01_함수는 이럴 때 사용해요</h3><p>함수를 사용하면 좋은 점은 두 가지로 꼽을 수 있습니다.</p><blockquote><ol><li>코드 중복 제거 및 코드 재사용</li><li>유지보수 용이성</li></ol></blockquote><p>&lt; 함수를 사용하지 않은 경우 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/28yyv5L7/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 함수를 사용한 경우 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/wbyr3ujz/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><br><br></p><h3 id="02-함수란"><a href="#02-함수란" class="headerlink" title="02_함수란?"></a>02_함수란?</h3><p>특정 기능을 하는 구문(알고리즘, 로직)을 독립된 부품으로 만들어 재사용하고자 할 때 사용하는 문법으로 일종의 포장기법이라고 할 수 있습니다.<br><br></p><h3 id="03-함수의-구조-3가지"><a href="#03-함수의-구조-3가지" class="headerlink" title="03_함수의 구조 3가지"></a>03_함수의 구조 3가지</h3><blockquote><ul><li>매개변수</li><li>지역변수와 전역변수</li><li>리턴 값</li><li>함수 호출</li><li>함수 정의</li><li>함수 리터럴</li><li>함수 이름 규칙</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 일반적임 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sampleFunc1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'안녕'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수가 있는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sampleFunc2</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  alert(str)</span><br><span class="line">&#125;</span><br><span class="line">sampleFunc2(<span class="string">'안녕'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 리턴 값이 있는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sampleFunc3</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'입력한 값은'</span>, num);</span><br><span class="line">  <span class="keyword">return</span> num * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = sampleFunc3(<span class="number">3</span>); <span class="comment">// 9를 반환</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h2 id="lesson02-가장-쉬운-함수-만들기"><a href="#lesson02-가장-쉬운-함수-만들기" class="headerlink" title="lesson02 가장 쉬운 함수 만들기"></a>lesson02 가장 쉬운 함수 만들기</h2><hr><p>function</p><blockquote><p>변수를 만드는 var키워드와 마찬가지로 function은 함수를 만들 때 사용하는 키워드 입니다.</p></blockquote><p>함수 이름</p><blockquote><p>함수 이름은 변수 이름과 마찬가지로 유일해야하며 마들려 하는 함수의 기능을 함축한 의미가 담긴 이름으로 만들면 됩니다.</p></blockquote><p>{}</p><blockquote><p>함수 영역을 나타냅니다.</p></blockquote><p>함수이름()</p><blockquote><p>함수이름 뒤에 ()를 붙여 작성하면 함수가 동작합니다. 우리는 이 작업을 함수 호출이라고 부릅니다.</p></blockquote><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 함수이름(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">'함수영역'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">함수이름();</span><br></pre></td></tr></table></figure><h2 id="lesson03-지역변수-VS-전역변수"><a href="#lesson03-지역변수-VS-전역변수" class="headerlink" title="lesson03 지역변수 VS 전역변수"></a>lesson03 지역변수 VS 전역변수</h2><hr><p>지역 변수와 전역 변수의 구분은 변수가 선언되는 위치이며 지역과 전역의 구분은 (var키워드 기준) 함수 입니다.</p><p>전역변수</p><blockquote><p>전역영역(window)에 만들어지는 변수로서 영역에 상관없이 사용할 수 있는 변수를 의미합니다.</p></blockquote><p>지역변수</p><blockquote><p>지역변수는 지역 영역에 만들어지는 변수로서 오직 만들어진 영역에서만 사용할 수 있습니다. </p></blockquote><p>&lt; 사용 예 &gt;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> global = <span class="string">'전역'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> local = <span class="string">'지역'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(global, local);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>&lt; ES5에서의 지역, 전역변수 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/q87py3L1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; ES6에서의 지역, 전역변수 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/96ks5me1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><br><br></p><h2 id="lesson04-매개변수가-있는-함수-만들기"><a href="#lesson04-매개변수가-있는-함수-만들기" class="headerlink" title="lesson04 매개변수가 있는 함수 만들기"></a>lesson04 매개변수가 있는 함수 만들기</h2><hr><p>매개변수는 함수 내부로 데이터를 전달할 때 사용하는 변수로 매개변수를 사용하면 유연한 함수를 만들 수 있습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 키워드(function) / 함수명 / (매개변수)의 순서로 사용 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">arg1, arg2, arg3, arg4, arg5</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 매개변수의 갯수에는 제한이 없습니다.</span></span><br><span class="line">  <span class="keyword">var</span> sum = arg1 + arg2 + arg3 + arg4 + arg5;</span><br><span class="line">  </span><br><span class="line">  alert(sum);</span><br><span class="line">&#125;</span><br><span class="line">func1(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수의 값이 많은 경우 Array(배열), Object(객체)를 사용하면 유연하고 편리합니다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    sum+= arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  alert(sum);</span><br><span class="line">&#125;</span><br><span class="line">func2([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 매개변수는 함수안에서 사용되므로 지역변수입니다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> number = num;</span><br><span class="line">&#125;</span><br><span class="line">func3(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 에러 발생</span></span><br><span class="line">alert(number);</span><br></pre></td></tr></table></figure><p>&lt; 매개변수 사용 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/q4j1vn6h/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>***arguments<br>매개변수로 무엇이 들어올지 모르는 경우에 사용하는 값으로 함수를 실행한 시점의 모든 매개변수를 배열의 형태로 가져옵니다.</p><p>&lt; arguments의 사용 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/10hcupj5/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>편리하지만 코드를 볼 때 어떤 값이 들어오는지 작업자가 알 수 없으며 작성자의 의도와 다르게 사용될 수 있으므로 사용에 주의가 필요합니다. </p></blockquote><p><br></p><h2 id="lesson05-리턴-값이-있는-함수-만들기"><a href="#lesson05-리턴-값이-있는-함수-만들기" class="headerlink" title="lesson05 리턴 값이 있는 함수 만들기"></a>lesson05 리턴 값이 있는 함수 만들기</h2><hr><p>외부에서 함수내부의 값에 접근한 수 없으므로 매개변수를 통해 값을 전달하고 리턴 값을 통해 값을 반환 받을 수 있습니다. </p><p>&lt; 함수 내부의 변수를 가져와보기 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/at9p2raa/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리턴 값의 선언은 return 값(변수명)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수 sum을 통해 반환된 값(리턴 값)을 value에 할당</span></span><br><span class="line"><span class="keyword">var</span> value = sum(<span class="number">10</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>&lt; 리턴 값을 사용한 함수 예 &gt;<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/vqxesyd2/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>&lt; 계산기 만들기 &gt;<br>[<a href="http://windfanta.ivyro.net/study/calc/]" target="_blank" rel="noopener">http://windfanta.ivyro.net/study/calc/]</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - AD2 - 초보자를 위한 jQuery</title>
    <link href="http://windfanta.github.io/blog/2018/01/11/study-jquery-4/"/>
    <id>http://windfanta.github.io/blog/2018/01/11/study-jquery-4/</id>
    <published>2018-01-11T00:50:54.000Z</published>
    <updated>2018-07-30T01:01:30.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="APPENDIX-02-초보자를-위한-jQuery"><a href="#APPENDIX-02-초보자를-위한-jQuery" class="headerlink" title="APPENDIX 02 - 초보자를 위한 jQuery"></a>APPENDIX 02 - 초보자를 위한 jQuery</h1><hr><h2 id="lesson01-jQuery-소개"><a href="#lesson01-jQuery-소개" class="headerlink" title="lesson01 jQuery 소개"></a>lesson01 jQuery 소개</h2><hr><p><br></p><h3 id="01-jquery란"><a href="#01-jquery란" class="headerlink" title="01_ jquery란?"></a>01_ jquery란?</h3><p>여러가지 작업을 쉽고 편리하게 도와주는 크로스 브라우징 라이브러리 입니다.</p><blockquote><p>참고) 프레임워크와 라이브러리 - <a href="http://webclub.tistory.com/458" target="_blank" rel="noopener">http://webclub.tistory.com/458</a></p></blockquote><p><br></p><h3 id="02-jquery를-사용하는-이유"><a href="#02-jquery를-사용하는-이유" class="headerlink" title="02_ jquery를 사용하는 이유"></a>02_ jquery를 사용하는 이유</h3><p>javascript와 jQuery의 차이<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/8cygh88o/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>animate 예제<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/jr6gxn16/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson02-jQuery-사용법"><a href="#lesson02-jQuery-사용법" class="headerlink" title="lesson02 jQuery 사용법"></a>lesson02 jQuery 사용법</h2><hr><h3 id="01-준비"><a href="#01-준비" class="headerlink" title="01_준비"></a>01_준비</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 스크립트 파일 연결 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// document(dom)의 로드가 끝난 뒤에 아래 함수를 실행</span></span></span><br><span class="line"><span class="javascript">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 브라우저의 alert을 통해 '반갑습니다' 를 출력</span></span></span><br><span class="line"><span class="javascript">  alert(<span class="string">'반갑습니다~'</span>);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>참고) Microsoft CDN - <a href="https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview</a></p></blockquote><p><br></p><h3 id="02-jquery를-이용한-노드-찾기"><a href="#02-jquery를-이용한-노드-찾기" class="headerlink" title="02_jquery를 이용한 노드 찾기"></a>02_jquery를 이용한 노드 찾기</h3><blockquote><p>var $변수이름 = $(‘css선택자’);</p></blockquote><p><strong>$의 정체</strong><br>$()는 jQuery가 아닌 함수 이름이 $인 함수의 호출일 뿐입니다. $()함수는 선택자에 해당하는 노드를 찾아주는 역활을 합니다.</p><p><strong>CSS선택자</strong><br>말 그대로 CSS선택자로 여러분이 찾고 싶은 선택자를 만들어 $()함수의 매개변수 값으로 넣어주면 됩니다.(jquery에서의 선택자가 css선택자와 완벽히 동일하지는 않습니다)</p><p><strong>$변수이름</strong><br>$()함수에서 리턴(반환)해주는 값을 저장하기 위해 만든 변수로 변수 이름에 $를 붙여준 이유는 jQuery의 기능이 들어있는 변수라는 것을 표현하기 위함 입니다.<br>(변수 이름에 $를 붙여 작성하는 것은 선택사항이지만 붙이는 것을 권장합니다.)</p><p>예제<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/gs9zrp33/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>참고) 노드 - <a href="http://tcpschool.com/javascript/js_dom_node" target="_blank" rel="noopener">http://tcpschool.com/javascript/js_dom_node</a></p></blockquote><p><br></p><h3 id="03-jQuery와-CSS와의-관계"><a href="#03-jQuery와-CSS와의-관계" class="headerlink" title="03_jQuery와 CSS와의 관계"></a>03_jQuery와 CSS와의 관계</h3><p>jQuery가 큰 인기를 누릴 수 있었 던 것은 CSS선택자를 활용해 노드를 찾을 수 있는 기능때문이며 CSS선택자의 개념을 알고 있다면 jQuery를 이미 어느정도 사용할 수 있다고 판단해도 좋을만큼 밀접한 관계를 맺고 있습니다.</p><p>사용 예<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>);</span><br><span class="line">$(<span class="string">'.select'</span>)</span><br><span class="line">$(<span class="string">'div &gt; p'</span>)</span><br><span class="line">$(<span class="string">'div ul li.select'</span>)</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="04-초보자가-알아야할-jQuery-핵심기능"><a href="#04-초보자가-알아야할-jQuery-핵심기능" class="headerlink" title="04_초보자가 알아야할 jQuery 핵심기능"></a>04_초보자가 알아야할 jQuery 핵심기능</h3><hr><p><strong>01. 이벤트의 등록</strong></p><blockquote><p>$대상.on(‘이벤트명’, 이벤트리스너);<br>또는<br>$대상.단축이벤트메서드(이벤트리스너);</p></blockquote><p>jQuery에서 제공하는 on()메서드와 단축 이벤트 이벤트 메서드를 이용하면 이벤트를 쉽게 등록할 수 있습니다.</p><p>예제<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/4k5we5eo/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><p><strong>02. 스타일 설정하기</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $(대상).css('스타일속성명', '값');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 설정 내용이 하나인 경우</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 설정 내용이 여러개인 경우(괄호 안에 중괄호를 추가하여 값을 나열)</span></span><br><span class="line">$(<span class="string">'div'</span>).css(&#123;</span><br><span class="line">  <span class="string">'color'</span>: <span class="string">'red'</span>,</span><br><span class="line">  <span class="string">'position'</span>: <span class="string">'relative'</span>,</span><br><span class="line">  <span class="string">'background'</span>: <span class="string">'#000'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메서드 체이닝을 사용하여 여러번 작성해도 되지만 누가봐도 좋지 않은 방법</span></span><br><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'color'</span>, <span class="string">'red'</span>).css(<span class="string">'background-color'</span>, <span class="string">'#000'</span>).css(<span class="string">'position'</span>, <span class="string">'relative'</span>);</span><br></pre></td></tr></table></figure></p><p>예제<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/fhe78h56/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - CH2 - 기본 연산자</title>
    <link href="http://windfanta.github.io/blog/2018/01/07/study-jquery-2/"/>
    <id>http://windfanta.github.io/blog/2018/01/07/study-jquery-2/</id>
    <published>2018-01-07T07:29:53.000Z</published>
    <updated>2018-07-30T01:01:30.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="CHAPTER-02-기본-연산자"><a href="#CHAPTER-02-기본-연산자" class="headerlink" title="CHAPTER 02 - 기본 연산자"></a>CHAPTER 02 - 기본 연산자</h1><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* [ 숫자 연산자 ] */</span></span><br><span class="line"><span class="number">10</span> + <span class="number">20</span>;  <span class="comment">// 더하기</span></span><br><span class="line"><span class="number">10</span> - <span class="number">5</span>;   <span class="comment">// 빼기</span></span><br><span class="line"><span class="number">10</span> * <span class="number">2</span>;   <span class="comment">// 곱하기</span></span><br><span class="line"><span class="number">10</span> / <span class="number">2</span>;   <span class="comment">// 나누기</span></span><br><span class="line"><span class="number">10</span> % <span class="number">3</span>;   <span class="comment">// 나머지(나누기)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* [ 문자 연산자 ] */</span></span><br><span class="line"><span class="string">'안녕'</span> + <span class="string">'하세요'</span>;  <span class="comment">// 더하기(연결)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* [ 복합 연산자 ] */</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;  </span><br><span class="line"><span class="keyword">var</span> num1+=<span class="number">10</span>;   <span class="comment">// var num1 = num1 + 10;</span></span><br><span class="line"><span class="keyword">var</span> num1-=<span class="number">10</span>;   <span class="comment">// var num1 = num1 - 10;</span></span><br><span class="line"><span class="keyword">var</span> num1*=<span class="number">10</span>;   <span class="comment">// var num1 = num1 * 10;</span></span><br><span class="line"><span class="keyword">var</span> num1/=<span class="number">10</span>;   <span class="comment">// var num1 = num1 / 10;</span></span><br><span class="line"><span class="keyword">var</span> num1%=<span class="number">10</span>;   <span class="comment">// var num1 = num1 % 10;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* [ 증감 연산자 ] */</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10</span>;</span><br><span class="line">num2++;          <span class="comment">// var num2 = num2 + 1;</span></span><br><span class="line">num2--;          <span class="comment">// var num2 = num2 - 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* [ 전위, 후위 연산자 ] */</span></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num4 = ++num3;  <span class="comment">// num3 = num3 + 1 -&gt; num4 = num3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num5 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> num6 = num5++;  <span class="comment">// num6 = num5 -&gt; num5 = num5 + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// [ 연산자 우선순위 ]</span></span><br><span class="line"><span class="keyword">var</span> num7 = <span class="number">10</span> + <span class="number">15</span> * <span class="number">2</span>;     <span class="comment">// 40 - 곱하기 후 더하기를 계산</span></span><br><span class="line"><span class="keyword">var</span> num8 = (<span class="number">10</span> + <span class="number">15</span>) * <span class="number">2</span>;   <span class="comment">// 50 - 괄호를 활용하면 연산 우선순위를 지정할 수 있다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 괄호를 활용하여 사칙연산의 우선순위를 감안하지 않더라도 쉽게 읽히는 코드를 작성하는 습관을 추천</span></span><br><span class="line"><span class="keyword">var</span> boxWidth = ($(<span class="string">'div'</span>).width() + $(<span class="string">'div'</span>).height()) / <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - CH2 - 조건문 if</title>
    <link href="http://windfanta.github.io/blog/2018/01/03/study-jquery-5/"/>
    <id>http://windfanta.github.io/blog/2018/01/03/study-jquery-5/</id>
    <published>2018-01-03T06:46:11.000Z</published>
    <updated>2018-07-30T01:01:30.076Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="CHAPTER-04-조건문-if"><a href="#CHAPTER-04-조건문-if" class="headerlink" title="CHAPTER 04 조건문 if"></a>CHAPTER 04 조건문 if</h1><hr><p><br></p><h2 id="lesson01-조건문-소개"><a href="#lesson01-조건문-소개" class="headerlink" title="lesson01 조건문 소개"></a>lesson01 조건문 소개</h2><hr><h3 id="01-조건문이란"><a href="#01-조건문이란" class="headerlink" title="01_ 조건문이란?"></a>01_ 조건문이란?</h3><p>특정 조건이 맞는 경우에만 특정 구문을 실행하고자 할 떄 사용하는 자바스크립트의 제어문 입니다.</p><p><br></p><h3 id="02-조건문은-이럴-때-사용해요"><a href="#02-조건문은-이럴-때-사용해요" class="headerlink" title="02_ 조건문은 이럴 때 사용해요"></a>02_ 조건문은 이럴 때 사용해요</h3><blockquote><p>-사이트에 로그인 시 조건문을 사용하여 입력한 아이디와 패스워드가 서버에 저장된 정보와 같은지 비교 후 같다면 사이트의 접속을 허락하고 아니라면 오류 메시지를 띄우는 경우<br>-여러분이 뽑은 번호가 1번이면 냉장고 2번이면 TV, 3번이면 세ㅏㄱ기를 주는 경품 추첨기를 만들 때도 조건문을 사용합니다.<br>-게시물 삭제 시 게시물의 삭제 여부를 묻는 메시지 박스에서 사용 등</p></blockquote><p><br></p><h3 id="03-조건문의-종류"><a href="#03-조건문의-종류" class="headerlink" title="03_ 조건문의 종류"></a>03_ 조건문의 종류</h3><blockquote><p>if - 가장 일반적으로 사용하는 조건문<br>switch - if로 만들어진 다중 조건처리를 비교적 간결하게 처리할 수 있는 조건문</p></blockquote><p><br></p><h2 id="lesson02-if문-소개"><a href="#lesson02-if문-소개" class="headerlink" title="lesson02 if문 소개"></a>lesson02 if문 소개</h2><hr><p><br></p><h3 id="01-if문이란"><a href="#01-if문이란" class="headerlink" title="01_if문이란?"></a>01_if문이란?</h3><p>if문은 특정 조건이 맞는 경우에만 특정 구문을 실행하길 원하는 경우에 사용하는 조건문 중 하나 입니다.</p><p>내가 로또에 당첨된다면<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mylotto = <span class="string">'나의 로또번호'</span>;</span><br><span class="line"><span class="keyword">var</span> weeklotto = <span class="string">'이번 주 로또 당첨번호'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mylotto == weeklotto) &#123;</span><br><span class="line"> <span class="comment">// 내 로또와 금주 당첨번호가 같은 경우</span></span><br><span class="line">  난 집을 사겠다();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">// 내 로또와 금주 당첨번호가 같지 않은 경우</span></span><br><span class="line">  평소처럼 그냥 산다();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위와 같은 식으로 특정 조건이 맞을 때만 원하는 구문을 실행하고 싶을 때 조건문 if를 사용합니다.<br>프로그래밍언어는 일상 생활과 많이 닮아 있습니다. 우리가 의사소통을 위해 글자를 사용하듯 컴퓨터와 의사소통을 위해서 프로그래밍 언어를 사용하는 것이죠 즉 프로그래밍 언어란? 우리가 생각하고 있는 내용을 컴퓨터가 알아들을 수 있게 사용하는 또 다른 언어 입니다.</p><p><br></p><h3 id="02-if문-문법"><a href="#02-if문-문법" class="headerlink" title="02_if문 문법"></a>02_if문 문법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (조건식<span class="number">1</span>) &#123;</span><br><span class="line"> <span class="comment">// 참(true)일 경우 실행될 코드</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (조건식<span class="number">2</span>) &#123;</span><br><span class="line"> <span class="comment">// 조건식1이 거짓(false)이고 조건식2가 참(true)인 경우 실행될 코드</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">// 조건식 1, 2가 모두 거짓(false)인 경우 실행 될 코드</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="lesson03-논리-비교-연산자"><a href="#lesson03-논리-비교-연산자" class="headerlink" title="lesson03 논리 비교 연산자"></a>lesson03 논리 비교 연산자</h2><hr><h3 id="01-논리-비교-연산자-용도"><a href="#01-논리-비교-연산자-용도" class="headerlink" title="01_논리 비교 연산자 용도"></a>01_논리 비교 연산자 용도</h3><p><strong>비교 연산자</strong><br>두 값을 비교할 때 사용하는 연산자<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">2</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="comment">// 크기 비교 (2는 1보다 큰가?)</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">10</span> == <span class="number">9</span>) &#123;</span><br><span class="line"> <span class="comment">// 같은지 비교 (10과 9는 같은가?)</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">10</span> != <span class="number">9</span>) &#123;</span><br><span class="line"> <span class="comment">// 같지 않은지를 비교 (10과 9은 같지 않은가?) </span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">10</span> &gt;= <span class="number">9</span>) &#123;</span><br><span class="line"> <span class="comment">// 크기와 같은 지를 비교 (10이 9보다 크거나 같은가? )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>논리 연산자</strong><br>여러 개의 비교 연산자를 묶을 때 사용하는 연산자<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &amp;&amp;(and) 연산자</span></span><br><span class="line"><span class="keyword">if</span> ( (<span class="number">2</span> &gt; <span class="number">1</span>) &amp;&amp; (<span class="number">10</span> == <span class="number">5</span>) ) &#123;</span><br><span class="line"> <span class="comment">// 첫번 째 비교(2는 1보다 큰가)와 두번 쨰 비교(10은 5와 같은가)가 모두 참인지를 판단</span></span><br><span class="line"> <span class="comment">// &amp;&amp;는 비교값A와 비교값B가 모두 참인지 여부를 판단 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ||(or) 연산자 </span></span><br><span class="line"><span class="keyword">if</span> ( (<span class="number">2</span> &gt; <span class="number">1</span>) || (<span class="number">10</span> == <span class="number">5</span>) ) &#123;</span><br><span class="line"> <span class="comment">// 첫번 째 비교(2는 1보다 큰가)와 두번 쨰 비교(10은 5와 같은가)중에 하나라도 참인지를 판단</span></span><br><span class="line"> <span class="comment">// ||는 비교값A와 비교값B중에 하나라도 참인지 여부를 판단 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><h3 id="03-비교-연산자"><a href="#03-비교-연산자" class="headerlink" title="03_비교 연산자"></a>03_비교 연산자</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a가 b보다 큰 값인가?</span></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a가 b보다 작은 값인가?</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a와 b의 값이 같은 가?</span></span><br><span class="line"><span class="keyword">if</span> (a == b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a와 b의 값이 다른 가?</span></span><br><span class="line"><span class="keyword">if</span> (a != b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a가 b보다 크거나 같은 가? </span></span><br><span class="line"><span class="keyword">if</span> (a &gt;= b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// a가 b작거나 크거나 같은 가? </span></span><br><span class="line"><span class="keyword">if</span> (a &lt;= b) &#123; &#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="04-논리-연산자"><a href="#04-논리-연산자" class="headerlink" title="04_논리 연산자"></a>04_논리 연산자</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  &amp;&amp;(AND) - a와 b가 같고 c와 d도 같은가?  </span></span><br><span class="line"><span class="keyword">if</span> (a == b &amp;&amp; c == b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ||(OR) - a와 b가 같거나 c와 d가 같은가? </span></span><br><span class="line"><span class="keyword">if</span> (a == b || c == b) &#123; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 더 잘보이게 하기 위해 괄호로 영역을 구분해줘도 좋습니다.</span></span><br><span class="line"><span class="keyword">if</span> ( (a == b) &amp;&amp; (c == b) ) &#123; &#125;</span><br><span class="line"><span class="keyword">if</span> ( (a == b) || (c == b) ) &#123; &#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="lesson04-if에-논리-비교-연산자-연동하기"><a href="#lesson04-if에-논리-비교-연산자-연동하기" class="headerlink" title="lesson04 if에 논리 비교 연산자 연동하기"></a>lesson04 if에 논리 비교 연산자 연동하기</h2><p>비교연산자의 활용 예<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/3q34mx1w/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>논리 연산자의 활용 예<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/spxw3v1c/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson05-07-if"><a href="#lesson05-07-if" class="headerlink" title="lesson05 ~ 07 if"></a>lesson05 ~ 07 if</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 1단계 if */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'안녕'</span> == <span class="string">'안녕'</span>) &#123;</span><br><span class="line"> alert(<span class="string">'반가워~'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2, 3단계가 존재하지 않는다면 이렇게도 작성가능(권장하진 않습니다~)</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'안녕'</span> == <span class="string">'안녕'</span>) alert(<span class="string">'반가워!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 세미콜론은 문장의 종료를 뜻하므로 한줄로 작성 시 작성에 주의하세요~</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'안녕'</span> == <span class="string">'안녕'</span>); alert(<span class="string">'반가워!'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2단계 if(if ~ else) */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'hello'</span> == <span class="string">'hello'</span>) &#123;</span><br><span class="line"> alert(<span class="string">'welcome~'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> alert(<span class="string">'반가워'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if ~ else문은 첫번 째 조건문을 실행 후 참이라면 실행, 거짓이라면 else를 실행 합니다.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3단계 if(if ~ else if ~ else) */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">'hello'</span> == <span class="string">'hello'</span>) &#123;</span><br><span class="line"> alert(<span class="string">'welcome'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'안녕'</span> == <span class="string">'안녕'</span>) &#123;</span><br><span class="line"> alert(<span class="string">'방가'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'안녕하세요'</span> == <span class="string">'안녕하세요'</span>) &#123;</span><br><span class="line"> alert(<span class="string">'반갑습니다~'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> alert(<span class="string">'누구세요?'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2단계와 마찬가지로 순차적으로 값을 비교하며 참인 경우 해당 구문을 실행합니다.</span></span><br><span class="line"><span class="comment">// 참으로 판단되는 경우 아래 남아있는 조건은 실행되지 않습니다.</span></span><br></pre></td></tr></table></figure><p>3단계의 예<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/Lo3qrawu/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p><br></p><h2 id="lesson08-조건부-연산자-삼항연산자"><a href="#lesson08-조건부-연산자-삼항연산자" class="headerlink" title="lesson08 조건부 연산자(삼항연산자)"></a>lesson08 조건부 연산자(삼항연산자)</h2><p>if else의 형태의 코드를 간결하게 표현할 수 있게 해주는 문법입니다.</p><blockquote><p>(조건식) ? 참일 때 실행될 코드 : 거짓일 때 실행 될 코드;</p></blockquote><p>사용 예<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/271ej315/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
  <entry>
    <title>자바스크립트 jquery 완전정복 스터디 1 - AD1 - 초보자를 위한 함수와 클래스</title>
    <link href="http://windfanta.github.io/blog/2018/01/03/study-jquery-3/"/>
    <id>http://windfanta.github.io/blog/2018/01/03/study-jquery-3/</id>
    <published>2018-01-03T06:46:11.000Z</published>
    <updated>2018-07-30T01:01:30.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바스크립트-jQuery-완전정복-스터디-1"><a href="#자바스크립트-jQuery-완전정복-스터디-1" class="headerlink" title="[ 자바스크립트+jQuery 완전정복 스터디 1 ]"></a>[ 자바스크립트+jQuery 완전정복 스터디 1 ]</h1><p>(<a href="http://book.naver.com/bookdb/book_detail.nhn?bid=9650891" target="_blank" rel="noopener">http://book.naver.com/bookdb/book_detail.nhn?bid=9650891</a>)</p><p><br></p><h1 id="APPENDIX-01-초보자를-위한-함수와-클래스"><a href="#APPENDIX-01-초보자를-위한-함수와-클래스" class="headerlink" title="APPENDIX 01 - 초보자를 위한 함수와 클래스"></a>APPENDIX 01 - 초보자를 위한 함수와 클래스</h1><hr><h2 id="Lesson-01-초보자를-위한-함수"><a href="#Lesson-01-초보자를-위한-함수" class="headerlink" title="Lesson 01 - 초보자를 위한 함수"></a>Lesson 01 - 초보자를 위한 함수</h2><h3 id="01-함수란"><a href="#01-함수란" class="headerlink" title="01_함수란?"></a>01_함수란?</h3><blockquote><p>함수는 특정 기능을 하는 구문(알고리즘, 로직)을 묶어 재사용하는 문법</p></blockquote><p>함수 없이 일하기(아예 없진 않지만)<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/49mt5e72/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>함수로 일하기<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/e2bzfcdq/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><p>더 편하게 일하기<br><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/x5p3po1d/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="02-함수는-이럴-때-사용해요"><a href="#02-함수는-이럴-때-사용해요" class="headerlink" title="02_함수는 이럴 때 사용해요"></a>02_함수는 이럴 때 사용해요</h3><p>책 참고</p><h3 id="03-함수의-생김새-06-리턴-값"><a href="#03-함수의-생김새-06-리턴-값" class="headerlink" title="03_함수의 생김새 ~ 06_리턴 값"></a>03_함수의 생김새 ~ 06_리턴 값</h3><p>함수의 선언 및 실행<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수의 선언(매개변수는 생략해도 무방)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcs</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  alert(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수의 실행</span></span><br><span class="line">funcs(<span class="string">'안녕!!!'</span>);</span><br></pre></td></tr></table></figure></p><p>리턴의 사용<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 리턴 값이 존재하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcs</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg * <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 값을 반환하지만 저장하지 않았으므로 재사용 불가</span></span><br><span class="line"><span class="built_in">console</span>.log(funcs(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 반환된 값이 val에 할당</span></span><br><span class="line"><span class="keyword">var</span> val = funcs(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>리턴할 수 있는 값은 제한이 없음<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 값을 반환하지만 저장하지 않았으므로 재사용 불가</span></span><br><span class="line"><span class="built_in">console</span>.log(funcs());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 반환된 값이 val에 할당</span></span><br><span class="line"><span class="keyword">var</span> val = funcs();</span><br></pre></td></tr></table></figure></p><blockquote><p>참고 - <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Functions</a></p></blockquote><h3 id="07-함수의-종류"><a href="#07-함수의-종류" class="headerlink" title="07_함수의 종류"></a>07_함수의 종류</h3><h4 id="1-자바스크립트-코어-함수"><a href="#1-자바스크립트-코어-함수" class="headerlink" title="1_ 자바스크립트 코어 함수"></a>1_ 자바스크립트 코어 함수</h4><p>자바스크립트에서는 가장 기본이 되는 기능을 미리 구현해 제공합니다. 배열을 만드는 기능이라던지 숫자를 문자로 바꿔주는 기능, 타이머함수 같은 기능을 하는 함수를 모아둔 것을 자바스크립트 코어 라이브러리라고 합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 코어 함수의 예</span></span><br><span class="line">alert(<span class="string">'안녕'</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'123901239'</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">'새로 작성'</span>);</span><br></pre></td></tr></table></figure><h4 id="2-사용자-정의-함수"><a href="#2-사용자-정의-함수" class="headerlink" title="2_ 사용자 정의 함수"></a>2_ 사용자 정의 함수</h4><p>말그대로 사용자가 필요해서 만드는 함수</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alert2</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  alert(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert2(<span class="string">'아이고 의미 없다~'</span>);</span><br></pre></td></tr></table></figure><h2 id="Lesson-02-초보자를-위한-클래스"><a href="#Lesson-02-초보자를-위한-클래스" class="headerlink" title="Lesson 02 - 초보자를 위한 클래스"></a>Lesson 02 - 초보자를 위한 클래스</h2><h3 id="01-클래스란"><a href="#01-클래스란" class="headerlink" title="01_클래스란?"></a>01_클래스란?</h3><p>함수가 특정 기능을 하는 구문(알고리즘, 로직)을 묶을 때 사용하는 문법이라면 클래스는 연관 있는 변수와 함수를 하나로 묶을 때 사용하는 문법 입니다.</p><h3 id="02-클래스는-이럴-때-사용해요"><a href="#02-클래스는-이럴-때-사용해요" class="headerlink" title="02_클래스는 이럴 때 사용해요"></a>02_클래스는 이럴 때 사용해요</h3><p>실무 개발을 하다보면 함수들이 적게는 수백 개에서 많게는 수천 수 만 개가 기본으로 만들어 집니다. 이렇게 많아지다 보면 특정 코드를 찾기도 어렵고 수정하기도 어려워져 관리하기가 힘들어 지며 이렇게 함수가 많아지다보면 개발자들마다 동일한 이름의 함수를 만들어 충돌이 발생할 수도 있다.<br>이러한 것을 방지하기 위해 목적에 맞는 함수들을 따로 모아 가지런히 정리한 것을 클래스라고 할 수 있으며 이렇게 정리해놓으면 함수단위로 관리할 때보다 훨씬 쉽게 찾아서 사용, 수정이 가능해집니다.</p><h3 id="03-클래스-생김새"><a href="#03-클래스-생김새" class="headerlink" title="03_클래스 생김새"></a>03_클래스 생김새</h3><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/56kmpoaw/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe><h3 id="번외-gt-클래스를-활용-예"><a href="#번외-gt-클래스를-활용-예" class="headerlink" title="번외&gt; 클래스를 활용 예"></a>번외&gt; 클래스를 활용 예</h3><iframe scrolling="no" width="100%" height="280px" src="//jsfiddle.net/x7r4ar4f/1/embedded/js,html,result/dark" frameborder="0" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바스크립트-jQuery-완전정복-스터디-1&quot;&gt;&lt;a href=&quot;#자바스크립트-jQuery-완전정복-스터디-1&quot; class=&quot;headerlink&quot; title=&quot;[ 자바스크립트+jQuery 완전정복 스터디 1 ]&quot;&gt;&lt;/a&gt;[ 자바스크립트+j
      
    
    </summary>
    
      <category term="study" scheme="http://windfanta.github.io/blog/categories/study/"/>
    
      <category term="jquery" scheme="http://windfanta.github.io/blog/categories/study/jquery/"/>
    
    
  </entry>
  
</feed>
